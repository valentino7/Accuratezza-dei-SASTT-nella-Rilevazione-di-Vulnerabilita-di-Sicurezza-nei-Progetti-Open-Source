{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SnykCode",
          "semanticVersion": "1.0.0",
          "version": "1.0.0",
          "rules": [
            {
              "id": "java/PT/test",
              "name": "PT/test",
              "shortDescription": {
                "text": "Path Traversal"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/google/j2objc/commit/1b271d8b25c99a91547a19f16f71c048c3164156?diff=split#diff-33b6b27033cb88022415e8cd32b1807cL244",
                    "lines": [
                      {
                        "line": " * Extract a ZipEntry to the specified directory.",
                        "lineNumber": 241,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 242,
                        "lineChange": "none"
                      },
                      {
                        "line": "public File extractZipEntry(File dir, ZipFile zipFile, ZipEntry entry) throws IOException {",
                        "lineNumber": 243,
                        "lineChange": "none"
                      },
                      {
                        "line": "  File outputFile = new File(dir, entry.getName());",
                        "lineNumber": 244,
                        "lineChange": "none"
                      },
                      {
                        "line": "  File parentFile = outputFile.getParentFile();",
                        "lineNumber": 245,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (!parentFile.isDirectory() && !parentFile.mkdirs()) {",
                        "lineNumber": 246,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    throw new IOException(\"Could not extract file to \" + dir.getPath());",
                        "lineNumber": 247,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  if (!outputFile.getCanonicalPath().startsWith(dir.getCanonicalPath() + File.separator)",
                        "lineNumber": 246,
                        "lineChange": "added"
                      },
                      {
                        "line": "      || (!parentFile.isDirectory() && !parentFile.mkdirs())) {",
                        "lineNumber": 247,
                        "lineChange": "added"
                      },
                      {
                        "line": "    throw new IOException(\"Could not extract \" + entry.getName() + \" to \" + dir.getPath());",
                        "lineNumber": 248,
                        "lineChange": "added"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 249,
                        "lineChange": "none"
                      },
                      {
                        "line": "  try (InputStream inputStream = zipFile.getInputStream(entry);",
                        "lineNumber": 250,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileOutputStream outputStream = new FileOutputStream(outputFile)) {",
                        "lineNumber": 251,
                        "lineChange": "none"
                      },
                      {
                        "line": "    byte[] buf = new byte[1024];",
                        "lineNumber": 252,
                        "lineChange": "none"
                      },
                      {
                        "line": "    int n;",
                        "lineNumber": 253,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/blackducksoftware/synopsys-detect/commit/36555b9322986e9560f241d05f2262c29a17663b?diff=split#diff-bc0b5be9b9918488d8fe1dc64584df62L48",
                    "lines": [
                      {
                        "line": "Enumeration<? extends ZipEntry> entries = zipFile.entries();",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "while (entries.hasMoreElements()) {",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "    ZipEntry entry = entries.nextElement();",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Path entryPath = destPath.resolve(entry.getName());",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!entryPath.normalize().startsWith(dest.toPath()))",
                        "lineNumber": 49,
                        "lineChange": "added"
                      },
                      {
                        "line": "        throw new IOException(\"Zip entry contained path traversal\");",
                        "lineNumber": 50,
                        "lineChange": "added"
                      },
                      {
                        "line": "    if (entry.isDirectory()) {",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Files.createDirectories(entryPath);",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Files.createDirectories(entryPath.getParent());",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try (InputStream in = zipFile.getInputStream(entry)) {",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "            try (OutputStream out = new FileOutputStream(entryPath.toFile())) {",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "                IOUtils.copy(in, out);",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }",
                        "lineNumber": 58,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/azkaban/azkaban/commit/3b74a4127c9086cd525252edabc3621febab0428?diff=split#diff-c892cca6401b1e0be4cbca3261b47098L201",
                    "lines": [
                      {
                        "line": "final Enumeration<?> entries = source.entries();",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "while (entries.hasMoreElements()) {",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "  final ZipEntry entry = (ZipEntry) entries.nextElement();",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "  final File newFile = new File(dest, entry.getName());",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (!newFile.getCanonicalPath().startsWith(dest.getCanonicalPath())) {",
                        "lineNumber": 202,
                        "lineChange": "added"
                      },
                      {
                        "line": "    throw new IOException(",
                        "lineNumber": 203,
                        "lineChange": "added"
                      },
                      {
                        "line": "        \"Extracting zip entry would have resulted in a file outside the specified destination\"",
                        "lineNumber": 204,
                        "lineChange": "added"
                      },
                      {
                        "line": "if (entry.isDirectory()) {",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "  newFile.mkdirs();",
                        "lineNumber": 209,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 210,
                        "lineChange": "none"
                      },
                      {
                        "line": "  newFile.getParentFile().mkdirs();",
                        "lineNumber": 211,
                        "lineChange": "none"
                      },
                      {
                        "line": "  final InputStream src = source.getInputStream(entry);",
                        "lineNumber": 212,
                        "lineChange": "none"
                      },
                      {
                        "line": "  try {",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "    final OutputStream output =",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "        new BufferedOutputStream(new FileOutputStream(newFile));",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "      IOUtils.copy(src, output);",
                        "lineNumber": 217,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Test changed key to file.",
                  "* more code cleanup, some tests",
                  "Add option --xcode for Xcode translation testing"
                ],
                "precision": "very-high",
                "repoDatasetSize": 948,
                "cwe": [
                  "CWE-23"
                ]
              }
            },
            {
              "id": "java/IndirectCommandInjection",
              "name": "IndirectCommandInjection",
              "shortDescription": {
                "text": "Command Injection"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nWith an OS command injection attack a web application user can pass commands directly to the system shell, attached to a legitimate request. These commands can then be executed on the application server, potentially leading to harmful consequences, including data exposure or deletion. Like code injection attacks, command injection attacks are essentially a failure of data validation. Unlike code injection attacks, which introduce new code, command injection attacks use existing system functions, often taking advantage of the application's unnecessarily high privilege level, increasing the risk of serious harm and reputational damage.\n\n### Best practices for prevention\n- Never trust user input. Assume any input may transmit harmful values.\n- Adopt the principle of least privilege: No application should have a greater access level than needed to run its required tasks.\n- Control user access policies on a task-by-task basis.\n- Don't pass user input directly to the system; use libraries or APIs that lack system access.\n- Where shell commands must be passed, escape values using functions like shlex for Python, or escapeshellarg() for PHP.\n- Sanitize user input with regular expressions to define permitted characters along with maximum string length.\n- Convert special characters such as `& |  ; $ > < \\ !` before passing to the server.\n- Whitelist permitted commands and validate user responses against these expectations.\n- Remember that code injection can take place on multiple fronts: GET and POST requests, but also cookies and HTTP headers.\n- Ensure up-to-date patching across all systems to remediate known vulnerabilities.\n- Educate all team members on safer data handling procedures to prevent attacks.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/apache/joshua/commit/92c797ffdee361adfdf10c91afe7af08d29e6e17?diff=split#diff-438e6e2bf8732a786b739705b7382c48L125",
                    "lines": [
                      {
                        "line": "static String decoderConfigFileName, decoderCommandFileName;",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "public static void main(String[] args) throws Exception",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "  EvaluationMetric.set_knownNames();",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "  System.exit(0);",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else if (args.length == 1) {",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "  processArgsArray(cfgFileToArgsArray(args[0]));",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "  processArgsArray(args);",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "for (int r = 0; r < refsPerSen; ++r) {",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "  println(\"Testing evaluation metric calculation on reference set \" + r + \":\",2);",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "  test_score(refFileName, refsPerSen, r, true,2);",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "  println(\"\",2);",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "println(\"\",1);",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "numParams = countLines(paramsFileName);",
                        "lineNumber": 191,
                        "lineChange": "none"
                      },
                      {
                        "line": "numSentences = countLines(sourceFileName);",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (numSentences * refsPerSen != countLines(refFileName)) {",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "  println(\"Line count mismatch between \" + sourceFileName + \" and \" + refFileName);",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "  System.exit(20);",
                        "lineNumber": 196,
                        "lineChange": "none"
                      },
                      {
                        "line": "// create copy of config file",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "copyFile(decoderConfigFileName,decoderConfigFileName+\".orig.MERT\");",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "// read paramter names",
                        "lineNumber": 212,
                        "lineChange": "none"
                      },
                      {
                        "line": "BufferedReader inFile_names = new BufferedReader(new FileReader(paramsFileName));",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "for (int c = 1; c <= numParams; ++c) {",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "// initialize lambda[]",
                        "lineNumber": 223,
                        "lineChange": "none"
                      },
                      {
                        "line": "Scanner inFile_init = new Scanner(new FileReader(paramsFileName));",
                        "lineNumber": 224,
                        "lineChange": "none"
                      },
                      {
                        "line": "String dummy = \"\";",
                        "lineNumber": 226,
                        "lineChange": "none"
                      },
                      {
                        "line": "// read in reference sentences",
                        "lineNumber": 280,
                        "lineChange": "none"
                      },
                      {
                        "line": "BufferedReader inFile_refs = new BufferedReader(new FileReader(refFileName));",
                        "lineNumber": 282,
                        "lineChange": "none"
                      },
                      {
                        "line": "String line;",
                        "lineNumber": 283,
                        "lineChange": "none"
                      },
                      {
                        "line": "// read in decoder command",
                        "lineNumber": 296,
                        "lineChange": "none"
                      },
                      {
                        "line": "BufferedReader inFile_comm = new BufferedReader(new FileReader(decoderCommandFileName));",
                        "lineNumber": 298,
                        "lineChange": "none"
                      },
                      {
                        "line": "decoderCommand = inFile_comm.readLine();",
                        "lineNumber": 299,
                        "lineChange": "none"
                      },
                      {
                        "line": "inFile_comm.close();",
                        "lineNumber": 300,
                        "lineChange": "none"
                      },
                      {
                        "line": "/******************************/",
                        "lineNumber": 415,
                        "lineChange": "none"
                      },
                      {
                        "line": "createConfigFile(lambda,decoderConfigFileName,decoderConfigFileName+\".orig.MERT\");",
                        "lineNumber": 417,
                        "lineChange": "none"
                      },
                      {
                        "line": "/***************/",
                        "lineNumber": 419,
                        "lineChange": "none"
                      },
                      {
                        "line": " ",
                        "lineNumber": 422,
                        "lineChange": "none"
                      },
                      {
                        "line": "      println(\"Running Joshua decoder...\",1);",
                        "lineNumber": 423,
                        "lineChange": "added"
                      },
                      {
                        "line": "      myDecoder.initializeDecoder(decoderConfigFileName);",
                        "lineNumber": 424,
                        "lineChange": "added"
                      },
                      {
                        "line": "      myDecoder.decodingTestSet(sourceFileName, decoderOutFileName);",
                        "lineNumber": 425,
                        "lineChange": "added"
                      },
                      {
                        "line": "/*",
                        "lineNumber": 427,
                        "lineChange": "added"
                      },
                      {
                        "line": "      println(\"Running decoder...\",1);",
                        "lineNumber": 428,
                        "lineChange": "none"
                      },
                      {
                        "line": " ",
                        "lineNumber": 429,
                        "lineChange": "none"
                      },
                      {
                        "line": "      Runtime rt = Runtime.getRuntime();",
                        "lineNumber": 430,
                        "lineChange": "none"
                      },
                      {
                        "line": "      Process p = rt.exec (decoderCommand);",
                        "lineNumber": 431,
                        "lineChange": "none"
                      },
                      {
                        "line": "      InputStream is = p.getErrorStream();",
                        "lineNumber": 432,
                        "lineChange": "none"
                      },
                      {
                        "line": "      InputStreamReader isr = new InputStreamReader(is);",
                        "lineNumber": 433,
                        "lineChange": "none"
                      },
                      {
                        "line": "println(\"Ensuring proper decoder output.\",2);",
                        "lineNumber": 451,
                        "lineChange": "none"
                      },
                      {
                        "line": "checkFile(decoderOutFileName);",
                        "lineNumber": 453,
                        "lineChange": "none"
                      },
                      {
                        "line": "fixDecoderOutput();",
                        "lineNumber": 455,
                        "lineChange": "none"
                      },
                      {
                        "line": "progress = 0;",
                        "lineNumber": 461,
                        "lineChange": "none"
                      },
                      {
                        "line": "BufferedReader inFile = new BufferedReader(new FileReader(decoderOutFileName));",
                        "lineNumber": 463,
                        "lineChange": "none"
                      },
                      {
                        "line": "String line, candidate_str;",
                        "lineNumber": 464,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (saveInterCfg) {",
                        "lineNumber": 635,
                        "lineChange": "none"
                      },
                      {
                        "line": "  // create config file with current values",
                        "lineNumber": 636,
                        "lineChange": "none"
                      },
                      {
                        "line": "  createConfigFile(lambda, decoderConfigFileName+\".\"+iteration,decoderConfigFileName+\".orig.MERT\");",
                        "lineNumber": 637,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 638,
                        "lineChange": "none"
                      },
                      {
                        "line": "private static void fixDecoderOutput() throws Exception",
                        "lineNumber": 983,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 984,
                        "lineChange": "none"
                      },
                      {
                        "line": "  copyFile(decoderOutFileName,decoderOutFileName+\".temp.MERT\");",
                        "lineNumber": 985,
                        "lineChange": "none"
                      },
                      {
                        "line": "  BufferedReader inFile = new BufferedReader(new FileReader(decoderOutFileName+\".temp.MERT\"));",
                        "lineNumber": 986,
                        "lineChange": "none"
                      },
                      {
                        "line": "  PrintWriter outFile = new PrintWriter(decoderOutFileName);",
                        "lineNumber": 987,
                        "lineChange": "none"
                      },
                      {
                        "line": "  String line, prevLine;",
                        "lineNumber": 988,
                        "lineChange": "none"
                      },
                      {
                        "line": "  // delete temp copy of old decoder output",
                        "lineNumber": 1033,
                        "lineChange": "none"
                      },
                      {
                        "line": "  File cp = new File(decoderOutFileName+\".temp.MERT\");",
                        "lineNumber": 1034,
                        "lineChange": "none"
                      },
                      {
                        "line": "  cp.delete();",
                        "lineNumber": 1035,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1037,
                        "lineChange": "none"
                      },
                      {
                        "line": "private static void createConfigFile(double[] params, String cfgFileName, String templateFileName) throws Exception",
                        "lineNumber": 1039,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 1040,
                        "lineChange": "none"
                      },
                      {
                        "line": "  // i.e. create cfgFileName, which is similar to templateFileName, but with",
                        "lineNumber": 1041,
                        "lineChange": "none"
                      },
                      {
                        "line": "BufferedReader inFile = new BufferedReader(new FileReader(templateFileName));",
                        "lineNumber": 1044,
                        "lineChange": "none"
                      },
                      {
                        "line": "PrintWriter outFile = new PrintWriter(cfgFileName);",
                        "lineNumber": 1045,
                        "lineChange": "none"
                      },
                      {
                        "line": "String line = inFile.readLine();",
                        "lineNumber": 1047,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1067,
                        "lineChange": "none"
                      },
                      {
                        "line": "private static void copyFile(String sourceFileName, String targetFileName) throws Exception",
                        "lineNumber": 1069,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 1070,
                        "lineChange": "none"
                      },
                      {
                        "line": "  InputStream inStream = new FileInputStream(new File(sourceFileName));",
                        "lineNumber": 1071,
                        "lineChange": "none"
                      },
                      {
                        "line": "  BufferedReader inFile = new BufferedReader(new InputStreamReader(inStream, \"utf8\"));",
                        "lineNumber": 1072,
                        "lineChange": "none"
                      },
                      {
                        "line": "private static void test_score(String inFileName, int candPerSen, int testIndex, boolean isRefFile, int v) throws Exception",
                        "lineNumber": 1097,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 1098,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // test that the translations in inFileName get the expected scores",
                        "lineNumber": 1099,
                        "lineChange": "none"
                      },
                      {
                        "line": "SentenceInfo[] candSentenceInfo = new SentenceInfo[numSentences];",
                        "lineNumber": 1118,
                        "lineChange": "none"
                      },
                      {
                        "line": "BufferedReader inFile = new BufferedReader(new FileReader(inFileName));",
                        "lineNumber": 1120,
                        "lineChange": "none"
                      },
                      {
                        "line": "String line, candidate_str;",
                        "lineNumber": 1121,
                        "lineChange": "none"
                      },
                      {
                        "line": "SentenceInfo[] candSentenceInfo = new SentenceInfo[numSentences];",
                        "lineNumber": 1164,
                        "lineChange": "none"
                      },
                      {
                        "line": "BufferedReader inFile = new BufferedReader(new FileReader(decoderOutFileName));",
                        "lineNumber": 1166,
                        "lineChange": "none"
                      },
                      {
                        "line": "String line, candidate_str;",
                        "lineNumber": 1167,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1252,
                        "lineChange": "none"
                      },
                      {
                        "line": "private static String[] cfgFileToArgsArray(String fileName) throws Exception",
                        "lineNumber": 1254,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 1255,
                        "lineChange": "none"
                      },
                      {
                        "line": "  checkFile(fileName);",
                        "lineNumber": 1256,
                        "lineChange": "none"
                      },
                      {
                        "line": "while (i < args.length) {",
                        "lineNumber": 1331,
                        "lineChange": "none"
                      },
                      {
                        "line": "  String option = args[i];",
                        "lineNumber": 1332,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (option.equals(\"-s\")) { sourceFileName = args[i+1]; }",
                        "lineNumber": 1333,
                        "lineChange": "none"
                      },
                      {
                        "line": "  else if (option.equals(\"-r\")) { refFileName = args[i+1]; }",
                        "lineNumber": 1334,
                        "lineChange": "none"
                      },
                      {
                        "line": "  else if (option.equals(\"-rps\")) {",
                        "lineNumber": 1335,
                        "lineChange": "none"
                      },
                      {
                        "line": "    refsPerSen = Integer.parseInt(args[i+1]);",
                        "lineNumber": 1336,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (maxGramLength < 1) { println(\"maxGramLength must be positive.\"); System.exit(10); }",
                        "lineNumber": 1341,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1342,
                        "lineChange": "none"
                      },
                      {
                        "line": "else if (option.equals(\"-decOut\")) { decoderOutFileName = args[i+1]; }",
                        "lineNumber": 1343,
                        "lineChange": "none"
                      },
                      {
                        "line": "else if (option.equals(\"-decExit\")) {",
                        "lineNumber": 1344,
                        "lineChange": "none"
                      },
                      {
                        "line": "  validDecoderExitValue = Integer.parseInt(args[i+1]);",
                        "lineNumber": 1345,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1346,
                        "lineChange": "none"
                      },
                      {
                        "line": "else if (option.equals(\"-dir\")) { dirPrefix = args[i+1]; }",
                        "lineNumber": 1347,
                        "lineChange": "none"
                      },
                      {
                        "line": "else if (option.equals(\"-p\")) { paramsFileName = args[i+1]; }",
                        "lineNumber": 1348,
                        "lineChange": "none"
                      },
                      {
                        "line": "else if (option.equals(\"-rand\")) {",
                        "lineNumber": 1349,
                        "lineChange": "none"
                      },
                      {
                        "line": "  int rand = Integer.parseInt(args[i+1]);",
                        "lineNumber": 1350,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (runCount < 1) { println(\"runCount must be positive.\"); System.exit(10); }",
                        "lineNumber": 1357,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1358,
                        "lineChange": "none"
                      },
                      {
                        "line": "else if (option.equals(\"-fin\")) { finalLambdasFileName = args[i+1]; }",
                        "lineNumber": 1359,
                        "lineChange": "none"
                      },
                      {
                        "line": "else if (option.equals(\"-cmd\")) { decoderCommandFileName = args[i+1]; }",
                        "lineNumber": 1360,
                        "lineChange": "none"
                      },
                      {
                        "line": "else if (option.equals(\"-dcfg\")) { decoderConfigFileName = args[i+1]; }",
                        "lineNumber": 1361,
                        "lineChange": "none"
                      },
                      {
                        "line": "else if (option.equals(\"-save\")) {",
                        "lineNumber": 1362,
                        "lineChange": "none"
                      },
                      {
                        "line": "  int save = Integer.parseInt(args[i+1]);",
                        "lineNumber": 1363,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (runCount > 1 && randInits == false) { println(\"For runCount > 1, randInits must be set to 1.\"); System.exit(10); }",
                        "lineNumber": 1408,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (dirPrefix != null) {",
                        "lineNumber": 1410,
                        "lineChange": "none"
                      },
                      {
                        "line": "  sourceFileName = fullPath(dirPrefix,sourceFileName);",
                        "lineNumber": 1411,
                        "lineChange": "none"
                      },
                      {
                        "line": "  refFileName = fullPath(dirPrefix,refFileName);",
                        "lineNumber": 1412,
                        "lineChange": "none"
                      },
                      {
                        "line": "  decoderOutFileName = fullPath(dirPrefix,decoderOutFileName);",
                        "lineNumber": 1413,
                        "lineChange": "none"
                      },
                      {
                        "line": "  paramsFileName = fullPath(dirPrefix,paramsFileName);",
                        "lineNumber": 1414,
                        "lineChange": "none"
                      },
                      {
                        "line": "  finalLambdasFileName = fullPath(dirPrefix,finalLambdasFileName);",
                        "lineNumber": 1415,
                        "lineChange": "none"
                      },
                      {
                        "line": "  decoderCommandFileName = fullPath(dirPrefix,decoderCommandFileName);",
                        "lineNumber": 1416,
                        "lineChange": "none"
                      },
                      {
                        "line": "  decoderConfigFileName = fullPath(dirPrefix,decoderConfigFileName);",
                        "lineNumber": 1417,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1418,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (refsPerSen > 1) {",
                        "lineNumber": 1420,
                        "lineChange": "none"
                      },
                      {
                        "line": "  // the provided refFileName might be a prefix",
                        "lineNumber": 1421,
                        "lineChange": "none"
                      },
                      {
                        "line": "  File dummy = new File(refFileName);",
                        "lineNumber": 1422,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (!dummy.exists()) {",
                        "lineNumber": 1423,
                        "lineChange": "none"
                      },
                      {
                        "line": "    refFileName = createUnifiedRefFile(refFileName,refsPerSen);",
                        "lineNumber": 1424,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 1425,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1426,
                        "lineChange": "none"
                      },
                      {
                        "line": "checkFile(sourceFileName);",
                        "lineNumber": 1428,
                        "lineChange": "none"
                      },
                      {
                        "line": "checkFile(paramsFileName);",
                        "lineNumber": 1429,
                        "lineChange": "none"
                      },
                      {
                        "line": "checkFile(decoderCommandFileName);",
                        "lineNumber": 1430,
                        "lineChange": "none"
                      },
                      {
                        "line": "checkFile(decoderConfigFileName);",
                        "lineNumber": 1431,
                        "lineChange": "none"
                      },
                      {
                        "line": "} // processArgs(String[] args)",
                        "lineNumber": 1443,
                        "lineChange": "none"
                      },
                      {
                        "line": "private static void checkFile(String fileName)",
                        "lineNumber": 1445,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 1446,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (!fileExists(fileName)) {",
                        "lineNumber": 1447,
                        "lineChange": "none"
                      },
                      {
                        "line": "    println(\"The file \" + fileName + \" was not found!\");",
                        "lineNumber": 1448,
                        "lineChange": "none"
                      },
                      {
                        "line": "    System.exit(40);",
                        "lineNumber": 1449,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1451,
                        "lineChange": "none"
                      },
                      {
                        "line": "private static boolean fileExists(String fileName)",
                        "lineNumber": 1453,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 1454,
                        "lineChange": "none"
                      },
                      {
                        "line": "  File checker = new File(fileName);",
                        "lineNumber": 1455,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return checker.exists();",
                        "lineNumber": 1456,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1457,
                        "lineChange": "none"
                      },
                      {
                        "line": "private static String createUnifiedRefFile(String prefix, int numFiles) throws Exception",
                        "lineNumber": 1459,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 1460,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (numFiles < 2) {",
                        "lineNumber": 1461,
                        "lineChange": "none"
                      },
                      {
                        "line": "    println(\"Warning: createUnifiedRefFile called with numFiles = \" + numFiles + \"; doing nothing.\");",
                        "lineNumber": 1462,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return prefix;",
                        "lineNumber": 1463,
                        "lineChange": "none"
                      },
                      {
                        "line": "  } else {",
                        "lineNumber": 1464,
                        "lineChange": "none"
                      },
                      {
                        "line": "    File checker;",
                        "lineNumber": 1465,
                        "lineChange": "none"
                      },
                      {
                        "line": "    checker = new File(prefix+\"1\");",
                        "lineNumber": 1466,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!checker.exists()) {",
                        "lineNumber": 1468,
                        "lineChange": "none"
                      },
                      {
                        "line": "      checker = new File(prefix+\".1\");",
                        "lineNumber": 1469,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (!checker.exists()) {",
                        "lineNumber": 1470,
                        "lineChange": "none"
                      },
                      {
                        "line": "        println(\"Can't find reference files.\");",
                        "lineNumber": 1471,
                        "lineChange": "none"
                      },
                      {
                        "line": "        System.exit(50);",
                        "lineNumber": 1472,
                        "lineChange": "none"
                      },
                      {
                        "line": "      } else {",
                        "lineNumber": 1473,
                        "lineChange": "none"
                      },
                      {
                        "line": "        prefix = prefix + \".\";",
                        "lineNumber": 1474,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }",
                        "lineNumber": 1475,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 1476,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String outFileName;",
                        "lineNumber": 1478,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (prefix.endsWith(\".\")) { outFileName = prefix+\"all\"; }",
                        "lineNumber": 1479,
                        "lineChange": "none"
                      },
                      {
                        "line": "    else { outFileName = prefix+\".all\"; }",
                        "lineNumber": 1480,
                        "lineChange": "none"
                      },
                      {
                        "line": "    PrintWriter outFile = new PrintWriter(outFileName);",
                        "lineNumber": 1482,
                        "lineChange": "none"
                      },
                      {
                        "line": "    BufferedReader[] inFile = new BufferedReader[numFiles];",
                        "lineNumber": 1484,
                        "lineChange": "none"
                      },
                      {
                        "line": "  for (int r = 0; r < numFiles; ++r) { inFile[r].close(); }",
                        "lineNumber": 1512,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return outFileName;",
                        "lineNumber": 1514,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1516,
                        "lineChange": "none"
                      },
                      {
                        "line": "} // createUnifiedRefFile(String prefix, int numFiles)",
                        "lineNumber": 1518,
                        "lineChange": "none"
                      },
                      {
                        "line": "private static int countLines(String fileName) throws Exception",
                        "lineNumber": 1520,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 1521,
                        "lineChange": "none"
                      },
                      {
                        "line": "  BufferedReader inFile = new BufferedReader(new FileReader(fileName));",
                        "lineNumber": 1522,
                        "lineChange": "none"
                      },
                      {
                        "line": "  String line;",
                        "lineNumber": 1524,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1589,
                        "lineChange": "none"
                      },
                      {
                        "line": "private static String fullPath(String dir, String fileName)",
                        "lineNumber": 1591,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 1592,
                        "lineChange": "none"
                      },
                      {
                        "line": "  File dummyFile = new File(dir,fileName);",
                        "lineNumber": 1593,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return dummyFile.getAbsolutePath();",
                        "lineNumber": 1594,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1595,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/virtualcell/vcell/commit/7327deda4296af0f802e4b1a21ee47c013a708c6?diff=split#diff-efea0b403bca8feff6ef723e9fd1d2eaL16",
                    "lines": [
                      {
                        "line": " * @param args",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "public static void main(String[] args) throws Exception{",
                        "lineNumber": 15,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}",
                        "lineNumber": 55,
                        "lineChange": "added"
                      },
                      {
                        "line": "public static void main(String[] args){",
                        "lineNumber": 57,
                        "lineChange": "added"
                      },
                      {
                        "line": "  String action = args[0];",
                        "lineNumber": 58,
                        "lineChange": "added"
                      },
                      {
                        "line": "  String[] actionArgs = null;",
                        "lineNumber": 59,
                        "lineChange": "added"
                      },
                      {
                        "line": "  if(args.length > 1){",
                        "lineNumber": 60,
                        "lineChange": "added"
                      },
                      {
                        "line": "    actionArgs = new String[args.length-1];",
                        "lineNumber": 61,
                        "lineChange": "added"
                      },
                      {
                        "line": "private static ProcessInfo spawnProcess(String spawnCommand) throws Exception{",
                        "lineNumber": 84,
                        "lineChange": "added"
                      },
                      {
                        "line": "  Process exportProcess = Runtime.getRuntime().exec(spawnCommand);",
                        "lineNumber": 85,
                        "lineChange": "added"
                      },
                      {
                        "line": "  //Listen for output",
                        "lineNumber": 86,
                        "lineChange": "added"
                      },
                      {
                        "line": "  StreamReader normalOutput = new StreamReader(exportProcess.getInputStream());",
                        "lineNumber": 87,
                        "lineChange": "added"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 99,
                        "lineChange": "added"
                      },
                      {
                        "line": "  private static String createExportCommand(String vcellSchema,String password,String dbHostName,String dbSrvcName,File backupFile){",
                        "lineNumber": 100,
                        "lineChange": "added"
                      },
                      {
                        "line": "    return \"exp \"+\"system\"+\"/\"+(password==null?\"xxxxx\":password)+\"@\"+",
                        "lineNumber": 101,
                        "lineChange": "added"
                      },
                      {
                        "line": "    \"(description\\\\=(address\\\\=(protocol\\\\=tcp)(host\\\\=\"+dbHostName+\")(port\\\\=1521))(connect_data\\\\=(service_name\\\\=\"+dbSrvcName+\")))\"+",
                        "lineNumber": 102,
                        "lineChange": "added"
                      },
                      {
                        "line": "//\t\t\" TABLES=(vc_userinfo) \"+",
                        "lineNumber": 103,
                        "lineChange": "added"
                      },
                      {
                        "line": "    \" FILE=\"+backupFile.getAbsolutePath()",
                        "lineNumber": 104,
                        "lineChange": "added"
                      },
                      {
                        "line": "    +\" OWNER=\"+vcellSchema+\" CONSISTENT=Y\";",
                        "lineNumber": 105,
                        "lineChange": "added"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 107,
                        "lineChange": "added"
                      },
                      {
                        "line": "if(args.length != 6){",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return;",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "String credentials = args[0];",
                        "lineNumber": 21,
                        "lineChange": "removed"
                      },
                      {
                        "line": "String dbName = args[1];",
                        "lineNumber": 22,
                        "lineChange": "removed"
                      },
                      {
                        "line": "File workingDir = new File(args[2]);",
                        "lineNumber": 23,
                        "lineChange": "removed"
                      },
                      {
                        "line": "File exportDir = new File(args[3]);",
                        "lineNumber": 24,
                        "lineChange": "removed"
                      },
                      {
                        "line": "String userSchema = args[4];",
                        "lineNumber": 25,
                        "lineChange": "removed"
                      },
                      {
                        "line": "String dbServerName = args[5];",
                        "lineNumber": 26,
                        "lineChange": "removed"
                      },
                      {
                        "line": "//\t\t\treturn;",
                        "lineNumber": 115,
                        "lineChange": "added"
                      },
                      {
                        "line": "//\t\t}",
                        "lineNumber": 116,
                        "lineChange": "added"
                      },
                      {
                        "line": "    String dbHostName = args[0];",
                        "lineNumber": 117,
                        "lineChange": "added"
                      },
                      {
                        "line": "    String vcellSchema = args[1];",
                        "lineNumber": 118,
                        "lineChange": "added"
                      },
                      {
                        "line": "    String password = args[2];",
                        "lineNumber": 119,
                        "lineChange": "added"
                      },
                      {
                        "line": "    String dbSrvcName = args[3];",
                        "lineNumber": 120,
                        "lineChange": "added"
                      },
                      {
                        "line": "    File workingDir = new File(args[4]);",
                        "lineNumber": 121,
                        "lineChange": "added"
                      },
                      {
                        "line": "    File exportDir = new File(args[5]);",
                        "lineNumber": 122,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 129,
                        "lineChange": "added"
                      },
                      {
                        "line": "String baseFileName = null;",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "File backupFile = null;",
                        "lineNumber": 131,
                        "lineChange": "added"
                      },
                      {
                        "line": "    try{",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "      String datePart = new SimpleDateFormat(\"yyyy_MM_dd_HH_mm_ss\").format(Calendar.getInstance().getTime());",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "      baseFileName = dbServerName+\"_\"+dbName+\"_\"+userSchema+\"_\"+datePart;",
                        "lineNumber": 33,
                        "lineChange": "removed"
                      },
                      {
                        "line": "      File backupFile = new File(workingDir,baseFileName+\".dmp\");",
                        "lineNumber": 34,
                        "lineChange": "removed"
                      },
                      {
                        "line": "      String exportCommand =",
                        "lineNumber": 35,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        \"exp \"+credentials+\"@\"+dbName+\" FILE=\"+backupFile.getAbsolutePath()+\" OWNER=\"+userSchema+\" CONSISTENT=Y\";",
                        "lineNumber": 36,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        ",
                        "lineNumber": 37,
                        "lineChange": "removed"
                      },
                      {
                        "line": "      baseFileName = dbHostName+\"_\"+dbSrvcName+\"_\"+vcellSchema+\"_\"+datePart;",
                        "lineNumber": 134,
                        "lineChange": "added"
                      },
                      {
                        "line": "      backupFile = new File(workingDir,baseFileName+\".dmp\");",
                        "lineNumber": 135,
                        "lineChange": "added"
                      },
                      {
                        "line": "//\t\t\tString exportCommand =",
                        "lineNumber": 136,
                        "lineChange": "added"
                      },
                      {
                        "line": "//\t\t\t\t\"exp \"+credentials+\"@\"+dbName+\" FILE=\"+backupFile.getAbsolutePath()+\" OWNER=\"+userSchema+\" CONSISTENT=Y\";",
                        "lineNumber": 137,
                        "lineChange": "added"
                      },
                      {
                        "line": "      String exportCommand = createExportCommand(vcellSchema, password, dbHostName, dbSrvcName, backupFile);",
                        "lineNumber": 138,
                        "lineChange": "added"
                      },
                      {
                        "line": "//\t\t\tSystem.out.println(exportCommand);",
                        "lineNumber": 139,
                        "lineChange": "added"
                      },
                      {
                        "line": "      //Create export Process",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "      final Process exportProcess = Runtime.getRuntime().exec(exportCommand);",
                        "lineNumber": 39,
                        "lineChange": "removed"
                      },
                      {
                        "line": "      //Listen for output",
                        "lineNumber": 40,
                        "lineChange": "removed"
                      },
                      {
                        "line": "      final boolean[] outReadFlag = new boolean[1];",
                        "lineNumber": 41,
                        "lineChange": "removed"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/ammarx/TagAPI_3/commit/cdc43ec0f44be26d080b8106cb8df503bb4e6599?diff=split#diff-7bdd4dadff7e107738652c771a83bb84L19",
                    "lines": [
                      {
                        "line": " */",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "//we will be using this for testing only...",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "public static void main(String[] args) {",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // TODO code application logic here",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "    //*** Remove this as this is required for it to work fully...",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": " Local local = new Local();",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "Network network = new Network();",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "String UsernameToUse = args[0];",
                        "lineNumber": 26,
                        "lineChange": "removed"
                      },
                      {
                        "line": "String VersionToUse = args[1];",
                        "lineNumber": 27,
                        "lineChange": "removed"
                      },
                      {
                        "line": "String UsernameToUse = \"Ammar_Ahmad\";",
                        "lineNumber": 26,
                        "lineChange": "added"
                      },
                      {
                        "line": "String VersionToUse = \"1.7.2\";",
                        "lineNumber": 27,
                        "lineChange": "added"
                      },
                      {
                        "line": "String OperatingSystemToUse = utils.getOS();",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "System.out.println(\"OS: \" + OperatingSystemToUse);",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "//get profile",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "System.out.println(\"Getting profile details\");",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "network.downloadProfile(OperatingSystemToUse, UsernameToUse);",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "network.downloadVersionManifest(utils.getMineCraft_Version_Manifest_json(OperatingSystemToUse));",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "String MOD_id = null;",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "//check if it is vanilla or not",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (local.checkIfVanillaMC(VersionToUse).equals(true)) {",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "    System.out.println(\"Vanilla Minecraft found!\");",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "    System.out.println(\"Modded Minecraft found!\");",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "    local.MOD_readJson_libraries_name_PLUS_url(utils.getMineCraft_Version_Json(OperatingSystemToUse, VersionToUse));",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "    for (int i = 0; i < local.version_name_list.size(); i++) {",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "        System.out.println(local.version_name_list.get(i));",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "    ",
                        "lineNumber": 79,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    MOD_inheritsFrom = local.readJson_inheritsFrom(utils.getMineCraft_Version_Json(OperatingSystemToUse, VersionToUse));",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "    System.out.println(\"inheritsFrom: \" + MOD_inheritsFrom);",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "    MOD_jar = local.readJson_jar(utils.getMineCraft_Version_Json(OperatingSystemToUse, VersionToUse));",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "    System.out.println(\"jar: \" + MOD_jar);",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "    MOD_assets = local.readJson_assets(utils.getMineCraft_Version_Json(OperatingSystemToUse, VersionToUse));",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "    System.out.println(\"assets: \" + MOD_assets);",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "    MOD_minecraftArguments = local.readJson_minecraftArguments(utils.getMineCraft_Version_Json(OperatingSystemToUse, VersionToUse));",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "    System.out.println(\"minecraftArguments: \" + MOD_minecraftArguments);",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "    MOD_mainClass = local.readJson_mainClass(utils.getMineCraft_Version_Json(OperatingSystemToUse, VersionToUse));",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "    System.out.println(\"mainClass: \" + MOD_mainClass);",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "    MOD_id = local.readJson_id(utils.getMineCraft_Version_Json(OperatingSystemToUse, VersionToUse));",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "    System.out.println(\"id: \" + MOD_id);",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (MOD_inheritsFrom == null) {",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "    System.out.println(\"Using: \" + VersionToUse);",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "    VersionToUse = MOD_inheritsFrom;",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "    System.out.println(\"Using: \" + VersionToUse);",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "//download 1.7.10.json_libs",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "for (int i = 0; i < local.version_manifest_versions_id.size(); i++) {",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (local.version_manifest_versions_id.get(i).equals(VersionToUse)) {",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "        network.downloadVersionJson(OperatingSystemToUse, local.version_manifest_versions_url.get(i).toString(), local.version_manifest_versions_id.get(i).toString());",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "        break;",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "System.out.print(utils.getMineCraft_Version_Json(OperatingSystemToUse, VersionToUse));",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "System.out.print(\"\\n\\n\");",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "local.readJson_libraries_downloads_artifact_url(utils.getMineCraft_Version_Json(OperatingSystemToUse, VersionToUse));",
                        "lineNumber": 141,
                        "lineChange": "removed"
                      },
                      {
                        "line": "local.readJson_libraries_downloads_artifact_path(utils.getMineCraft_Version_Json(OperatingSystemToUse, VersionToUse));",
                        "lineNumber": 142,
                        "lineChange": "removed"
                      },
                      {
                        "line": "local.readJson_libraries_name(utils.getMineCraft_Version_Json(OperatingSystemToUse, VersionToUse));",
                        "lineNumber": 143,
                        "lineChange": "removed"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 140,
                        "lineChange": "added"
                      },
                      {
                        "line": "    local.readJson_libraries_downloads_artifact_url(utils.getMineCraft_Version_Json(OperatingSystemToUse, VersionToUse));",
                        "lineNumber": 141,
                        "lineChange": "added"
                      },
                      {
                        "line": "} catch (Exception ex) {",
                        "lineNumber": 143,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 145,
                        "lineChange": "added"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 146,
                        "lineChange": "added"
                      },
                      {
                        "line": "    local.readJson_libraries_downloads_artifact_path(utils.getMineCraft_Version_Json(OperatingSystemToUse, VersionToUse));",
                        "lineNumber": 147,
                        "lineChange": "added"
                      },
                      {
                        "line": "} catch (Exception ex) {",
                        "lineNumber": 149,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 151,
                        "lineChange": "added"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 152,
                        "lineChange": "added"
                      },
                      {
                        "line": "    local.readJson_libraries_name(utils.getMineCraft_Version_Json(OperatingSystemToUse, VersionToUse));",
                        "lineNumber": 153,
                        "lineChange": "added"
                      },
                      {
                        "line": "} catch (Exception ex) {",
                        "lineNumber": 155,
                        "lineChange": "added"
                      },
                      {
                        "line": "///************************************************************",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "for (int i = 0; i < local.version_url_list.size(); i++) {",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "//this may need to be edited!*************//",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "System.out.println(local.readJson_assetIndex_url(utils.getMineCraft_Version_Json(OperatingSystemToUse, VersionToUse)));",
                        "lineNumber": 159,
                        "lineChange": "removed"
                      },
                      {
                        "line": "System.out.println(local.readJson_assetIndex_id(utils.getMineCraft_Version_Json(OperatingSystemToUse, VersionToUse)));",
                        "lineNumber": 160,
                        "lineChange": "removed"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 173,
                        "lineChange": "added"
                      },
                      {
                        "line": "    System.out.println(local.readJson_assetIndex_url(utils.getMineCraft_Version_Json(OperatingSystemToUse, VersionToUse)));",
                        "lineNumber": 174,
                        "lineChange": "added"
                      },
                      {
                        "line": "} catch (Exception ex) {",
                        "lineNumber": 176,
                        "lineChange": "added"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 180,
                        "lineChange": "added"
                      },
                      {
                        "line": "    System.out.println(local.readJson_assetIndex_id(utils.getMineCraft_Version_Json(OperatingSystemToUse, VersionToUse)));",
                        "lineNumber": 181,
                        "lineChange": "added"
                      },
                      {
                        "line": "} catch (Exception ex) {",
                        "lineNumber": 182,
                        "lineChange": "added"
                      },
                      {
                        "line": "    System.err.println(ex);",
                        "lineNumber": 183,
                        "lineChange": "added"
                      },
                      {
                        "line": "//get assets index id!",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "network.downloadLaunchermeta(OperatingSystemToUse, local.readJson_assetIndex_url(utils.getMineCraft_Version_Json(OperatingSystemToUse, VersionToUse)), local.readJson_assetIndex_id(utils.getMin",
                        "lineNumber": 187,
                        "lineChange": "none"
                      },
                      {
                        "line": "System.out.println(utils.getMineCraftAssetsIndexes_X_json(OperatingSystemToUse, VersionToUse));",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "local.readJson_objects_KEY(utils.getMineCraftAssetsIndexes_X_json(OperatingSystemToUse, local.readJson_assetIndex_id(utils.getMineCraft_Version_Json(OperatingSystemToUse, VersionToUse))));",
                        "lineNumber": 191,
                        "lineChange": "none"
                      },
                      {
                        "line": "local.readJson_objects_KEY_hash(utils.getMineCraftAssetsIndexes_X_json(OperatingSystemToUse, local.readJson_assetIndex_id(utils.getMineCraft_Version_Json(OperatingSystemToUse, VersionToUse))))",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "for (int i = 0; i < local.objects_hash.size(); i++) {",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "System.out.println(\"DOWNLOADING MINECRAFT JAR\");",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (MOD_jar == null) {",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "    network.downloadMinecraftJar(OperatingSystemToUse, VersionToUse);",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 210,
                        "lineChange": "none"
                      },
                      {
                        "line": "    network.downloadMinecraftJar(OperatingSystemToUse, MOD_jar);",
                        "lineNumber": 211,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "//would have tp edit this line as we also need natives paths!",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "System.out.println(\"Getting NATIVES URL\");",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "local.readJson_libraries_downloads_classifiers_natives_X(utils.getMineCraft_Versions_X_X_json(OperatingSystemToUse, VersionToUse), OperatingSystemToUse);",
                        "lineNumber": 217,
                        "lineChange": "none"
                      },
                      {
                        "line": "System.out.println(\"Getting NATIVES PATH\");",
                        "lineNumber": 218,
                        "lineChange": "none"
                      },
                      {
                        "line": "local.readJson_libraries_downloads_classifiers_natives_Y(utils.getMineCraft_Versions_X_X_json(OperatingSystemToUse, VersionToUse), OperatingSystemToUse);",
                        "lineNumber": 219,
                        "lineChange": "none"
                      },
                      {
                        "line": "for (int i = 0; i < local.version_url_list_natives.size(); i++) {",
                        "lineNumber": 221,
                        "lineChange": "none"
                      },
                      {
                        "line": "    System.out.println(\"Extracting...\");",
                        "lineNumber": 225,
                        "lineChange": "none"
                      },
                      {
                        "line": "    System.out.println(local.version_url_list_natives.get(i).toString());",
                        "lineNumber": 226,
                        "lineChange": "none"
                      },
                      {
                        "line": "    System.out.println(utils.getMineCraft_Versions_X_Natives(OperatingSystemToUse, VersionToUse));",
                        "lineNumber": 227,
                        "lineChange": "none"
                      },
                      {
                        "line": "    utils.jarExtract(OperatingSystemToUse, local.version_path_list_natives.get(i).toString(), utils.getMineCraft_Versions_X_Natives(OperatingSystemToUse, VersionToUse));",
                        "lineNumber": 229,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 231,
                        "lineChange": "none"
                      },
                      {
                        "line": "//String HalfArgumentTemplate = local.readJson_minecraftArguments(utils.getMineCraft_Versions_X_X_json(OperatingSystemToUse, VersionToUse));",
                        "lineNumber": 235,
                        "lineChange": "none"
                      },
                      {
                        "line": "String mainClass;",
                        "lineNumber": 244,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (MOD_mainClass == null){",
                        "lineNumber": 212,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if (MOD_mainClass == null) {",
                        "lineNumber": 245,
                        "lineChange": "added"
                      },
                      {
                        "line": "    mainClass = local.readJson_mainClass(utils.getMineCraft_Versions_X_X_json(OperatingSystemToUse, VersionToUse));",
                        "lineNumber": 246,
                        "lineChange": "none"
                      },
                      {
                        "line": "    ",
                        "lineNumber": 214,
                        "lineChange": "removed"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 248,
                        "lineChange": "none"
                      },
                      {
                        "line": "    mainClass =  MOD_mainClass;",
                        "lineNumber": 216,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    mainClass = MOD_mainClass;",
                        "lineNumber": 249,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 250,
                        "lineChange": "none"
                      },
                      {
                        "line": "String NativesDir = utils.getMineCraft_Versions_X_Natives(OperatingSystemToUse, VersionToUse);",
                        "lineNumber": 252,
                        "lineChange": "none"
                      },
                      {
                        "line": "String assetsIdexId;",
                        "lineNumber": 253,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (MOD_assets == null){",
                        "lineNumber": 221,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if (MOD_assets == null) {",
                        "lineNumber": 254,
                        "lineChange": "added"
                      },
                      {
                        "line": "    assetsIdexId = local.readJson_assets(utils.getMineCraft_Versions_X_X_json(OperatingSystemToUse, VersionToUse));",
                        "lineNumber": 255,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 257,
                        "lineChange": "none"
                      },
                      {
                        "line": "    assetsIdexId = MOD_assets;",
                        "lineNumber": 258,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 259,
                        "lineChange": "none"
                      },
                      {
                        "line": "String versionName;",
                        "lineNumber": 267,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (MOD_id == null){",
                        "lineNumber": 232,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if (MOD_id == null) {",
                        "lineNumber": 268,
                        "lineChange": "added"
                      },
                      {
                        "line": "    versionName = local.readJson_id(utils.getMineCraft_Versions_X_X_json(OperatingSystemToUse, VersionToUse));",
                        "lineNumber": 269,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 270,
                        "lineChange": "none"
                      },
                      {
                        "line": "    versionName = MOD_id;",
                        "lineNumber": 271,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 272,
                        "lineChange": "none"
                      },
                      {
                        "line": "String authuuid = local.readJson_id(utils.getMineCraft_X_json(OperatingSystemToUse, UsernameToUse));",
                        "lineNumber": 274,
                        "lineChange": "none"
                      },
                      {
                        "line": "String Username = UsernameToUse;",
                        "lineNumber": 275,
                        "lineChange": "none"
                      },
                      {
                        "line": "String MinecraftJar;",
                        "lineNumber": 276,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (MOD_jar == null){",
                        "lineNumber": 242,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if (MOD_jar == null) {",
                        "lineNumber": 277,
                        "lineChange": "added"
                      },
                      {
                        "line": "    MinecraftJar = utils.getMineCraft_Versions_X_X_jar(OperatingSystemToUse, VersionToUse);",
                        "lineNumber": 278,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 280,
                        "lineChange": "none"
                      },
                      {
                        "line": "    MinecraftJar = utils.getMineCraft_Versions_X_X_jar(OperatingSystemToUse, MOD_jar);",
                        "lineNumber": 281,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 282,
                        "lineChange": "none"
                      },
                      {
                        "line": "String GameAssets = utils.getMineCraftAssetsVirtualLegacyLocation(OperatingSystemToUse);",
                        "lineNumber": 287,
                        "lineChange": "none"
                      },
                      {
                        "line": "System.out.println(\"NativesPath: \" + NativesDir);",
                        "lineNumber": 288,
                        "lineChange": "none"
                      },
                      {
                        "line": "for (int i = 0; i < local.version_path_list.size(); i++) {",
                        "lineNumber": 290,
                        "lineChange": "none"
                      },
                      {
                        "line": "String HalfLibraryArgument = local.generateLibrariesArguments(OperatingSystemToUse);",
                        "lineNumber": 295,
                        "lineChange": "none"
                      },
                      {
                        "line": "String FullLibraryArgument = local.generateLibrariesArguments(OperatingSystemToUse) + utils.getArgsDiv(OperatingSystemToUse) + MinecraftJar;",
                        "lineNumber": 296,
                        "lineChange": "none"
                      },
                      {
                        "line": "System.out.println(\"HalfLibraryArgument: \" + HalfLibraryArgument);",
                        "lineNumber": 297,
                        "lineChange": "none"
                      },
                      {
                        "line": "System.out.println(\"FullLibraryArgument: \" + FullLibraryArgument);",
                        "lineNumber": 298,
                        "lineChange": "none"
                      },
                      {
                        "line": "String HalfArgument = local.generateMinecraftArguments(OperatingSystemToUse, Username, versionName, gameDirectory, AssetsRoot, assetsIdexId, authuuid, \"aeef7bc935f9420eb6314dea7ad7e1e5\", \"{\\\"t",
                        "lineNumber": 300,
                        "lineChange": "none"
                      },
                      {
                        "line": "System.out.println(\"HalfArgument: \" + HalfArgument);",
                        "lineNumber": 301,
                        "lineChange": "none"
                      },
                      {
                        "line": "System.out.println(\"Minecraft.jar: \" + MinecraftJar);",
                        "lineNumber": 302,
                        "lineChange": "none"
                      },
                      {
                        "line": "System.out.println(\"username: \" + Username);",
                        "lineNumber": 304,
                        "lineChange": "none"
                      },
                      {
                        "line": "System.out.println(\"version number: \" + versionName);",
                        "lineNumber": 305,
                        "lineChange": "none"
                      },
                      {
                        "line": "System.out.println(\"game directory: \" + gameDirectory);",
                        "lineNumber": 306,
                        "lineChange": "none"
                      },
                      {
                        "line": "System.out.println(\"assets root directory: \" + AssetsRoot);",
                        "lineNumber": 307,
                        "lineChange": "none"
                      },
                      {
                        "line": "System.out.println(\"assets Index Id: \" + assetsIdexId);",
                        "lineNumber": 308,
                        "lineChange": "none"
                      },
                      {
                        "line": "System.out.println(\"assets legacy directory: \" + GameAssets);",
                        "lineNumber": 309,
                        "lineChange": "none"
                      },
                      {
                        "line": "System.out.println(local.generateRunnableArguments(Xmx, NativesDir, FullLibraryArgument, mainClass, HalfArgument));",
                        "lineNumber": 310,
                        "lineChange": "none"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 312,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String ArgsX = local.generateRunnableArguments(Xmx, NativesDir, FullLibraryArgument, mainClass, HalfArgument);",
                        "lineNumber": 314,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Runtime.getRuntime().exec(\"java \" + ArgsX);",
                        "lineNumber": 315,
                        "lineChange": "none"
                      },
                      {
                        "line": "} catch (Exception e) {",
                        "lineNumber": 317,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "- generating lineCharts is possible",
                  "Integrated MERT and decoder (though still need to integrate -decV option)."
                ],
                "precision": "very-high",
                "repoDatasetSize": 7,
                "cwe": [
                  "CWE-78"
                ]
              }
            },
            {
              "id": "java/HardcodedPassword",
              "name": "HardcodedPassword",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n### Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/utluiz/spring-examples/commit/56e44932a3a004c3ac96ce1caa3e6d8817230f6e?diff=split#diff-19d771f687bc8ca37d378c39d20ed425L26",
                    "lines": [
                      {
                        "line": "  ds.setUrl(\"jdbc:mysql://localhost:3311/agenda\");",
                        "lineNumber": 23,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  ds.setUrl(\"jdbc:mysql://localhost/agenda\");",
                        "lineNumber": 20,
                        "lineChange": "added"
                      },
                      {
                        "line": "  ds.setUser(\"root\");",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "  ds.setPassword(\"root\");",
                        "lineNumber": 25,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  ds.setPassword(\"\");",
                        "lineNumber": 22,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return ds;",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 27,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Evolveum/midpoint/commit/9ce1d7ff1e78ca65d6b614c52035e1971d1187cd?diff=split#diff-0003b3a408395a5640011d7c8422d19bL43",
                    "lines": [
                      {
                        "line": "      // set the password for our message.",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "      pc.setPassword(\"5ecr3t\");",
                        "lineNumber": 42,
                        "lineChange": "removed"
                      },
                      {
                        "line": "      pc.setPassword(Main.ADM_PASSWORD);",
                        "lineNumber": 42,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 43,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/theonedev/onedev/commit/ee60c786981347fc5ab6685656f3de2ea67045f7?diff=split#diff-7f6f95fdc3f39c216b4bd099d0ca65b6L60",
                    "lines": [
                      {
                        "line": "  System.exit(1);",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "root.setPassword(\"12345\");",
                        "lineNumber": 59,
                        "lineChange": "removed"
                      },
                      {
                        "line": "String password = Bootstrap.command.getArgs()[0];",
                        "lineNumber": 63,
                        "lineChange": "added"
                      },
                      {
                        "line": "root.setPassword(password);",
                        "lineNumber": 64,
                        "lineChange": "added"
                      },
                      {
                        "line": "accountManager.save(root);",
                        "lineNumber": 65,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Added user/password configuration from YML file.",
                  "Added ability to configure databases to run tests against."
                ],
                "precision": "very-high",
                "repoDatasetSize": 383,
                "cwe": [
                  "CWE-798",
                  "CWE-259"
                ]
              }
            },
            {
              "id": "java/UsageOfUnencryptedSocket/test",
              "name": "UsageOfUnencryptedSocket/test",
              "shortDescription": {
                "text": "Cleartext Transmission of Sensitive Information"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\nThis weakness occurs when software transmits sensitive information, such as passwords or credit card numbers, in unencrypted form. This information may then be intercepted by threat actors using sniffer tools or interception techniques such as man-in-the-middle (MITM) attacks (often involving social engineering). Attackers can then use information gleaned to perform a variety of actions, depending on the information type. Possible actions include gaining unauthorized access, impersonating a user, moving laterally within the organization's network, or retrieving and potentially modifying files. This weakness is almost completely avoidable through intelligent architecture and design.\n\n### Best practices for prevention\n* Build web applications around a security mindset and the awareness that sniffers may be present at any time.\n* Ensure that all sensitive data transmission uses reliable encryption.\n* Implement security measures so that sensitive results are never returned in plain text.\n* Implement multiple-factor authentication methods to validate remote instances.\n* Use SSL not only at logon but throughout communications.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/ME1312/SubServers-2/commit/9a219a7d0fd259870a94d1f875f3cbb3c942ec1e?diff=split#diff-4a76c605749ad18708be15720e8fac67L57",
                    "lines": [
                      {
                        "line": "public SubDataClient(SubPlugin plugin, InetAddress address, int port, Encryption encryption) throws IOException {",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (Util.isNull(plugin, address, port)) throw new NullPointerException();",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "    socket = new Socket(address, port);",
                        "lineNumber": 56,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    socket = new NamedContainer<>(false, new Socket(address, port));",
                        "lineNumber": 60,
                        "lineChange": "added"
                      },
                      {
                        "line": "    this.plugin = plugin;",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.writer = new PrintWriter(socket.getOutputStream(), true);",
                        "lineNumber": 58,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    this.writer = new PrintWriter(socket.get().getOutputStream(), true);",
                        "lineNumber": 62,
                        "lineChange": "added"
                      },
                      {
                        "line": "    this.encryption = encryption;",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.queue = new LinkedList<NamedContainer<String, PacketOut>>();",
                        "lineNumber": 64,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/dddpaul/android-SimpleNetCat/commit/3235f85ae26fa31e1e36739c608668e15c53a04c?diff=split#diff-6689eedf89cc41d9c93933ea7ff5ebf4L62",
                    "lines": [
                      {
                        "line": "    int port = Integer.parseInt( params[2] );",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Log.d( CLASS_NAME, String.format( \"Connecting to %s:%d\", host, port ) );",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "    socket = new Socket( host, port );",
                        "lineNumber": 61,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    result.object = new Socket( host, port );",
                        "lineNumber": 65,
                        "lineChange": "added"
                      },
                      {
                        "line": "    break;",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "case RECEIVE:",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "    BufferedReader reader = new BufferedReader( new InputStreamReader( input ) );",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "    PrintWriter writer = new PrintWriter( socket.getOutputStream() );",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "    transferStreams( reader, writer );",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 114,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/rancher/cattle/commit/b06df6f37fdfe906b7804fbba41d2c02d472f8ab?diff=split#diff-125505ce5e24cbf259a0267dd1d3af77L314",
                    "lines": [
                      {
                        "line": "String[] parts = master.getConfig().getAdvertiseAddress().split(\":\");",
                        "lineNumber": 311,
                        "lineChange": "none"
                      },
                      {
                        "line": "try (",
                        "lineNumber": 312,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Socket socket = new Socket(parts[0], Integer.parseInt(parts[1]));",
                        "lineNumber": 313,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    OutputStream os = socket.getOutputStream();",
                        "lineNumber": 314,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    Socket socket = new Socket();",
                        "lineNumber": 313,
                        "lineChange": "added"
                      },
                      {
                        "line": ") {",
                        "lineNumber": 315,
                        "lineChange": "none"
                      },
                      {
                        "line": "    socket.connect(new InetSocketAddress(parts[0], Integer.parseInt(parts[1])), 5000);",
                        "lineNumber": 315,
                        "lineChange": "added"
                      },
                      {
                        "line": "    log.info(\"Connection test to master\");",
                        "lineNumber": 316,
                        "lineChange": "none"
                      },
                      {
                        "line": " } catch (IOException e) {",
                        "lineNumber": 317,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Use thread local sockets for everything except IDLE and STATUS.",
                  "- Adding a test that a locator can shut itself down\nwith SSL.",
                  "Added support for SSL secured Manager connections"
                ],
                "precision": "very-high",
                "repoDatasetSize": 108,
                "cwe": [
                  "CWE-319"
                ]
              }
            },
            {
              "id": "java/Deserialization/test",
              "name": "Deserialization/test",
              "shortDescription": {
                "text": "Deserialization of Untrusted Data"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\n\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n\n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/apache/commons-jcs/commit/3d7a7f8fdd526d01c1b4240b6da9abf5701acfe5?diff=split#diff-256cbcc3690cc484ff94133b10b72f16L197",
                    "lines": [
                      {
                        "line": "/** Description of the Method */",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "public String read( URLConnection connection )",
                        "lineNumber": 196,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 197,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String result = \"\";",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "    {",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "        ObjectInputStream is = new ObjectInputStream( connection.getInputStream() );",
                        "lineNumber": 201,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        ObjectInputStream is = new ObjectInputStreamClassLoaderAware( connection.getInputStream(), null );",
                        "lineNumber": 201,
                        "lineChange": "added"
                      },
                      {
                        "line": "        result = ( String ) is.readObject();",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "        is.close();",
                        "lineNumber": 203,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/tony19/logback-android/commit/665f0d0747260ddff683569f334db4757ad2ac94?diff=split#diff-3812d3ae08ad7172a48335985b14bdd8L47",
                    "lines": [
                      {
                        "line": " * @param inputStream input stream from which events will be read",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "public RemoteAppenderStreamClient(String id, Socket socket) {",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "  this.id = id;",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "  this.socket = socket;",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "while (true) {",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "  // read an event from the wire",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "  ILoggingEvent event = (ILoggingEvent) ois.readObject();",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "  // get a logger from the hierarchy. The name of the logger is taken to",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "  // be the name contained in the event.",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "return new ObjectInputStream(inputStream);",
                        "lineNumber": 128,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    return new HardenedLoggingEventInputStream(inputStream);",
                        "lineNumber": 128,
                        "lineChange": "added"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return new ObjectInputStream(socket.getInputStream());",
                        "lineNumber": 130,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  return new HardenedLoggingEventInputStream(socket.getInputStream());",
                        "lineNumber": 130,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 131,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Alluxio/alluxio/commit/1a0d75ddbb0d6e1857067789a5ba232887dbf90c?diff=split#diff-110c505811cbbd4fcc108c98190afcbdL51",
                    "lines": [
                      {
                        "line": " *                     stream header in the constructor of {@link ObjectInputStream}",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "public AlluxioLog4jSocketNode(AlluxioLogServerProcess process, Socket socket)",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "    throws IOException {",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "LoggingEvent event;",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "Logger remoteLogger;",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "try (ObjectInputStream objectInputStream = new ObjectInputStream(",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "    new BufferedInputStream(mSocket.getInputStream()))) {",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "  while (true) {",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "    event = (LoggingEvent) objectInputStream.readObject();",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (mHierarchy == null) {",
                        "lineNumber": 64,
                        "lineChange": "removed"
                      },
                      {
                        "line": "      mHierarchy = mLogServerProcess.configureHierarchy(",
                        "lineNumber": 65,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    if (hierarchy == null) {",
                        "lineNumber": 63,
                        "lineChange": "added"
                      },
                      {
                        "line": "      hierarchy = mLogServerProcess.configureHierarchy(",
                        "lineNumber": 64,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Save highlights as a json file, not an object dump.",
                  "Serialized reporter - Allow specifying multiple result dir source paths"
                ],
                "precision": "very-high",
                "repoDatasetSize": 68,
                "cwe": [
                  "CWE-502"
                ]
              }
            },
            {
              "id": "python/PT",
              "name": "PT",
              "shortDescription": {
                "text": "Path Traversal"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/pynickle/amazing-python/commit/80d2cc8c3e2c8330416b91f17a09b51830915b86?diff=split#diff-f626b00ab4d99fdbd4cb2bd61ae29469L118",
                    "lines": [
                      {
                        "line": "if request.method == \"POST\":",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try:",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "        f = request.files['file']",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "        filename = f.filename",
                        "lineNumber": 118,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        filename = secure_filename(f.filename)",
                        "lineNumber": 164,
                        "lineChange": "added"
                      },
                      {
                        "line": "        f.save(filename)",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "        with open(filename, \"r\", encoding=\"utf-8\") as f:",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "            success, errors = words_validate(f.read())",
                        "lineNumber": 167,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/WhaleShark-Team/cobra/commit/1ac467a2c1cf8427a5bf60031677817140fe181c?diff=split#diff-dc0ad7c98d7072655327746f1bc95b3aL72",
                    "lines": [
                      {
                        "line": "task_type = 1",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "# check if there is a file or gitlab url",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "if len(request.files) == 0:",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # no files, should check username and password",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "    task_type = 1",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "# there is a file, check file format and uncompress it.",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "task_type = 2",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "upload_src = request.files['file']",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "filename = str(int(time.time())) + '_' + upload_src.filename",
                        "lineNumber": 90,
                        "lineChange": "removed"
                      },
                      {
                        "line": "filename = str(int(time.time())) + '_' + secure_filename(upload_src.filename)",
                        "lineNumber": 91,
                        "lineChange": "added"
                      },
                      {
                        "line": "filepath = 'uploads/' + filename",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "upload_src.save(filepath)",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "# if you upload a rar file, upload_src.mimetype will returns \"application/octet-stream\"",
                        "lineNumber": 95,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Wordseer/wordseer/commit/ea92ade27f7a7a12d057a2b71daf9ffa1cf4385e?diff=split#diff-e86334029c6a0118169cce848ff474ddR13",
                    "lines": [
                      {
                        "line": " PROJECT_ROUTE = \"/projects/\"",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": " ",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "def allowed_file(filename):",
                        "lineNumber": 12,
                        "lineChange": "added"
                      },
                      {
                        "line": "    return os.path.splitext(filename)[1] in app.config[\"ALLOWED_EXTENSIONS\"]",
                        "lineNumber": 13,
                        "lineChange": "added"
                      },
                      {
                        "line": " @app.route(PROJECT_ROUTE, methods=[\"GET\", \"POST\"])",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": " def projects():",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "if request.method == \"POST\":",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "    uploaded_file = request.files[\"uploaded_file\"]",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if uploaded_file and allowed_file(uploaded_file.filename):",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "        filename = secure_filename(uploaded_file.filename)",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "        dest_path = os.path.join(app.config[\"UPLOAD_DIR\"],",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "            filename)",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "        uploaded_file.save(dest_path)",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "        #TODO: send the user somewhere useful?",
                        "lineNumber": 49,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "update test files for reports.",
                  "Python 3 support",
                  "Add test for handling upload files task"
                ],
                "precision": "very-high",
                "repoDatasetSize": 553,
                "cwe": [
                  "CWE-23"
                ]
              }
            },
            {
              "id": "python/CommandInjection",
              "name": "CommandInjection",
              "shortDescription": {
                "text": "Command Injection"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nWith an OS command injection attack a web application user can pass commands directly to the system shell, attached to a legitimate request. These commands can then be executed on the application server, potentially leading to harmful consequences, including data exposure or deletion. Like code injection attacks, command injection attacks are essentially a failure of data validation. Unlike code injection attacks, which introduce new code, command injection attacks use existing system functions, often taking advantage of the application's unnecessarily high privilege level, increasing the risk of serious harm and reputational damage.\n\n### Best practices for prevention\n- Never trust user input. Assume any input may transmit harmful values.\n- Adopt the principle of least privilege: No application should have a greater access level than needed to run its required tasks.\n- Control user access policies on a task-by-task basis.\n- Don't pass user input directly to the system; use libraries or APIs that lack system access.\n- Where shell commands must be passed, escape values using functions like shlex for Python, or escapeshellarg() for PHP.\n- Sanitize user input with regular expressions to define permitted characters along with maximum string length.\n- Convert special characters such as `& |  ; $ > < \\ !` before passing to the server.\n- Whitelist permitted commands and validate user responses against these expectations.\n- Remember that code injection can take place on multiple fronts: GET and POST requests, but also cookies and HTTP headers.\n- Ensure up-to-date patching across all systems to remediate known vulnerabilities.\n- Educate all team members on safer data handling procedures to prevent attacks.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/DustinBorn/avain/commit/4776439387645bced0e86e3766817de2562bf2eb?diff=split#diff-40f53a8850b6eb3209bd2d436d3ec5acL41",
                    "lines": [
                      {
                        "line": "# first download the data feed overview to retrieve URLs to all data feeds",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "try:",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "    nvd_response = requests.get(\"https://nvd.nist.gov/vuln/data-feeds\", timeout=20)",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "except:",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "communicate_warning(\"An error occured when trying to download webpage: https://nvd.nist.gov/vuln/data-feeds\")",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "# match the data feed URLs",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "nvd_nist_datafeed_html = nvd_response.text",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "jfeed_expr = re.compile(r\"https://nvd\\.nist\\.gov/feeds/json/cve/1\\.1/nvdcve-1\\.1-\\d\\d\\d\\d.json\\.zip\")",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "nvd_feed_urls = re.findall(jfeed_expr, nvd_nist_datafeed_html)",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "if not nvd_feed_urls:",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "with open(WGET_OUTFILE, \"w\") as file:",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "    zipfiles = []",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "    for nvd_feed_url in nvd_feed_urls:",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "        outname = os.path.join(NVD_DATAFEED_DIR, nvd_feed_url.split(\"/\")[-1])",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return_code = subprocess.call(\"wget %s -O %s\" % (nvd_feed_url, outname), stdout=file, stderr=subprocess.STDOUT, shell=True)",
                        "lineNumber": 65,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        return_code = subprocess.call(\"wget %s -O %s\" % (shlex.quote(nvd_feed_url), shlex.quote(outname)),",
                        "lineNumber": 86,
                        "lineChange": "added"
                      },
                      {
                        "line": "                                      stdout=file, stderr=subprocess.STDOUT, shell=True)",
                        "lineNumber": 87,
                        "lineChange": "added"
                      },
                      {
                        "line": "        if return_code != 0:",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "            NVD_UPDATE_SUCCESS = False",
                        "lineNumber": 89,
                        "lineChange": "added"
                      },
                      {
                        "line": "            communicate_warning(\"Getting NVD data feed %s failed\" %  nvd_feed_url)",
                        "lineNumber": 90,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/phase/o/commit/0f4bf9160b046e42f4cfad49585cc727b5213dc0?diff=split#diff-d689391370727e13cf640b0a56f5c1f0L32",
                    "lines": [
                      {
                        "line": "    compileO()",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "#Run code",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "code = request.form['code']",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "input = request.form['input'].replace('\\r\\n', '\\n')",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "print('Got code:', code, 'input:', input)",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "print('Running O code...')",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "p = Popen('./oide -e ' + code, stdout=PIPE, stderr=PIPE, stdin=PIPE, universal_newlines=True, shell=True)",
                        "lineNumber": 35,
                        "lineChange": "removed"
                      },
                      {
                        "line": "p = Popen(['./oide', '-e', code], stdout=PIPE, stderr=PIPE, stdin=PIPE, universal_newlines=True)",
                        "lineNumber": 35,
                        "lineChange": "added"
                      },
                      {
                        "line": "output, error = p.communicate(input)",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "#Output to IDE",
                        "lineNumber": 37,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/fossasia/susi_linux/commit/cb0d01d811fcb53863847ce57f57e8cb6c83df6c?diff=split#diff-d1b551c102df7ccabbf2e58275781476L15",
                    "lines": [
                      {
                        "line": "    return 'starting the installation script'",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "@app.route('/config/<stt>/<tts>/<hotword>/<wake>')",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "def config(stt, tts, hotword, wake):",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "    os.system('sudo bash /home/pi/SUSI.AI/susi_linux/access_point/server/config.sh {} {} {} {}'.format(stt,tts,hotword,wake))  #nosec #pylint-disable type: ignore",
                        "lineNumber": 16,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    subprocess.call(['sudo', 'bash' , 'server/config.sh', stt, tts, hotword, wake])  #nosec #pylint-disable type: ignore",
                        "lineNumber": 16,
                        "lineChange": "added"
                      },
                      {
                        "line": "    return 'Done' # pylint-enable",
                        "lineNumber": 17,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Tracking a local branch which in turn tracks a remote ref:",
                  "Python 3 support"
                ],
                "precision": "very-high",
                "repoDatasetSize": 128,
                "cwe": [
                  "CWE-78"
                ]
              }
            },
            {
              "id": "java/InsecureCipher",
              "name": "InsecureCipher",
              "shortDescription": {
                "text": "Use of a Broken or Risky Cryptographic Algorithm"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "\n## Details\n\nWhen sensitive information is transmitted with weak encryption, attackers are potentially able to intercept the information and decrypt it, with a wide range of negative consequences. This includes accessing code or content they are not authorized to view and changing or taking down a site or app, often with a demand for ransom. Every developer is aware of the risks of transmitting sensitive information in plain text. Yet many still use outdated or inferior cryptographic methods to protect information under their control. As cryptographic methods grow stronger with time, code must be updated to incorporate more modern and secure cryptography.\n\n### Best practices for prevention\n* Avoid using DES, and use AES (in a secure mode, such as Galois/Counter Mode) or another strong encryption algorithm instead.\n* Be aware of outdated hashes, such as MD5 and SHA1 (along with many others); recognize and implement current cryptographic standards instead.\n* Never use custom or DIY security and cryptographic methods; instead, use methods that are part of an accepted library or framework.\n* Ensure that code dealing with cryptographic methods is highly modular and can be easily replaced as security standards change.\n* Increase developer awareness of proper encryption key management and protection to ensure best practices throughout the application.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/matthewmccullough/encryption-jvm-bootcamp/commit/de0bb8bb6143d1c24c7d31c238f04b6eae009393?diff=split#diff-cb0790c00644741f9df5a7f311aec96aL36",
                    "lines": [
                      {
                        "line": "//Set up the cipher",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "final Cipher desCipher = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");",
                        "lineNumber": 35,
                        "lineChange": "removed"
                      },
                      {
                        "line": "final Cipher desCipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");",
                        "lineNumber": 35,
                        "lineChange": "added"
                      },
                      {
                        "line": "//////////////////////////////////////",
                        "lineNumber": 37,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/TrsstProject/trsst/commit/50df034a0214314137898d9abb41ddf9770f0d67?diff=split#diff-93779de8272688c3ecb0711530fa8fa3L634",
                    "lines": [
                      {
                        "line": " IESCipher cipher = new IESCipher(new IESEngine(",
                        "lineNumber": 632,
                        "lineChange": "none"
                      },
                      {
                        "line": "        new ECDHBasicAgreement(), new KDF2BytesGenerator(",
                        "lineNumber": 633,
                        "lineChange": "none"
                      },
                      {
                        "line": "                new SHA1Digest()), new HMac(new SHA1Digest()),",
                        "lineNumber": 632,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        new PaddedBufferedBlockCipher(new DESEngine())));",
                        "lineNumber": 633,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                new SHA1Digest()), new HMac(new SHA256Digest()),",
                        "lineNumber": 634,
                        "lineChange": "added"
                      },
                      {
                        "line": "        new PaddedBufferedBlockCipher(new AESEngine())));",
                        "lineNumber": 635,
                        "lineChange": "added"
                      },
                      {
                        "line": "cipher.engineInit(Cipher.ENCRYPT_MODE, publicKey,",
                        "lineNumber": 636,
                        "lineChange": "none"
                      },
                      {
                        "line": "        new SecureRandom());",
                        "lineNumber": 637,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/apache/cloudstack/commit/34f8f795e15b89477f72aa6f1e69f7797c930db4?diff=split#diff-56788b012a7afc046f3c8de66500236aL55",
                    "lines": [
                      {
                        "line": "try {",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "  Cipher cipher = Cipher.getInstance(\"DES\");",
                        "lineNumber": 54,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  int maxKeySize = 8;",
                        "lineNumber": 55,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  SecretKeySpec keySpec = new SecretKeySpec(normalizeKey(password.getBytes(), maxKeySize), \"DES\");",
                        "lineNumber": 56,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");",
                        "lineNumber": 56,
                        "lineChange": "added"
                      },
                      {
                        "line": "  SecretKeySpec keySpec = new SecretKeySpec(keyIvPair.getKeyBytes(), \"AES\");",
                        "lineNumber": 57,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Adding AES example and unit test",
                  "Removed IDEA and RC2 CipherSuites to make it clear they are not\nsupported.",
                  "- added *_AES_* cipher suites to SSLEngine (and therefore Java SSLSocketImpl)"
                ],
                "precision": "very-high",
                "repoDatasetSize": 50,
                "cwe": [
                  "CWE-327"
                ]
              }
            },
            {
              "id": "java/InsecureHash",
              "name": "InsecureHash",
              "shortDescription": {
                "text": "Use of Password Hash With Insufficient Computational Effort"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nSensitive information should never be stored in plain text, since this makes it very easy for unauthorized users, whether malicious insiders or outside attackers, to access. Hashing methods are used to make stored passwords and other sensitive data unreadable to users. For example, when a password is defined for the first time, it is hashed and then stored. The next time that user attempts to log on, the password they enter is hashed following the same procedure and compared with the stored value. In this way, the original password never needs to be stored in the system.\n\nHashing is a one-way scheme, meaning a hashed password cannot be reverse engineered. However, if an outdated or custom programmed hashing scheme is used, it becomes simple for an attacker with powerful modern computing power to gain access to the hashes used. This opens up access to all stored password information, leading to breached security. Therefore, it is essential for developers to understand modern, secure password hashing techniques.\n\n### Best practices for prevention\n* Use strong standard algorithms for hashing rather than simpler but outdated methods or DIY hashing schemes, which may have inherent weaknesses.\n* Use modular design for all code dealing with hashing so it can be swapped out as security standards change over time.\n* Use salting in combination with hashing (While this places more demands on resources, it is an essential step for tighter security.).\n* Implement zero-trust architecture to ensure that access to password data is granted only for legitimate business purposes.\n* Increase developer awareness of current standards in data security and cryptography.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/tita/tita/commit/398f6b776a2aea7f20bf604768b8721beff8d93a?diff=split#diff-dd34c5e6a15ca48bff6f9ca749e68243L164",
                    "lines": [
                      {
                        "line": " */",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "private String getHashedPassword(String pwd) throws NoSuchAlgorithmException {",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "    MessageDigest md = MessageDigest.getInstance(\"SHA-1\");",
                        "lineNumber": 163,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    MessageDigest md = MessageDigest.getInstance(\"SHA-256\");",
                        "lineNumber": 103,
                        "lineChange": "added"
                      },
                      {
                        "line": "    byte[] encryptMsg = md.digest(pwd.getBytes());",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return new String(encryptMsg);",
                        "lineNumber": 165,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    return bytes2String(encryptMsg);",
                        "lineNumber": 105,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/devonfw/my-thai-star/commit/095a3fb6bb860a2411cb51e812121ec2a6b99894?diff=split#diff-4f73d1042058dd462057744068125d4eL242",
                    "lines": [
                      {
                        "line": "    + String.format(\"%02d\", ldt1.getSecond());",
                        "lineNumber": 240,
                        "lineChange": "none"
                      },
                      {
                        "line": "MessageDigest md = MessageDigest.getInstance(\"MD5\");",
                        "lineNumber": 241,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MessageDigest md = MessageDigest.getInstance(\"SHA-256\");",
                        "lineNumber": 242,
                        "lineChange": "added"
                      },
                      {
                        "line": "md.update((email + date + time).getBytes());",
                        "lineNumber": 243,
                        "lineChange": "none"
                      },
                      {
                        "line": "byte[] digest = md.digest();",
                        "lineNumber": 244,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/SecurityCompass/AndroidLabs/commit/5608f75dd665beac85dbad08f80b91d73b27904a?diff=split#diff-ffc047d4a5f84de13e373f2392bfb11bL148",
                    "lines": [
                      {
                        "line": "byte[] passwordBytes = (password).getBytes(\"UTF-8\");",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "MessageDigest md = MessageDigest.getInstance(\"SHA-1\");",
                        "lineNumber": 147,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MessageDigest md = MessageDigest.getInstance(\"SHA-256\");",
                        "lineNumber": 147,
                        "lineChange": "added"
                      },
                      {
                        "line": "md.reset();",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "md.update(salt);",
                        "lineNumber": 149,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Added an enum for the supported encryption algorithms",
                  "Added #hash(byte[], String)",
                  "Added support for\nsha256 and nonce token."
                ],
                "precision": "very-high",
                "repoDatasetSize": 122,
                "cwe": [
                  "CWE-916"
                ]
              }
            },
            {
              "id": "java/PT",
              "name": "PT",
              "shortDescription": {
                "text": "Path Traversal"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/google/j2objc/commit/1b271d8b25c99a91547a19f16f71c048c3164156?diff=split#diff-33b6b27033cb88022415e8cd32b1807cL244",
                    "lines": [
                      {
                        "line": " * Extract a ZipEntry to the specified directory.",
                        "lineNumber": 241,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 242,
                        "lineChange": "none"
                      },
                      {
                        "line": "public File extractZipEntry(File dir, ZipFile zipFile, ZipEntry entry) throws IOException {",
                        "lineNumber": 243,
                        "lineChange": "none"
                      },
                      {
                        "line": "  File outputFile = new File(dir, entry.getName());",
                        "lineNumber": 244,
                        "lineChange": "none"
                      },
                      {
                        "line": "  File parentFile = outputFile.getParentFile();",
                        "lineNumber": 245,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (!parentFile.isDirectory() && !parentFile.mkdirs()) {",
                        "lineNumber": 246,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    throw new IOException(\"Could not extract file to \" + dir.getPath());",
                        "lineNumber": 247,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  if (!outputFile.getCanonicalPath().startsWith(dir.getCanonicalPath() + File.separator)",
                        "lineNumber": 246,
                        "lineChange": "added"
                      },
                      {
                        "line": "      || (!parentFile.isDirectory() && !parentFile.mkdirs())) {",
                        "lineNumber": 247,
                        "lineChange": "added"
                      },
                      {
                        "line": "    throw new IOException(\"Could not extract \" + entry.getName() + \" to \" + dir.getPath());",
                        "lineNumber": 248,
                        "lineChange": "added"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 249,
                        "lineChange": "none"
                      },
                      {
                        "line": "  try (InputStream inputStream = zipFile.getInputStream(entry);",
                        "lineNumber": 250,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileOutputStream outputStream = new FileOutputStream(outputFile)) {",
                        "lineNumber": 251,
                        "lineChange": "none"
                      },
                      {
                        "line": "    byte[] buf = new byte[1024];",
                        "lineNumber": 252,
                        "lineChange": "none"
                      },
                      {
                        "line": "    int n;",
                        "lineNumber": 253,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/blackducksoftware/synopsys-detect/commit/36555b9322986e9560f241d05f2262c29a17663b?diff=split#diff-bc0b5be9b9918488d8fe1dc64584df62L48",
                    "lines": [
                      {
                        "line": "Enumeration<? extends ZipEntry> entries = zipFile.entries();",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "while (entries.hasMoreElements()) {",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "    ZipEntry entry = entries.nextElement();",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Path entryPath = destPath.resolve(entry.getName());",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!entryPath.normalize().startsWith(dest.toPath()))",
                        "lineNumber": 49,
                        "lineChange": "added"
                      },
                      {
                        "line": "        throw new IOException(\"Zip entry contained path traversal\");",
                        "lineNumber": 50,
                        "lineChange": "added"
                      },
                      {
                        "line": "    if (entry.isDirectory()) {",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Files.createDirectories(entryPath);",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Files.createDirectories(entryPath.getParent());",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try (InputStream in = zipFile.getInputStream(entry)) {",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "            try (OutputStream out = new FileOutputStream(entryPath.toFile())) {",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "                IOUtils.copy(in, out);",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }",
                        "lineNumber": 58,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/azkaban/azkaban/commit/3b74a4127c9086cd525252edabc3621febab0428?diff=split#diff-c892cca6401b1e0be4cbca3261b47098L201",
                    "lines": [
                      {
                        "line": "final Enumeration<?> entries = source.entries();",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "while (entries.hasMoreElements()) {",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "  final ZipEntry entry = (ZipEntry) entries.nextElement();",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "  final File newFile = new File(dest, entry.getName());",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (!newFile.getCanonicalPath().startsWith(dest.getCanonicalPath())) {",
                        "lineNumber": 202,
                        "lineChange": "added"
                      },
                      {
                        "line": "    throw new IOException(",
                        "lineNumber": 203,
                        "lineChange": "added"
                      },
                      {
                        "line": "        \"Extracting zip entry would have resulted in a file outside the specified destination\"",
                        "lineNumber": 204,
                        "lineChange": "added"
                      },
                      {
                        "line": "if (entry.isDirectory()) {",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "  newFile.mkdirs();",
                        "lineNumber": 209,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 210,
                        "lineChange": "none"
                      },
                      {
                        "line": "  newFile.getParentFile().mkdirs();",
                        "lineNumber": 211,
                        "lineChange": "none"
                      },
                      {
                        "line": "  final InputStream src = source.getInputStream(entry);",
                        "lineNumber": 212,
                        "lineChange": "none"
                      },
                      {
                        "line": "  try {",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "    final OutputStream output =",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "        new BufferedOutputStream(new FileOutputStream(newFile));",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "      IOUtils.copy(src, output);",
                        "lineNumber": 217,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Test changed key to file.",
                  "* more code cleanup, some tests",
                  "Add option --xcode for Xcode translation testing"
                ],
                "precision": "very-high",
                "repoDatasetSize": 948,
                "cwe": [
                  "CWE-23"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.io.FileReader, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9)",
              "[java.io.FileReader](10)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "external/storm-hive/src/test/java/org/apache/storm/hive/bolt/BucketTestHiveTopology.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 76,
                  "endLine": 76,
                  "startColumn": 31,
                  "endColumn": 63
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e7f55e30232887dd49960dd08664e2d5c2c976b9e8276e28bbdc89781fbd6a61",
            "1": "19689298.46f83114.1e6de5e8.6c52ae28.025462d2.e98056d8.aabe2d15.54d46e25.5b00db80.46f83114.12e0012f.de031890.025462d2.e4d7b7ac.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/storm-hive/src/test/java/org/apache/storm/hive/bolt/BucketTestHiveTopology.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 62,
                            "endLine": 62,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/storm-hive/src/test/java/org/apache/storm/hive/bolt/BucketTestHiveTopology.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 62,
                            "endLine": 62,
                            "startColumn": 37,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/storm-hive/src/test/java/org/apache/storm/hive/bolt/BucketTestHiveTopology.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 62,
                            "endLine": 62,
                            "startColumn": 16,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/storm-hive/src/test/java/org/apache/storm/hive/bolt/BucketTestHiveTopology.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 76,
                            "endLine": 76,
                            "startColumn": 64,
                            "endColumn": 82
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/storm-hive/src/test/java/org/apache/storm/hive/bolt/BucketTestHiveTopology.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 134,
                            "endLine": 134,
                            "startColumn": 44,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/storm-hive/src/test/java/org/apache/storm/hive/bolt/BucketTestHiveTopology.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 135,
                            "endLine": 135,
                            "startColumn": 29,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/storm-hive/src/test/java/org/apache/storm/hive/bolt/BucketTestHiveTopology.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 135,
                            "endLine": 135,
                            "startColumn": 13,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/storm-hive/src/test/java/org/apache/storm/hive/bolt/BucketTestHiveTopology.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 148,
                            "endLine": 148,
                            "startColumn": 70,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/storm-hive/src/test/java/org/apache/storm/hive/bolt/BucketTestHiveTopology.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 148,
                            "endLine": 148,
                            "startColumn": 65,
                            "endColumn": 69
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/storm-hive/src/test/java/org/apache/storm/hive/bolt/BucketTestHiveTopology.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 148,
                            "endLine": 148,
                            "startColumn": 61,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/storm-hive/src/test/java/org/apache/storm/hive/bolt/BucketTestHiveTopology.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 148,
                            "endLine": 148,
                            "startColumn": 50,
                            "endColumn": 60
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.io.FileInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1)",
              "[java.io.FileInputStream](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "external/storm-hdfs/src/test/java/org/apache/storm/hdfs/bolt/HdfsFileTopology.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 79,
                  "endLine": 79,
                  "startColumn": 30,
                  "endColumn": 45
                }
              }
            }
          ],
          "fingerprints": {
            "0": "677731de0e1e2246b755fdc849bbb6ae31e1f002f8ea5e57cf82c02d265c35ad",
            "1": "8df8fa68.8d55b20a.85876e60.6c52ae28.025462d2.0d476878.55c6f621.6f114b23.8df8fa68.dd05ec30.481cbae6.de031890.a7b964d9.ce109560.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/storm-hdfs/src/test/java/org/apache/storm/hdfs/bolt/HdfsFileTopology.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 79,
                            "endLine": 79,
                            "startColumn": 46,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/storm-hdfs/src/test/java/org/apache/storm/hdfs/bolt/HdfsFileTopology.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 79,
                            "endLine": 79,
                            "startColumn": 46,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/storm-hdfs/src/test/java/org/apache/storm/hdfs/bolt/HdfsFileTopology.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 79,
                            "endLine": 79,
                            "startColumn": 30,
                            "endColumn": 45
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.io.FileInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1)",
              "[java.io.FileInputStream](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "external/storm-hdfs/src/test/java/org/apache/storm/hdfs/trident/TridentSequenceTopology.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 80,
                  "endLine": 80,
                  "startColumn": 30,
                  "endColumn": 45
                }
              }
            }
          ],
          "fingerprints": {
            "0": "887d0a055a7540acf07c1ed88df6562032d67231461d08b2391731ab78ba93a7",
            "1": "8df8fa68.8d55b20a.85876e60.6c52ae28.f6d438cc.0d476878.55c6f621.6f114b23.8df8fa68.a42b07b7.481cbae6.c48320d7.a7b964d9.730a5695.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/storm-hdfs/src/test/java/org/apache/storm/hdfs/trident/TridentSequenceTopology.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 46,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/storm-hdfs/src/test/java/org/apache/storm/hdfs/trident/TridentSequenceTopology.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 46,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/storm-hdfs/src/test/java/org/apache/storm/hdfs/trident/TridentSequenceTopology.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 30,
                            "endColumn": 45
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.io.FileInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1)",
              "[java.io.FileInputStream](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "external/storm-hdfs/src/test/java/org/apache/storm/hdfs/trident/TridentFileTopology.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 83,
                  "endLine": 83,
                  "startColumn": 30,
                  "endColumn": 45
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ba67334984078e6dc57ec4dd1a87bd9e0aefa82d70be53671a49a5cfce17594d",
            "1": "8df8fa68.8d55b20a.85876e60.6c52ae28.f6d438cc.0d476878.55c6f621.6f114b23.8df8fa68.7f413d6f.481cbae6.c48320d7.a7b964d9.730a5695.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/storm-hdfs/src/test/java/org/apache/storm/hdfs/trident/TridentFileTopology.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 46,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/storm-hdfs/src/test/java/org/apache/storm/hdfs/trident/TridentFileTopology.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 46,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/storm-hdfs/src/test/java/org/apache/storm/hdfs/trident/TridentFileTopology.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 30,
                            "endColumn": 45
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.io.FileInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1)",
              "[java.io.FileInputStream](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "external/storm-hdfs/src/test/java/org/apache/storm/hdfs/bolt/SequenceFileTopology.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 76,
                  "endLine": 76,
                  "startColumn": 30,
                  "endColumn": 45
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7e07cab69e30e508b7b1ecc69bf215e87e880c37307e5ae34f946ae5db9f40ff",
            "1": "8df8fa68.8d55b20a.85876e60.6c52ae28.025462d2.0d476878.55c6f621.6f114b23.8df8fa68.60187fcd.481cbae6.de031890.a7b964d9.ce109560.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/storm-hdfs/src/test/java/org/apache/storm/hdfs/bolt/SequenceFileTopology.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 76,
                            "endLine": 76,
                            "startColumn": 46,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/storm-hdfs/src/test/java/org/apache/storm/hdfs/bolt/SequenceFileTopology.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 76,
                            "endLine": 76,
                            "startColumn": 46,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/storm-hdfs/src/test/java/org/apache/storm/hdfs/bolt/SequenceFileTopology.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 76,
                            "endLine": 76,
                            "startColumn": 30,
                            "endColumn": 45
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/IndirectCommandInjection",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Unsanitized input from an environment path variable flows into java.lang.ProcessBuilder, where it is used to build a shell command. Forwarding command-line arguments or file paths from the local environment to a function that executes a system command can change the meaning of the command unexpectedly due to unescaped special characters, which may result in a Indirect Command Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to build a shell command. Forwarding command-line arguments or file paths from the local environment to a function that executes a system command can change the meaning of the command unexpectedly due to unescaped special characters, which may result in a Indirect Command Injection vulnerability.",
            "arguments": [
              "[an environment path variable](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24),(25),(26),(27),(28),(29),(30),(31),(32),(33),(34),(35),(36),(37),(38),(39),(40),(41)",
              "[java.lang.ProcessBuilder](42)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "storm-core/src/jvm/org/apache/storm/daemon/supervisor/BasicContainer.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 451,
                  "endLine": 451,
                  "startColumn": 9,
                  "endColumn": 38
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1fa3f9d1531b2591a869d2531f89d540411dd2a1bfcecd1baeaa5b8e30ec0f27",
            "1": "e1d7cd7c.f5291cea.a224ef38.8be3f9a9.ec540037.cc716412.4bf8d7f3.54d46e25.e1d7cd7c.24877279.1f78ea81.05a9455f.408180c7.52209ad8.d58e57a4.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/daemon/supervisor/BasicContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 356,
                            "endLine": 356,
                            "startColumn": 24,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/daemon/supervisor/BasicContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 356,
                            "endLine": 356,
                            "startColumn": 24,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/daemon/supervisor/BasicContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 356,
                            "endLine": 356,
                            "startColumn": 16,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/daemon/supervisor/BasicContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 360,
                            "endLine": 360,
                            "startColumn": 9,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/daemon/supervisor/BasicContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 361,
                            "endLine": 361,
                            "startColumn": 9,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/daemon/supervisor/BasicContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 363,
                            "endLine": 363,
                            "startColumn": 16,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/daemon/supervisor/BasicContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 383,
                            "endLine": 383,
                            "startColumn": 9,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/daemon/supervisor/BasicContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 384,
                            "endLine": 384,
                            "startColumn": 9,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/daemon/supervisor/BasicContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 385,
                            "endLine": 385,
                            "startColumn": 9,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/daemon/supervisor/BasicContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 386,
                            "endLine": 386,
                            "startColumn": 16,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/daemon/supervisor/BasicContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 480,
                            "endLine": 480,
                            "startColumn": 22,
                            "endColumn": 68
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/daemon/supervisor/BasicContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 484,
                            "endLine": 484,
                            "startColumn": 9,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/daemon/supervisor/BasicContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 485,
                            "endLine": 485,
                            "startColumn": 16,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/daemon/supervisor/BasicContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 569,
                            "endLine": 569,
                            "startColumn": 22,
                            "endColumn": 69
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/daemon/supervisor/BasicContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 575,
                            "endLine": 575,
                            "startColumn": 9,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/daemon/supervisor/BasicContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 576,
                            "endLine": 576,
                            "startColumn": 9,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/daemon/supervisor/BasicContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 577,
                            "endLine": 577,
                            "startColumn": 9,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/daemon/supervisor/BasicContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 578,
                            "endLine": 578,
                            "startColumn": 9,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/daemon/supervisor/BasicContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 581,
                            "endLine": 581,
                            "startColumn": 9,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/daemon/supervisor/BasicContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 582,
                            "endLine": 582,
                            "startColumn": 9,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/daemon/supervisor/BasicContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 583,
                            "endLine": 583,
                            "startColumn": 9,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/daemon/supervisor/BasicContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 584,
                            "endLine": 584,
                            "startColumn": 9,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/daemon/supervisor/BasicContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 585,
                            "endLine": 585,
                            "startColumn": 9,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/daemon/supervisor/BasicContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 586,
                            "endLine": 586,
                            "startColumn": 9,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 24,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/daemon/supervisor/BasicContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 589,
                            "endLine": 589,
                            "startColumn": 9,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 25,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/daemon/supervisor/BasicContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 590,
                            "endLine": 590,
                            "startColumn": 9,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 26,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/daemon/supervisor/BasicContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 591,
                            "endLine": 591,
                            "startColumn": 9,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 27,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/daemon/supervisor/BasicContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 592,
                            "endLine": 592,
                            "startColumn": 9,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 28,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/daemon/supervisor/BasicContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 593,
                            "endLine": 593,
                            "startColumn": 9,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 29,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/daemon/supervisor/BasicContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 594,
                            "endLine": 594,
                            "startColumn": 9,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 30,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/daemon/supervisor/BasicContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 595,
                            "endLine": 595,
                            "startColumn": 9,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 31,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/daemon/supervisor/BasicContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 596,
                            "endLine": 596,
                            "startColumn": 9,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 32,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/daemon/supervisor/BasicContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 597,
                            "endLine": 597,
                            "startColumn": 9,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 33,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/daemon/supervisor/BasicContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 598,
                            "endLine": 598,
                            "startColumn": 9,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 34,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/daemon/supervisor/BasicContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 599,
                            "endLine": 599,
                            "startColumn": 9,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 35,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/daemon/supervisor/BasicContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 601,
                            "endLine": 601,
                            "startColumn": 16,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 36,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/daemon/supervisor/BasicContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 618,
                            "endLine": 618,
                            "startColumn": 22,
                            "endColumn": 78
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 37,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/daemon/supervisor/BasicContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 632,
                            "endLine": 632,
                            "startColumn": 29,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 38,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/daemon/supervisor/BasicContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 449,
                            "endLine": 449,
                            "startColumn": 40,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 39,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/daemon/supervisor/BasicContainer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 451,
                            "endLine": 451,
                            "startColumn": 39,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 40,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/daemon/supervisor/SupervisorUtils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 275,
                            "endLine": 275,
                            "startColumn": 41,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 41,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/daemon/supervisor/SupervisorUtils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 281,
                            "endLine": 281,
                            "startColumn": 53,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 42,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/daemon/supervisor/SupervisorUtils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 281,
                            "endLine": 281,
                            "startColumn": 38,
                            "endColumn": 52
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "storm-core/src/jvm/org/apache/storm/security/auth/plain/PlainServerCallbackHandler.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 40,
                  "endLine": 40,
                  "startColumn": 9,
                  "endColumn": 23
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f8e89b2054b6037d48f1899345bff2b06f163c01f4738de3e1cb58f5e23d8072",
            "1": "45745edd.a9474267.a224ef38.d6ab05b5.6bba8d20.0d476878.aa534ded.fde7589e.45745edd.a9474267.a224ef38.de031890.f0e1baa5.ce109560.aa534ded.fde7589e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/security/auth/plain/PlainServerCallbackHandler.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 43,
                            "endColumn": 53
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 501,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Writing to an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Writing to](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "storm-core/src/jvm/org/apache/storm/testing/ForwardingMetricsConsumer.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 64,
                  "endLine": 64,
                  "startColumn": 17,
                  "endColumn": 39
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f5e4efec1bdac97b49bc53563831ba0475f19b4d3e68c9bbfc4b9a23b476d887",
            "1": "f9545bfc.c6f63401.33fa5dbe.e22980a8.32bd8b25.7fda7c5e.36de4586.54d46e25.f9545bfc.cd590ade.33fa5dbe.e22980a8.50314e63.7fda7c5e.9589bd2d.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/testing/ForwardingMetricsConsumer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 64,
                            "endLine": 64,
                            "startColumn": 17,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/testing/ForwardingMetricsConsumer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 64,
                            "endLine": 64,
                            "startColumn": 17,
                            "endColumn": 39
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/Deserialization/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into load, where it is used to deserialize an object. This may result in an Unsafe Deserialization vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to deserialize an object. This may result in an Unsafe Deserialization vulnerability.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4)",
              "[load](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "external/storm-hdfs/src/test/java/org/apache/storm/hdfs/bolt/HdfsFileTopology.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 80,
                  "endLine": 80,
                  "startColumn": 62,
                  "endColumn": 71
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9b0782958cfbef1b1639b950709f90da464bcb488c3a0b34b75473cea12358d0",
            "1": "010d9454.83dbfe52.481cbae6.c48320d7.c41fd899.89505584.55c6f621.54d46e25.e1d7cd7c.dd05ec30.1f78ea81.de031890.c41fd899.ce109560.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/storm-hdfs/src/test/java/org/apache/storm/hdfs/bolt/HdfsFileTopology.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 79,
                            "endLine": 79,
                            "startColumn": 46,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/storm-hdfs/src/test/java/org/apache/storm/hdfs/bolt/HdfsFileTopology.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 79,
                            "endLine": 79,
                            "startColumn": 46,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/storm-hdfs/src/test/java/org/apache/storm/hdfs/bolt/HdfsFileTopology.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 79,
                            "endLine": 79,
                            "startColumn": 30,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/storm-hdfs/src/test/java/org/apache/storm/hdfs/bolt/HdfsFileTopology.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 79,
                            "endLine": 79,
                            "startColumn": 21,
                            "endColumn": 54
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/storm-hdfs/src/test/java/org/apache/storm/hdfs/bolt/HdfsFileTopology.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 72,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/storm-hdfs/src/test/java/org/apache/storm/hdfs/bolt/HdfsFileTopology.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 62,
                            "endColumn": 71
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/Deserialization/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into load, where it is used to deserialize an object. This may result in an Unsafe Deserialization vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to deserialize an object. This may result in an Unsafe Deserialization vulnerability.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4)",
              "[load](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "external/storm-hdfs/src/test/java/org/apache/storm/hdfs/trident/TridentSequenceTopology.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 81,
                  "endLine": 81,
                  "startColumn": 62,
                  "endColumn": 71
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ebb1b5fbe7589e9479cbddf3d148ddb19da1b8c9aadc45aaa405509fed3335d9",
            "1": "010d9454.83dbfe52.481cbae6.c48320d7.c41fd899.89505584.55c6f621.54d46e25.e1d7cd7c.a42b07b7.1f78ea81.c48320d7.c41fd899.730a5695.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/storm-hdfs/src/test/java/org/apache/storm/hdfs/trident/TridentSequenceTopology.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 46,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/storm-hdfs/src/test/java/org/apache/storm/hdfs/trident/TridentSequenceTopology.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 46,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/storm-hdfs/src/test/java/org/apache/storm/hdfs/trident/TridentSequenceTopology.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 30,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/storm-hdfs/src/test/java/org/apache/storm/hdfs/trident/TridentSequenceTopology.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 21,
                            "endColumn": 54
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/storm-hdfs/src/test/java/org/apache/storm/hdfs/trident/TridentSequenceTopology.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 81,
                            "endLine": 81,
                            "startColumn": 72,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/storm-hdfs/src/test/java/org/apache/storm/hdfs/trident/TridentSequenceTopology.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 81,
                            "endLine": 81,
                            "startColumn": 62,
                            "endColumn": 71
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/Deserialization/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into load, where it is used to deserialize an object. This may result in an Unsafe Deserialization vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to deserialize an object. This may result in an Unsafe Deserialization vulnerability.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4)",
              "[load](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "external/storm-hdfs/src/test/java/org/apache/storm/hdfs/trident/TridentFileTopology.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 84,
                  "endLine": 84,
                  "startColumn": 62,
                  "endColumn": 71
                }
              }
            }
          ],
          "fingerprints": {
            "0": "67b8576facf5de04560264882c7f6958ede03bf5cae103a5a25f2178583959e1",
            "1": "010d9454.83dbfe52.481cbae6.c48320d7.c41fd899.89505584.55c6f621.54d46e25.e1d7cd7c.7f413d6f.1f78ea81.c48320d7.c41fd899.730a5695.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/storm-hdfs/src/test/java/org/apache/storm/hdfs/trident/TridentFileTopology.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 46,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/storm-hdfs/src/test/java/org/apache/storm/hdfs/trident/TridentFileTopology.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 46,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/storm-hdfs/src/test/java/org/apache/storm/hdfs/trident/TridentFileTopology.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 30,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/storm-hdfs/src/test/java/org/apache/storm/hdfs/trident/TridentFileTopology.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 21,
                            "endColumn": 54
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/storm-hdfs/src/test/java/org/apache/storm/hdfs/trident/TridentFileTopology.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 84,
                            "endLine": 84,
                            "startColumn": 72,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/storm-hdfs/src/test/java/org/apache/storm/hdfs/trident/TridentFileTopology.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 84,
                            "endLine": 84,
                            "startColumn": 62,
                            "endColumn": 71
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/Deserialization/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into load, where it is used to deserialize an object. This may result in an Unsafe Deserialization vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to deserialize an object. This may result in an Unsafe Deserialization vulnerability.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4)",
              "[load](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "external/storm-hdfs/src/test/java/org/apache/storm/hdfs/bolt/SequenceFileTopology.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 77,
                  "endLine": 77,
                  "startColumn": 62,
                  "endColumn": 71
                }
              }
            }
          ],
          "fingerprints": {
            "0": "97754e60d1a44311318e115773167f48ae49dec7f3ac6c88c918985f631584cb",
            "1": "010d9454.83dbfe52.481cbae6.c48320d7.c41fd899.89505584.55c6f621.54d46e25.e1d7cd7c.60187fcd.1f78ea81.de031890.c41fd899.ce109560.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/storm-hdfs/src/test/java/org/apache/storm/hdfs/bolt/SequenceFileTopology.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 76,
                            "endLine": 76,
                            "startColumn": 46,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/storm-hdfs/src/test/java/org/apache/storm/hdfs/bolt/SequenceFileTopology.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 76,
                            "endLine": 76,
                            "startColumn": 46,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/storm-hdfs/src/test/java/org/apache/storm/hdfs/bolt/SequenceFileTopology.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 76,
                            "endLine": 76,
                            "startColumn": 30,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/storm-hdfs/src/test/java/org/apache/storm/hdfs/bolt/SequenceFileTopology.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 76,
                            "endLine": 76,
                            "startColumn": 21,
                            "endColumn": 54
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/storm-hdfs/src/test/java/org/apache/storm/hdfs/bolt/SequenceFileTopology.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 77,
                            "endLine": 77,
                            "startColumn": 72,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/storm-hdfs/src/test/java/org/apache/storm/hdfs/bolt/SequenceFileTopology.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 77,
                            "endLine": 77,
                            "startColumn": 62,
                            "endColumn": 71
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "python/PT",
          "ruleIndex": 5,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14)",
              "[open](15)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dev-tools/travis/print-errors-from-test-reports.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 43,
                  "endLine": 43,
                  "startColumn": 13,
                  "endColumn": 17
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2b749d61f35e6b2623d3ca28b678a7941c992fe65a36b575c8faaff790da8411",
            "1": "2e8ddaeb.4915eeaa.79e62dc9.902653ef.f3eda546.ba14daf2.682a1833.a4830b9a.b848885f.348ddf12.184a673a.371b98ea.f3eda546.3b0605d1.a2237efa.f46ed94e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dev-tools/travis/print-errors-from-test-reports.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 10,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dev-tools/travis/print-errors-from-test-reports.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 10,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dev-tools/travis/print-errors-from-test-reports.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 63,
                            "endLine": 63,
                            "startColumn": 10,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dev-tools/travis/print-errors-from-test-reports.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 64,
                            "endLine": 64,
                            "startColumn": 35,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dev-tools/travis/print-errors-from-test-reports.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 64,
                            "endLine": 64,
                            "startColumn": 35,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dev-tools/travis/print-errors-from-test-reports.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 64,
                            "endLine": 64,
                            "startColumn": 24,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dev-tools/travis/print-errors-from-test-reports.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 64,
                            "endLine": 64,
                            "startColumn": 9,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dev-tools/travis/print-errors-from-test-reports.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 65,
                            "endLine": 65,
                            "startColumn": 37,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dev-tools/travis/print-errors-from-test-reports.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 65,
                            "endLine": 65,
                            "startColumn": 21,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dev-tools/travis/print-errors-from-test-reports.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 65,
                            "endLine": 65,
                            "startColumn": 9,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dev-tools/travis/print-errors-from-test-reports.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 50,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dev-tools/travis/print-errors-from-test-reports.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 42,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dev-tools/travis/print-errors-from-test-reports.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 20,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dev-tools/travis/print-errors-from-test-reports.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 34,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dev-tools/travis/print-errors-from-test-reports.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 18,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dev-tools/travis/print-errors-from-test-reports.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 13,
                            "endColumn": 17
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 551,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "python/PT",
          "ruleIndex": 5,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14)",
              "[open](15)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dev-tools/travis/print-errors-from-test-reports.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 68,
                  "endLine": 68,
                  "startColumn": 13,
                  "endColumn": 49
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a27dfb7050af72e3abfe40f29331c60a4ff7bd1eccfd3435cf24385c802c4c13",
            "1": "800eb1b9.2b423e74.184a673a.139c59a8.8a207be7.ba14daf2.698a3c7f.f355b44c.b848885f.348ddf12.184a673a.371b98ea.8a207be7.3b0605d1.a2237efa.f46ed94e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dev-tools/travis/print-errors-from-test-reports.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 10,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dev-tools/travis/print-errors-from-test-reports.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 10,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dev-tools/travis/print-errors-from-test-reports.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 63,
                            "endLine": 63,
                            "startColumn": 10,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dev-tools/travis/print-errors-from-test-reports.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 64,
                            "endLine": 64,
                            "startColumn": 35,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dev-tools/travis/print-errors-from-test-reports.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 64,
                            "endLine": 64,
                            "startColumn": 35,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dev-tools/travis/print-errors-from-test-reports.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 64,
                            "endLine": 64,
                            "startColumn": 24,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dev-tools/travis/print-errors-from-test-reports.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 64,
                            "endLine": 64,
                            "startColumn": 9,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dev-tools/travis/print-errors-from-test-reports.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 65,
                            "endLine": 65,
                            "startColumn": 37,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dev-tools/travis/print-errors-from-test-reports.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 65,
                            "endLine": 65,
                            "startColumn": 21,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dev-tools/travis/print-errors-from-test-reports.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 65,
                            "endLine": 65,
                            "startColumn": 9,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dev-tools/travis/print-errors-from-test-reports.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 50,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dev-tools/travis/print-errors-from-test-reports.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 42,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dev-tools/travis/print-errors-from-test-reports.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 20,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dev-tools/travis/print-errors-from-test-reports.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 34,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dev-tools/travis/print-errors-from-test-reports.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 18,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dev-tools/travis/print-errors-from-test-reports.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 13,
                            "endColumn": 17
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 551,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "python/PT",
          "ruleIndex": 5,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1)",
              "[open](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dev-tools/travis/ratprint.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 19,
                  "endLine": 19,
                  "startColumn": 6,
                  "endColumn": 10
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7b2ac6cf565ce38ef05a1db576f1875d461a7490b3cf46a3b40dae9af6ad35b3",
            "1": "40dbe211.348ddf12.187bf175.139c59a8.f3eda546.ba14daf2.0873598c.441625c1.a6b41d6e.348ddf12.187bf175.139c59a8.f3eda546.3b0605d1.a2237efa.f46ed94e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dev-tools/travis/ratprint.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 19,
                            "endLine": 19,
                            "startColumn": 12,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dev-tools/travis/ratprint.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 19,
                            "endLine": 19,
                            "startColumn": 12,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dev-tools/travis/ratprint.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 19,
                            "endLine": 19,
                            "startColumn": 6,
                            "endColumn": 10
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 501,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "python/PT",
          "ruleIndex": 5,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4)",
              "[open](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dev-tools/travis/save-logs.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 21,
                  "startColumn": 11,
                  "endColumn": 15
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fd174e23b7c258a4d96560f83c6194daeb0f4a9f5521b4652dbe0b7ddf90384b",
            "1": "863ffd43.4915eeaa.b19066ef.ef463c52.f3eda546.addfbd48.a2237efa.f46ed94e.863ffd43.348ddf12.b19066ef.139c59a8.4608c58f.3b0605d1.a2237efa.f46ed94e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dev-tools/travis/save-logs.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 19,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dev-tools/travis/save-logs.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 19,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dev-tools/travis/save-logs.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 19,
                            "endLine": 19,
                            "startColumn": 10,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dev-tools/travis/save-logs.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 20,
                            "endLine": 20,
                            "startColumn": 30,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dev-tools/travis/save-logs.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 21,
                            "endLine": 21,
                            "startColumn": 16,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dev-tools/travis/save-logs.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 21,
                            "endLine": 21,
                            "startColumn": 11,
                            "endColumn": 15
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 551,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "python/CommandInjection",
          "ruleIndex": 6,
          "level": "error",
          "message": {
            "text": "Unsanitized input from a command line argument flows into subprocess.Popen, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4)",
              "[subprocess.Popen](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dev-tools/travis/save-logs.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 23,
                  "endLine": 23,
                  "startColumn": 15,
                  "endColumn": 31
                }
              }
            }
          ],
          "fingerprints": {
            "0": "769f6e7d30b337998469709b81893dbcd2330761f45bbaaa9c8bf844a2ee01dc",
            "1": "863ffd43.de616afe.b589c4a4.139c59a8.5978d819.ba14daf2.a2237efa.f46ed94e.863ffd43.f16887a3.b19066ef.599642fa.8a207be7.3b0605d1.ee741439.f46ed94e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dev-tools/travis/save-logs.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 32,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dev-tools/travis/save-logs.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 32,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dev-tools/travis/save-logs.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 19,
                            "endLine": 19,
                            "startColumn": 16,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dev-tools/travis/save-logs.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 20,
                            "endLine": 20,
                            "startColumn": 11,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dev-tools/travis/save-logs.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 23,
                            "endLine": 23,
                            "startColumn": 32,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dev-tools/travis/save-logs.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 23,
                            "endLine": 23,
                            "startColumn": 15,
                            "endColumn": 31
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 801,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "python/CommandInjection",
          "ruleIndex": 6,
          "level": "error",
          "message": {
            "text": "Unsanitized input from a command line argument flows into subprocess.check_output, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24),(25),(26),(27),(28),(29),(30),(31),(32),(33),(34),(35),(36),(37),(38),(39),(40),(41),(42),(43),(44),(45),(46),(47),(48)",
              "[subprocess.check_output](49)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bin/storm.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 217,
                  "endLine": 217,
                  "startColumn": 19,
                  "endColumn": 35
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c4c7c3c6782d76ffd72acbef3ab5dbc85ccd707eceb1864ee40a824bd2a74fde",
            "1": "80098404.1f6ee07a.79e62dc9.e0c66816.4ccd3f08.ba14daf2.081ac3f4.8794408a.8f570445.04ad2656.de5220dc.ad0e0ff8.439a7d26.fe6eee22.e82946ee.f67dfb26"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bin/storm.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 759,
                            "endLine": 759,
                            "startColumn": 43,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bin/storm.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 759,
                            "endLine": 759,
                            "startColumn": 43,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bin/storm.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 759,
                            "endLine": 759,
                            "startColumn": 43,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bin/storm.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 736,
                            "endLine": 736,
                            "startColumn": 23,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bin/storm.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 737,
                            "endLine": 737,
                            "startColumn": 10,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bin/storm.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 737,
                            "endLine": 737,
                            "startColumn": 10,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bin/storm.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 737,
                            "endLine": 737,
                            "startColumn": 3,
                            "endColumn": 7
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bin/storm.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 738,
                            "endLine": 738,
                            "startColumn": 3,
                            "endColumn": 7
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bin/storm.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 742,
                            "endLine": 742,
                            "startColumn": 13,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bin/storm.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 743,
                            "endLine": 743,
                            "startColumn": 13,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bin/storm.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 748,
                            "endLine": 748,
                            "startColumn": 18,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bin/storm.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 748,
                            "endLine": 748,
                            "startColumn": 18,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bin/storm.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 748,
                            "endLine": 748,
                            "startColumn": 7,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bin/storm.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 140,
                            "endLine": 140,
                            "startColumn": 72,
                            "endColumn": 80
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bin/storm.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 140,
                            "endLine": 140,
                            "startColumn": 49,
                            "endColumn": 80
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bin/storm.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 139,
                            "endLine": 142,
                            "startColumn": 15,
                            "endColumn": 6
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bin/storm.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 139,
                            "endLine": 139,
                            "startColumn": 5,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bin/storm.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 143,
                            "endLine": 143,
                            "startColumn": 19,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bin/storm.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 143,
                            "endLine": 143,
                            "startColumn": 9,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bin/storm.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 143,
                            "endLine": 143,
                            "startColumn": 5,
                            "endColumn": 6
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bin/storm.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 144,
                            "endLine": 144,
                            "startColumn": 22,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bin/storm.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 144,
                            "endLine": 144,
                            "startColumn": 22,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bin/storm.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 144,
                            "endLine": 144,
                            "startColumn": 5,
                            "endColumn": 11
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bin/storm.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 146,
                            "endLine": 146,
                            "startColumn": 23,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 24,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bin/storm.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 147,
                            "endLine": 147,
                            "startColumn": 18,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 25,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bin/storm.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 147,
                            "endLine": 147,
                            "startColumn": 18,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 26,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bin/storm.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 147,
                            "endLine": 147,
                            "startColumn": 9,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 27,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bin/storm.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 148,
                            "endLine": 148,
                            "startColumn": 13,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 28,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bin/storm.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 148,
                            "endLine": 148,
                            "startColumn": 13,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 29,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bin/storm.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 149,
                            "endLine": 149,
                            "startColumn": 9,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 30,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bin/storm.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 150,
                            "endLine": 150,
                            "startColumn": 18,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 31,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bin/storm.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 150,
                            "endLine": 150,
                            "startColumn": 18,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 32,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bin/storm.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 150,
                            "endLine": 150,
                            "startColumn": 9,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 33,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bin/storm.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 151,
                            "endLine": 151,
                            "startColumn": 12,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 34,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bin/storm.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 152,
                            "endLine": 152,
                            "startColumn": 29,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 35,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bin/storm.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 152,
                            "endLine": 152,
                            "startColumn": 29,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 36,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bin/storm.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 152,
                            "endLine": 152,
                            "startColumn": 20,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 37,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bin/storm.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 153,
                            "endLine": 153,
                            "startColumn": 12,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 38,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bin/storm.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 196,
                            "endLine": 196,
                            "startColumn": 5,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 39,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bin/storm.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 197,
                            "endLine": 197,
                            "startColumn": 8,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 40,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bin/storm.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 197,
                            "endLine": 197,
                            "startColumn": 33,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 41,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bin/storm.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 204,
                            "endLine": 204,
                            "startColumn": 30,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 42,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bin/storm.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 204,
                            "endLine": 204,
                            "startColumn": 9,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 43,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bin/storm.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 199,
                            "endLine": 208,
                            "startColumn": 16,
                            "endColumn": 6
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 44,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bin/storm.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 199,
                            "endLine": 208,
                            "startColumn": 16,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 45,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bin/storm.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 199,
                            "endLine": 199,
                            "startColumn": 16,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 46,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bin/storm.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 199,
                            "endLine": 199,
                            "startColumn": 5,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 47,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bin/storm.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 209,
                            "endLine": 209,
                            "startColumn": 34,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 48,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bin/storm.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 217,
                            "endLine": 217,
                            "startColumn": 36,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 49,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "bin/storm.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 217,
                            "endLine": 217,
                            "startColumn": 19,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 801,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureCipher",
          "ruleIndex": 7,
          "level": "error",
          "message": {
            "text": "The Blowfish cipher used in javax.crypto.KeyGenerator.getInstance (with algorithm string \"Blowfish\") is insecure. Consider using AES.",
            "markdown": "The Blowfish cipher used in {0} is insecure. Consider using AES.",
            "arguments": [
              "[javax.crypto.KeyGenerator.getInstance (with algorithm string \"Blowfish\")](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "storm-core/src/jvm/org/apache/storm/security/serialization/BlowfishTupleSerializer.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82,
                  "endLine": 82,
                  "startColumn": 33,
                  "endColumn": 57
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f78d53be182b438683fae8c93797b7a1a604ccc64d107cd5b907460858491448",
            "1": "19689298.1cbd3ff4.2b5643ec.ede9cf8e.d7246206.a546c44d.be04624c.54d46e25.19689298.1cbd3ff4.2b5643ec.ede9cf8e.d7246206.a546c44d.df7e59ba.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/security/serialization/BlowfishTupleSerializer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 82,
                            "endLine": 82,
                            "startColumn": 33,
                            "endColumn": 57
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 751,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureHash",
          "ruleIndex": 8,
          "level": "warning",
          "message": {
            "text": "The MD5 hash (used in java.security.MessageDigest.getInstance) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The {0} hash (used in {1}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[MD5](0)",
              "[java.security.MessageDigest.getInstance](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "storm-buildtools/storm-maven-plugins/src/main/java/org/apache/storm/maven/plugin/versioninfo/VersionInfoMojo.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 248,
                  "endLine": 248,
                  "startColumn": 25,
                  "endColumn": 50
                }
              }
            }
          ],
          "fingerprints": {
            "0": "21fa5575a03a0ad6ff03793f3ad6e45eba5d92892c0e4d38d483ab2f8595c714",
            "1": "19689298.da263459.06373764.5e6ab657.c45e4de4.c80ba7fb.2fbf4a5c.54d46e25.19689298.da263459.06373764.5e6ab657.c45e4de4.c80ba7fb.2fbf4a5c.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-buildtools/storm-maven-plugins/src/main/java/org/apache/storm/maven/plugin/versioninfo/VersionInfoMojo.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 248,
                            "endLine": 248,
                            "startColumn": 51,
                            "endColumn": 56
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-buildtools/storm-maven-plugins/src/main/java/org/apache/storm/maven/plugin/versioninfo/VersionInfoMojo.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 248,
                            "endLine": 248,
                            "startColumn": 25,
                            "endColumn": 50
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 551,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/PT",
          "ruleIndex": 9,
          "level": "error",
          "message": {
            "text": "Unsanitized input from a zip file flows into java.io.FileOutputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "arguments": [
              "[a zip file](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[java.io.FileOutputStream](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 874,
                  "endLine": 874,
                  "startColumn": 48,
                  "endColumn": 64
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0226815161450aff4a40d8c73eb31018441845998cc80f1cc20ea3538afe75bd",
            "1": "19689298.83dbfe52.44f4c540.f9bdd8eb.75248ddf.1ca6e5b4.a204df5d.afad7786.f9545bfc.2329d1ab.bb993ef0.9998adc9.408180c7.0d476878.a204df5d.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 872,
                            "endLine": 872,
                            "startColumn": 53,
                            "endColumn": 66
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 872,
                            "endLine": 872,
                            "startColumn": 53,
                            "endColumn": 66
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 872,
                            "endLine": 872,
                            "startColumn": 41,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 872,
                            "endLine": 872,
                            "startColumn": 30,
                            "endColumn": 69
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 873,
                            "endLine": 873,
                            "startColumn": 41,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 874,
                            "endLine": 874,
                            "startColumn": 65,
                            "endColumn": 69
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 874,
                            "endLine": 874,
                            "startColumn": 48,
                            "endColumn": 64
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 803,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/PT",
          "ruleIndex": 9,
          "level": "error",
          "message": {
            "text": "Unsanitized input from a zip file flows into java.io.FileOutputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "arguments": [
              "[a zip file](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[java.io.FileOutputStream](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1026,
                  "endLine": 1026,
                  "startColumn": 21,
                  "endColumn": 37
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d5bac662b058db82d49f38a6e4c24d3878224301c15d65269655839f9548efc0",
            "1": "19689298.3ddf9eb6.8828b72d.6c52ae28.66a39cfd.d7c8947b.a204df5d.f82433aa.19689298.3ddf9eb6.33fa5dbe.9998adc9.dd06b926.7fda7c5e.a204df5d.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1016,
                            "endLine": 1016,
                            "startColumn": 47,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1016,
                            "endLine": 1016,
                            "startColumn": 47,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1016,
                            "endLine": 1016,
                            "startColumn": 31,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1016,
                            "endLine": 1016,
                            "startColumn": 14,
                            "endColumn": 63
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1017,
                            "endLine": 1017,
                            "startColumn": 14,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1026,
                            "endLine": 1026,
                            "startColumn": 38,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1026,
                            "endLine": 1026,
                            "startColumn": 21,
                            "endColumn": 37
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 803,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/PT",
          "ruleIndex": 9,
          "level": "error",
          "message": {
            "text": "Unsanitized input from a zip file flows into java.io.FileOutputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "arguments": [
              "[a zip file](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[java.io.FileOutputStream](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1398,
                  "endLine": 1398,
                  "startColumn": 48,
                  "endColumn": 64
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e654e4e429758205ee6e8008825a1527baaa4cf5487a342bd204316bd4a05d51",
            "1": "19689298.83dbfe52.8828b72d.f9bdd8eb.75248ddf.41d8b89f.a204df5d.f82433aa.f9545bfc.6d9d0001.bb993ef0.9998adc9.dd06b926.41d8b89f.a204df5d.0dd46364"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1391,
                            "endLine": 1391,
                            "startColumn": 56,
                            "endColumn": 69
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1391,
                            "endLine": 1391,
                            "startColumn": 56,
                            "endColumn": 69
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1391,
                            "endLine": 1391,
                            "startColumn": 41,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1391,
                            "endLine": 1391,
                            "startColumn": 30,
                            "endColumn": 72
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1392,
                            "endLine": 1392,
                            "startColumn": 30,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1398,
                            "endLine": 1398,
                            "startColumn": 65,
                            "endColumn": 69
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1398,
                            "endLine": 1398,
                            "startColumn": 48,
                            "endColumn": 64
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 803,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/PT",
          "ruleIndex": 9,
          "level": "error",
          "message": {
            "text": "Unsanitized input from a zip file flows into java.io.FileOutputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "arguments": [
              "[a zip file](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[java.io.FileOutputStream](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1894,
                  "endLine": 1894,
                  "startColumn": 53,
                  "endColumn": 69
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e7364063ab63272067a455f73842a0c33236261736885bee89027fa06ecdf01a",
            "1": "19689298.ab7146a5.17924cf9.6c52ae28.4483622f.90d4bdbd.a204df5d.f82433aa.f9545bfc.2329d1ab.17924cf9.9998adc9.dd06b926.90d4bdbd.a204df5d.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1892,
                            "endLine": 1892,
                            "startColumn": 52,
                            "endColumn": 65
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1892,
                            "endLine": 1892,
                            "startColumn": 52,
                            "endColumn": 65
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1892,
                            "endLine": 1892,
                            "startColumn": 38,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1892,
                            "endLine": 1892,
                            "startColumn": 26,
                            "endColumn": 68
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1893,
                            "endLine": 1893,
                            "startColumn": 21,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1894,
                            "endLine": 1894,
                            "startColumn": 70,
                            "endColumn": 75
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1894,
                            "endLine": 1894,
                            "startColumn": 53,
                            "endColumn": 69
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 803,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/PT",
          "ruleIndex": 9,
          "level": "error",
          "message": {
            "text": "Unsanitized input from a zip file flows into mkdirs, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to manipulate arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to manipulate arbitrary files.",
            "arguments": [
              "[a zip file](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[mkdirs](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 917,
                  "endLine": 917,
                  "startColumn": 14,
                  "endColumn": 24
                }
              }
            }
          ],
          "fingerprints": {
            "0": "026532a362b877544b7d43bee15735db25903be99418f35e151f4ba79afb9a81",
            "1": "daf8aa0f.1f68911f.3e6d0dfd.9998adc9.dd06b926.0d476878.a204df5d.f82433aa.19689298.2329d1ab.bb993ef0.9998adc9.408180c7.0d476878.a204df5d.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 872,
                            "endLine": 872,
                            "startColumn": 53,
                            "endColumn": 66
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 872,
                            "endLine": 872,
                            "startColumn": 53,
                            "endColumn": 66
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 872,
                            "endLine": 872,
                            "startColumn": 41,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 872,
                            "endLine": 872,
                            "startColumn": 30,
                            "endColumn": 69
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 873,
                            "endLine": 873,
                            "startColumn": 41,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 873,
                            "endLine": 873,
                            "startColumn": 41,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 916,
                            "endLine": 916,
                            "startColumn": 41,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 917,
                            "endLine": 917,
                            "startColumn": 14,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 917,
                            "endLine": 917,
                            "startColumn": 14,
                            "endColumn": 24
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 803,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/PT",
          "ruleIndex": 9,
          "level": "error",
          "message": {
            "text": "Unsanitized input from a zip file flows into mkdirs, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to manipulate arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to manipulate arbitrary files.",
            "arguments": [
              "[a zip file](0)",
              "[flows](1),(2),(3),(4)",
              "[mkdirs](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1007,
                  "endLine": 1007,
                  "startColumn": 18,
                  "endColumn": 31
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ef7699e928ebac59f4dca3aed0b282d4da864907a87cdde411454542a97af956",
            "1": "19689298.0100a46c.8828b72d.9998adc9.dd06b926.41d8b89f.e865951e.54d46e25.19689298.2329d1ab.33fa5dbe.9998adc9.dd06b926.7fda7c5e.5b1ccecb.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1006,
                            "endLine": 1006,
                            "startColumn": 47,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1006,
                            "endLine": 1006,
                            "startColumn": 47,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1006,
                            "endLine": 1006,
                            "startColumn": 31,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1006,
                            "endLine": 1006,
                            "startColumn": 18,
                            "endColumn": 63
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1007,
                            "endLine": 1007,
                            "startColumn": 18,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1007,
                            "endLine": 1007,
                            "startColumn": 18,
                            "endColumn": 31
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 803,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/PT",
          "ruleIndex": 9,
          "level": "error",
          "message": {
            "text": "Unsanitized input from a zip file flows into mkdirs, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to manipulate arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to manipulate arbitrary files.",
            "arguments": [
              "[a zip file](0)",
              "[flows](1),(2),(3),(4),(5),(6)",
              "[mkdirs](7)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1018,
                  "endLine": 1018,
                  "startColumn": 18,
                  "endColumn": 51
                }
              }
            }
          ],
          "fingerprints": {
            "0": "338a8fa2d25042c057ef7a51de23a4bb6721118b2950ae131ec45b00eefef8d0",
            "1": "daf8aa0f.3ddf9eb6.8828b72d.9998adc9.dd06b926.d7c8947b.a204df5d.f82433aa.19689298.3ddf9eb6.33fa5dbe.9998adc9.dd06b926.7fda7c5e.a204df5d.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1016,
                            "endLine": 1016,
                            "startColumn": 47,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1016,
                            "endLine": 1016,
                            "startColumn": 47,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1016,
                            "endLine": 1016,
                            "startColumn": 31,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1016,
                            "endLine": 1016,
                            "startColumn": 14,
                            "endColumn": 63
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1017,
                            "endLine": 1017,
                            "startColumn": 14,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1018,
                            "endLine": 1018,
                            "startColumn": 18,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1018,
                            "endLine": 1018,
                            "startColumn": 18,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1018,
                            "endLine": 1018,
                            "startColumn": 18,
                            "endColumn": 51
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 803,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/PT",
          "ruleIndex": 9,
          "level": "error",
          "message": {
            "text": "Unsanitized input from a zip file flows into mkdirs, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to manipulate arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to manipulate arbitrary files.",
            "arguments": [
              "[a zip file](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[mkdirs](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1392,
                  "endLine": 1392,
                  "startColumn": 30,
                  "endColumn": 57
                }
              }
            }
          ],
          "fingerprints": {
            "0": "705726c06ce8047df5a436f83768c0b9917616f509b45f6da7ba447c6e11e576",
            "1": "19689298.c8c8034f.8828b72d.9998adc9.dd06b926.41d8b89f.a204df5d.f82433aa.19689298.6d9d0001.bb993ef0.9998adc9.dd06b926.41d8b89f.a204df5d.0dd46364"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1391,
                            "endLine": 1391,
                            "startColumn": 56,
                            "endColumn": 69
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1391,
                            "endLine": 1391,
                            "startColumn": 56,
                            "endColumn": 69
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1391,
                            "endLine": 1391,
                            "startColumn": 41,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1391,
                            "endLine": 1391,
                            "startColumn": 30,
                            "endColumn": 72
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1392,
                            "endLine": 1392,
                            "startColumn": 30,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1392,
                            "endLine": 1392,
                            "startColumn": 30,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1392,
                            "endLine": 1392,
                            "startColumn": 30,
                            "endColumn": 57
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 803,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/PT",
          "ruleIndex": 9,
          "level": "error",
          "message": {
            "text": "Unsanitized input from a zip file flows into mkdirs, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to manipulate arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to manipulate arbitrary files.",
            "arguments": [
              "[a zip file](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[mkdirs](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1893,
                  "endLine": 1893,
                  "startColumn": 21,
                  "endColumn": 49
                }
              }
            }
          ],
          "fingerprints": {
            "0": "893a5b258eacd32024d1f912d0702e9cb5aaa505d60b1dd07f639079a2ce0d3d",
            "1": "19689298.ab7146a5.17924cf9.e22980a8.f1d9f854.90d4bdbd.be04624c.54d46e25.19689298.2329d1ab.17924cf9.9998adc9.dd06b926.90d4bdbd.a204df5d.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1892,
                            "endLine": 1892,
                            "startColumn": 52,
                            "endColumn": 65
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1892,
                            "endLine": 1892,
                            "startColumn": 52,
                            "endColumn": 65
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1892,
                            "endLine": 1892,
                            "startColumn": 38,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1892,
                            "endLine": 1892,
                            "startColumn": 26,
                            "endColumn": 68
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1893,
                            "endLine": 1893,
                            "startColumn": 21,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1893,
                            "endLine": 1893,
                            "startColumn": 21,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1893,
                            "endLine": 1893,
                            "startColumn": 21,
                            "endColumn": 49
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 803,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/PT",
          "ruleIndex": 9,
          "level": "error",
          "message": {
            "text": "Unsanitized input from a zip file flows into exists, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to bypass the logic of the application in the conditional expression.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to bypass the logic of the application in the {3}.",
            "arguments": [
              "[a zip file](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[exists](6)",
              "[conditional expression](7)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1017,
                  "endLine": 1017,
                  "startColumn": 14,
                  "endColumn": 47
                }
              }
            }
          ],
          "fingerprints": {
            "0": "04ff50570debc861c9edea9d18c324cfaab679fdf9ab48ccf78e82a5101fd11a",
            "1": "19689298.3ddf9eb6.e9f7f631.9998adc9.dd06b926.d7c8947b.a204df5d.a1df1a3b.19689298.3ddf9eb6.33fa5dbe.9998adc9.dd06b926.7fda7c5e.a204df5d.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1016,
                            "endLine": 1016,
                            "startColumn": 47,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1016,
                            "endLine": 1016,
                            "startColumn": 47,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1016,
                            "endLine": 1016,
                            "startColumn": 31,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1016,
                            "endLine": 1016,
                            "startColumn": 14,
                            "endColumn": 63
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1017,
                            "endLine": 1017,
                            "startColumn": 14,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1017,
                            "endLine": 1017,
                            "startColumn": 14,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1017,
                            "endLine": 1017,
                            "startColumn": 14,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1017,
                            "endLine": 1017,
                            "startColumn": 9,
                            "endColumn": 49
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 803,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/PT",
          "ruleIndex": 9,
          "level": "error",
          "message": {
            "text": "Unsanitized input from a zip file flows into java.io.BufferedOutputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "arguments": [
              "[a zip file](0)",
              "[flows](1),(2),(3),(4),(5),(6)",
              "[java.io.BufferedOutputStream](7)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1025,
                  "endLine": 1025,
                  "startColumn": 49,
                  "endColumn": 69
                }
              }
            }
          ],
          "fingerprints": {
            "0": "803abea81bede655488eaf247bbcb21bfb90f42a031091bb55ed4913aeee613d",
            "1": "ac4e7c8b.3ddf9eb6.315b5ec8.6c52ae28.6bacdef5.d7c8947b.df7e59ba.65e99aa4.19689298.3ddf9eb6.33fa5dbe.9998adc9.dd06b926.7fda7c5e.a204df5d.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1016,
                            "endLine": 1016,
                            "startColumn": 47,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1016,
                            "endLine": 1016,
                            "startColumn": 47,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1016,
                            "endLine": 1016,
                            "startColumn": 31,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1016,
                            "endLine": 1016,
                            "startColumn": 14,
                            "endColumn": 63
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1017,
                            "endLine": 1017,
                            "startColumn": 14,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1026,
                            "endLine": 1026,
                            "startColumn": 21,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1026,
                            "endLine": 1026,
                            "startColumn": 17,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/utils/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1025,
                            "endLine": 1025,
                            "startColumn": 49,
                            "endColumn": 69
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 803,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/PT",
          "ruleIndex": 9,
          "level": "error",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.io.FileInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1)",
              "[java.io.FileInputStream](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "external/flux/flux-examples/src/main/java/org/apache/storm/flux/examples/WordCountClient.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 47,
                  "endLine": 47,
                  "startColumn": 28,
                  "endColumn": 43
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1b2ad6449badfe9e1423cbe2a594e56b9e29474c7969bcfc231d976f1f427a60",
            "1": "682e2f2f.ff76257e.1b9a1d8e.6c52ae28.f6d438cc.117e971f.55c6f621.6f114b23.8df8fa68.7f413d6f.622565c7.e22980a8.a7b964d9.730a5695.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/flux/flux-examples/src/main/java/org/apache/storm/flux/examples/WordCountClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 44,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/flux/flux-examples/src/main/java/org/apache/storm/flux/examples/WordCountClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 44,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/flux/flux-examples/src/main/java/org/apache/storm/flux/examples/WordCountClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 28,
                            "endColumn": 43
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 803,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/PT",
          "ruleIndex": 9,
          "level": "error",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.io.FileInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1)",
              "[java.io.FileInputStream](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "storm-core/src/jvm/org/apache/storm/daemon/ClientJarTransformerRunner.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 35,
                  "endLine": 35,
                  "startColumn": 30,
                  "endColumn": 45
                }
              }
            }
          ],
          "fingerprints": {
            "0": "35321c6a84b5977446190daa4bfe6f35254bf4f6f2ff00ff10c603728dd519ac",
            "1": "682e2f2f.13f1e0ea.85876e60.6c52ae28.025462d2.b051b3b8.55c6f621.6f114b23.8df8fa68.c86f3030.481cbae6.c48320d7.a7b964d9.0d476878.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/daemon/ClientJarTransformerRunner.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 35,
                            "endLine": 35,
                            "startColumn": 46,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/daemon/ClientJarTransformerRunner.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 35,
                            "endLine": 35,
                            "startColumn": 46,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/daemon/ClientJarTransformerRunner.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 35,
                            "endLine": 35,
                            "startColumn": 30,
                            "endColumn": 45
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 803,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/PT",
          "ruleIndex": 9,
          "level": "error",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.io.FileOutputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1)",
              "[java.io.FileOutputStream](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "storm-core/src/jvm/org/apache/storm/daemon/ClientJarTransformerRunner.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 36,
                  "endLine": 36,
                  "startColumn": 32,
                  "endColumn": 48
                }
              }
            }
          ],
          "fingerprints": {
            "0": "82d3b76056b9583eefb9f9c630b989bfc6f90014a1bae84a7d6fa4b7ff36ddd1",
            "1": "ac4e7c8b.9bb84c11.fa8bb2d4.6c52ae28.025462d2.b051b3b8.cbd38614.5cb0e821.8df8fa68.c86f3030.622565c7.e22980a8.025462d2.0d476878.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/daemon/ClientJarTransformerRunner.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 49,
                            "endColumn": 56
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/daemon/ClientJarTransformerRunner.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 49,
                            "endColumn": 56
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "storm-core/src/jvm/org/apache/storm/daemon/ClientJarTransformerRunner.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 32,
                            "endColumn": 48
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 803,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/PT",
          "ruleIndex": 9,
          "level": "error",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.nio.file.Files.readAllLines, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2)",
              "[java.nio.file.Files.readAllLines](3)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "external/sql/storm-sql-core/src/jvm/org/apache/storm/sql/StormSqlRunner.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 36,
                  "endLine": 36,
                  "startColumn": 30,
                  "endColumn": 48
                }
              }
            }
          ],
          "fingerprints": {
            "0": "411011f36cfc153f9fe73af57068538ac99d61d2ca209548709967546ad82708",
            "1": "48e2c324.1cbd3ff4.fd4fd63e.ede9cf8e.025462d2.117e971f.df7e59ba.f8154588.e1d7cd7c.7f413d6f.fd4fd63e.334c3b1f.025462d2.730a5695.377b98a3.f8154588"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/sql/storm-sql-core/src/jvm/org/apache/storm/sql/StormSqlRunner.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 59,
                            "endColumn": 66
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/sql/storm-sql-core/src/jvm/org/apache/storm/sql/StormSqlRunner.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 59,
                            "endColumn": 66
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/sql/storm-sql-core/src/jvm/org/apache/storm/sql/StormSqlRunner.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 49,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "external/sql/storm-sql-core/src/jvm/org/apache/storm/sql/StormSqlRunner.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 30,
                            "endColumn": 48
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 753,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        }
      ],
      "properties": {
        "coverage": [
          {
            "files": 29,
            "isSupported": true,
            "lang": "Python"
          },
          {
            "files": 68,
            "isSupported": true,
            "lang": "XML"
          },
          {
            "files": 22,
            "isSupported": true,
            "lang": "HTML"
          },
          {
            "files": 6,
            "isSupported": true,
            "lang": "Ruby"
          },
          {
            "files": 30,
            "isSupported": true,
            "lang": "JavaScript"
          },
          {
            "files": 1613,
            "isSupported": true,
            "lang": "Java"
          }
        ]
      }
    }
  ]
}
