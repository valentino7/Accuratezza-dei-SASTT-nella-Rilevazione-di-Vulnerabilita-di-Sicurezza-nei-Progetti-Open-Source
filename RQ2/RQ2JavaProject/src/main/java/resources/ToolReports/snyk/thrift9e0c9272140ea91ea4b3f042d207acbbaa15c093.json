{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SnykCode",
          "semanticVersion": "1.0.0",
          "version": "1.0.0",
          "rules": [
            {
              "id": "php/TrojanSourceBidiControl",
              "name": "TrojanSourceBidiControl",
              "shortDescription": {
                "text": "TrojanSourceBidiControl"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "",
                "text": ""
              },
              "properties": {
                "tags": [
                  "php"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0
              }
            },
            {
              "id": "python/TrojanSourceBidiControl",
              "name": "TrojanSourceBidiControl",
              "shortDescription": {
                "text": "TrojanSourceBidiControl"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0
              }
            },
            {
              "id": "go/TrojanSourceBidiControl",
              "name": "TrojanSourceBidiControl",
              "shortDescription": {
                "text": "TrojanSourceBidiControl"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0
              }
            },
            {
              "id": "go/XSS/test",
              "name": "XSS/test",
              "shortDescription": {
                "text": "Cross-site Scripting (XSS)"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser's Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they've been correctly escaped in the application code and in this way the attempted attack is diverted.\n\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware.\n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user's browser.|\n|**DOM-based**|Client|The attacker forces the user's browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code:\n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches.\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents.\n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/shaoshing/train/commit/10f251358766222f4211540c014fd74c6a32cf83?diff=split#diff-8b80bab7c379f59fe83cb4ee2d015ea7L9",
                    "lines": [
                      {
                        "line": ")",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "func Handler(w http.ResponseWriter, r *http.Request) {",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "  content := ReadAsset(r.URL.Path)",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "  fmt.Fprintf(w, content)",
                        "lineNumber": 10,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  reader := strings.NewReader(content)",
                        "lineNumber": 11,
                        "lineChange": "added"
                      },
                      {
                        "line": "  io.Copy(w, reader)",
                        "lineNumber": 12,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 14,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/alphagov/router/commit/1c0f502e99bafc95900f6d0c42dfb6c364430a7c?diff=split#diff-a2c8aae7faef01e89d82efda1da4f769L12",
                    "lines": [
                      {
                        "line": "func makeDebugServer(name string) http.HandlerFunc {",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "  var randSrc = &randomDataMaker{src: rand.NewSource(time.Now().UTC().UnixNano())}",
                        "lineNumber": 29,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return func(w http.ResponseWriter, r *http.Request) {",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "    randSrc.Lock()",
                        "lineNumber": 32,
                        "lineChange": "added"
                      },
                      {
                        "line": "    defer randSrc.Unlock()",
                        "lineNumber": 33,
                        "lineChange": "added"
                      },
                      {
                        "line": "w.Header().Set(\"Content-Type\", \"text/plain\")",
                        "lineNumber": 35,
                        "lineChange": "added"
                      },
                      {
                        "line": "fmt.Fprintln(w, name, \":\", r.URL.Path)",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "fmt.Fprintln(w)",
                        "lineNumber": 38,
                        "lineChange": "added"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 44,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/aristanetworks/openconfigbeat/commit/d9f4424d7d6d442a95dc9860bf704745a4ce5cae?diff=split#diff-13c7e3ca9b985b0c964b3150b184b678L30",
                    "lines": [
                      {
                        "line": "}",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "func dbJoin(ctx interface{}, w http.ResponseWriter, r *http.Request) {",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "  r.ParseForm()",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "  diagnose.DebugHTTPForm(r)",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "err := nDB.Join(strings.Split(r.Form[\"members\"][0], \",\"))",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "if err != nil {",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "  fmt.Fprintf(w, \"%s error in the DB join %s\\n\", r.URL.Path, err)",
                        "lineNumber": 41,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  rsp := diagnose.FailCommand(fmt.Errorf(\"%s error in the DB join %s\", r.URL.Path, err))",
                        "lineNumber": 53,
                        "lineChange": "added"
                      },
                      {
                        "line": "  log.WithError(err).Error(\"join cluster failed\")",
                        "lineNumber": 54,
                        "lineChange": "added"
                      },
                      {
                        "line": "  diagnose.HTTPReply(w, rsp, json)",
                        "lineNumber": 55,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 57,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "* Fixed trips test and added trip points apis and test",
                  "improve error logging",
                  "Add caching support to test aci server"
                ],
                "precision": "very-high",
                "repoDatasetSize": 288,
                "cwe": [
                  "CWE-79"
                ]
              }
            },
            {
              "id": "go/TooPermissiveTrustManager/test",
              "name": "TooPermissiveTrustManager/test",
              "shortDescription": {
                "text": "Improper Certificate Validation"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nCommunication through encrypted TLS/SSL protocols can only take place when the server bears a valid certificate associating that server with a valid public-key identity issued by a third-party authority. If certificate validation is cursory or incomplete, this creates a weakness whereby an attacker can spoof one or more certificate details (e.g., expiration date), gaining unauthorized access to confidential data and privileged actions.\n\n### Best practices for prevention\n* Verify all aspects of any certificate provided, particularly chain of trust (issuing authority), host identity, and expiration.\n* Limit the validity period for certificates.\n* Avoid using self-signed certificates, certificate pinning, and wildcard certificates, as these all add levels of convenience but can also lead to loss of control over site/app security.\n* Disable older and insecure protocols (for example, SSL 2.0/3.0, MD5, and 3DES).\n* Ensure that all team members are familiar with current best practices and approaches, such as current TLS protocols.\n* Implement automated and manual testing using current tools and techniques designed to reveal this and related SSL weaknesses (for example, web application scanners).",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/arangodb/kube-arangodb/commit/7c9b8fdecccf78ec76983baa9bbf3747aba6f1d0?diff=split#diff-ee987cb87cf8e0096365e15a5a52358eL101",
                    "lines": [
                      {
                        "line": "func createArangodVSTConfigForDNSNames(ctx context.Context, cli corev1.CoreV1Interface, apiObject *api.ArangoDeployment, dnsNames []string) (vst.ConnectionConfig, error) {",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "  scheme := \"http\"",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "  tlsConfig := &tls.Config{InsecureSkipVerify: true}",
                        "lineNumber": 100,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  tlsConfig := &tls.Config{}",
                        "lineNumber": 100,
                        "lineChange": "added"
                      },
                      {
                        "line": "  if apiObject != nil && apiObject.Spec.IsSecure() {",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "    scheme = \"https\"",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "    tlsConfig = &tls.Config{InsecureSkipVerify: true}",
                        "lineNumber": 103,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "transport := vstProtocol.TransportConfig{",
                        "lineNumber": 105,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/fiorix/go-diameter/commit/fbf03cf9eaf1047d51aed495f311280b3f74cb50?diff=split#diff-04482c9117706d6f62ddf81a1153cc2bL72",
                    "lines": [
                      {
                        "line": "  addr = \":3868\"",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "config := &tls.Config{InsecureSkipVerify: true}",
                        "lineNumber": 71,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if srv.TLSConfig != nil {",
                        "lineNumber": 72,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  *config = *srv.TLSConfig",
                        "lineNumber": 73,
                        "lineChange": "removed"
                      },
                      {
                        "line": "var config *tls.Config",
                        "lineNumber": 71,
                        "lineChange": "added"
                      },
                      {
                        "line": "if srv.TLSConfig == nil {",
                        "lineNumber": 72,
                        "lineChange": "added"
                      },
                      {
                        "line": "  config = &tls.Config{InsecureSkipVerify: true}",
                        "lineNumber": 73,
                        "lineChange": "added"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 74,
                        "lineChange": "added"
                      },
                      {
                        "line": "  config = srv.TLSConfig.Clone()",
                        "lineNumber": 75,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/toorop/tmail/commit/67f8ce07ab1260618c2afb2cb0a07ea4e71f33ad?diff=split#diff-898d6a5dc29ee443fb3b42c23bf863a4R25",
                    "lines": [
                      {
                        "line": "var listener net.Listener",
                        "lineNumber": 22,
                        "lineChange": "added"
                      },
                      {
                        "line": "var err error",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "var tlsConfig *tls.Config",
                        "lineNumber": 24,
                        "lineChange": "added"
                      },
                      {
                        "line": "// SSL ?",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "if s.dsn.ssl {",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "// TODO: http://fastah.blackbuck.mobi/blog/securing-https-in-go/",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "tlsConfig := tls.Config{",
                        "lineNumber": 36,
                        "lineChange": "removed"
                      },
                      {
                        "line": "tlsConfig = &tls.Config{",
                        "lineNumber": 32,
                        "lineChange": "added"
                      },
                      {
                        "line": "  Certificates:       []tls.Certificate{cert},",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "  InsecureSkipVerify: true,",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 39,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Update to support tls config options",
                  "Support custom ca's and make insecure as part optional default being false ()",
                  "Support client certificate on cli and nginx ()"
                ],
                "precision": "very-high",
                "repoDatasetSize": 138,
                "cwe": [
                  "CWE-295"
                ]
              }
            },
            {
              "id": "csharp/NoHardcodedCredentials/test",
              "name": "NoHardcodedCredentials/test",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n### Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "csharp"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/JeremyLikness/BlazorWasmEFCoreExample/commit/2c891738e38a92d5d1574eafcb40e5f6e498aa02?diff=split#diff-6f1dbc0a380174c6e9cb1d61b2a053a7L31",
                    "lines": [
                      {
                        "line": "    Func<Task<int>> saveChangesAsync)",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "    var user = \"Unknown\";",
                        "lineNumber": 30,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    var user = Unknown;",
                        "lineNumber": 31,
                        "lineChange": "added"
                      },
                      {
                        "line": "    // grab user identifier",
                        "lineNumber": 33,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Altinn/altinn-studio/commit/2f20fdac8b40893ff6e3a3141a063057735c05f9?diff=split#diff-2e730baa8831d7e708e7163620a2a05dL191",
                    "lines": [
                      {
                        "line": "public async Task<IActionResult> Login()",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "    string userName = \"TestUser\";",
                        "lineNumber": 190,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    string userName = string.Empty;",
                        "lineNumber": 191,
                        "lineChange": "added"
                      },
                      {
                        "line": "    string goToUrl = \"/\";",
                        "lineNumber": 192,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/angelsix/fasetto-word/commit/79f26a6658baa47205c9c4345767cf179f891ebd?diff=split#diff-c602dd61610843bf3e9405215c4b8566L29",
                    "lines": [
                      {
                        "line": "// For now set username",
                        "lineNumber": 27,
                        "lineChange": "removed"
                      },
                      {
                        "line": "var username = \"angelsix\";",
                        "lineNumber": 28,
                        "lineChange": "removed"
                      },
                      {
                        "line": "// Get username",
                        "lineNumber": 110,
                        "lineChange": "added"
                      },
                      {
                        "line": "var username = user.UserName;",
                        "lineNumber": 111,
                        "lineChange": "added"
                      },
                      {
                        "line": "// Set our tokens claims",
                        "lineNumber": 113,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "* Testing upgrade and parity validation",
                  "* Contracts documentation"
                ],
                "precision": "very-high",
                "repoDatasetSize": 46,
                "cwe": [
                  "CWE-798"
                ]
              }
            },
            {
              "id": "csharp/AntiforgeryTokenDisabled/test",
              "name": "AntiforgeryTokenDisabled/test",
              "shortDescription": {
                "text": "Anti-forgery token validation disabled"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nCross-site request forgery is an attack in which a malicious third party takes advantage of a user's authenticated credentials (such as a browser cookie) to impersonate that trusted user and perform unauthorized actions. The web application server cannot tell the difference between legitimate and malicious requests. This type of attack generally begins by tricking the user with a social engineering attack, such as a link or popup that the user inadvertently clicks, causing an unauthorized request to be sent to the web server. Consequences vary: At a standard user level, attackers can change passwords, transfer funds, make purchases, or connect with contacts; from an administrator account, attackers can then make changes to or even take down the app itself.\n\nExample:\n\n```\npublic class StudentController\n{\n\t    [HttpPost()]\n        [IgnoreAntiforgeryToken(Order = 1000)]\n        public Task<object> SendForm()\n        {\n                ...\n        }\n}\n```\n\n\n## Remediation\n\n* In ASP.NET MVC controllers, enable anti-forgery token validation by adding the `[ValidateAntiForgeryToken]` attribute to all actions that change the state of the server.\n\n* Anti-forgery token validation is enabled by default in Razor Pages. This validation can be disabled either globally or on individual pages by using the  `[IgnoreAntiforgeryToken]`. Disabling this feature is not recommended and can allow for CSRF attacks on methods that might be performing sensitive user actions.\n\n\n## References\n\n* [Prevent Cross-Site Request Forgery (XSRF/CSRF) attacks in ASP.NET Core](https://docs.microsoft.com/en-us/aspnet/core/security/anti-request-forgery?view=aspnetcore-5.0)",
                "text": ""
              },
              "properties": {
                "tags": [
                  "csharp"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/oqtane/oqtane.framework/commit/b9c007998e40e25b11f20a50c1f01b5239f762cc?diff=split#diff-cec644de5b66c7026e7abee5af78dd26L16",
                    "lines": [
                      {
                        "line": "namespace Oqtane.Pages",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "    [IgnoreAntiforgeryToken(Order = 1001)]",
                        "lineNumber": 15,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    [AllowAnonymous]",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public class LogoutModel : PageModel",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "     {",
                        "lineNumber": 18,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/NaskoVasilev/JudgeSystem/commit/196dc513b44cd3b5a9f08ccbc63dab92b2b558a5?diff=split#diff-514015c4000100fe0402003841624764L28",
                    "lines": [
                      {
                        "line": "{",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "  using System.Linq;",
                        "lineNumber": 25,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  [Authorize]",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public class SubmissionController : BaseController",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "    [EndpointExceptionFilter]",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "    [IgnoreAntiforgeryToken]",
                        "lineNumber": 101,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    [HttpPost]",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public async Task<IActionResult> Create(SubmissionInputModel model)",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "     {",
                        "lineNumber": 104,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Azure-App-Service/KuduLite/commit/37337a21bae26aa9aefee0ee9730cf8a29484d41?diff=split#diff-75ae9317e74a82b30ea2cbd2be4339c1L45",
                    "lines": [
                      {
                        "line": "}",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "[HttpPost]",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "[IgnoreAntiforgeryToken]",
                        "lineNumber": 45,
                        "lineChange": "removed"
                      },
                      {
                        "line": "[DisableRequestSizeLimit]",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "public async Task<IActionResult> ZipPushDeploy(",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "bool isAsync = false,",
                        "lineNumber": 49,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "correct auth in test client",
                  "Added LogStreamHandler/Switched to Net Core 2.2 preview"
                ],
                "precision": "very-high",
                "repoDatasetSize": 4,
                "cwe": [
                  "CWE-352"
                ]
              }
            },
            {
              "id": "javascript/XSS",
              "name": "XSS",
              "shortDescription": {
                "text": "Cross-site Scripting (XSS)"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser's Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they've been correctly escaped in the application code and in this way the attempted attack is diverted.\n\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware.\n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user's browser.|\n|**DOM-based**|Client|The attacker forces the user's browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code:\n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches.\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents.\n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "javascript"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/basicallydan/interfake/commit/a98f64b6996712c5b3717ee13a1faa3c5c15be6f?diff=split#diff-a4c65ede64197e1a112899a68bf994485b889c4b143198bac4af53425b38406fR48",
                    "lines": [
                      {
                        "line": "res.setHeader('Content-Type', 'application/json');",
                        "lineNumber": 48,
                        "lineChange": "added"
                      },
                      {
                        "line": "res.send(specifiedResponse.code, specifiedResponse.body);",
                        "lineNumber": 50,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/iverenshaguy/book-a-meal/commit/2cfce3689ed825302f4cf597426f0a55108c939c?diff=split#diff-62c0bdb7e35cfd687116c9fae4d4583cf6cab2b7687749f7399054f7bcdbf5fcL42",
                    "lines": [
                      {
                        "line": "return res.status(201).send(meal);",
                        "lineNumber": 41,
                        "lineChange": "removed"
                      },
                      {
                        "line": "return res.status(201).json(meal);",
                        "lineNumber": 41,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/shindesharad71/Anstagram/commit/ac8c703366e073f9fa9ce4b666486a6ba68d23e8?diff=split#diff-63f3a8f1c953bef55c53ac527fa94457a22c8357f265af435605926c66176d97L24",
                    "lines": [
                      {
                        "line": "res.send(req.files);",
                        "lineNumber": 23,
                        "lineChange": "removed"
                      },
                      {
                        "line": "res.send({ files: req.files, body: req.body });",
                        "lineNumber": 23,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "* fixing API tests",
                  "server tests"
                ],
                "precision": "very-high",
                "repoDatasetSize": 1116,
                "cwe": [
                  "CWE-79"
                ]
              }
            },
            {
              "id": "javascript/HttpToHttps",
              "name": "HttpToHttps",
              "shortDescription": {
                "text": "Cleartext Transmission of Sensitive Information"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\nThis weakness occurs when software transmits sensitive information, such as passwords or credit card numbers, in unencrypted form. This information may then be intercepted by threat actors using sniffer tools or interception techniques such as man-in-the-middle (MITM) attacks (often involving social engineering). Attackers can then use information gleaned to perform a variety of actions, depending on the information type. Possible actions include gaining unauthorized access, impersonating a user, moving laterally within the organization's network, or retrieving and potentially modifying files. This weakness is almost completely avoidable through intelligent architecture and design.\n\n### Best practices for prevention\n* Build web applications around a security mindset and the awareness that sniffers may be present at any time.\n* Ensure that all sensitive data transmission uses reliable encryption.\n* Implement security measures so that sensitive results are never returned in plain text.\n* Implement multiple-factor authentication methods to validate remote instances.\n* Use SSL not only at logon but throughout communications.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "javascript"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/Rocket1184/qq-bot-rebown/commit/5255a8398cf1d80f60e182c53e8532c7562e76c2?diff=split#diff-62a4be7247c4abe75f2cc11746422b86L12",
                    "lines": [
                      {
                        "line": "'use strict';",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "const http = require('http');",
                        "lineNumber": 11,
                        "lineChange": "removed"
                      },
                      {
                        "line": "const https = require('https');",
                        "lineNumber": 11,
                        "lineChange": "added"
                      },
                      {
                        "line": "function http2https(link) {",
                        "lineNumber": 13,
                        "lineChange": "added"
                      },
                      {
                        "line": " ",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "function shortenUrl(url) {",
                        "lineNumber": 21,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/qmachine/qmachine/commit/1f9f08b5b1f9be78dd6625d93ec934befb255df7?diff=split#diff-54387be96a26d96583a0c7585e8607c5L56",
                    "lines": [
                      {
                        "line": "};",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "http = require('http');",
                        "lineNumber": 55,
                        "lineChange": "removed"
                      },
                      {
                        "line": "https = require('https');",
                        "lineNumber": 59,
                        "lineChange": "added"
                      },
                      {
                        "line": "http_GET = function (x) {",
                        "lineNumber": 57,
                        "lineChange": "removed"
                      },
                      {
                        "line": "https_GET = function (x) {",
                        "lineNumber": 61,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/vmware-samples/vmware-blockchain-samples/commit/0e45b89996cc8ae87d4f6bd2240720fa70daccd1?diff=split#diff-21a000feb5ae912714215842b628c63cL3",
                    "lines": [
                      {
                        "line": "const fs = require(\"fs\");",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "const http = require(\"http\");",
                        "lineNumber": 2,
                        "lineChange": "removed"
                      },
                      {
                        "line": "const https = require(\"https\");",
                        "lineNumber": 8,
                        "lineChange": "added"
                      },
                      {
                        "line": "verifyMigrations();",
                        "lineNumber": 10,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Added https imposter tests;"
                ],
                "precision": "very-high",
                "repoDatasetSize": 631,
                "cwe": [
                  "CWE-319"
                ]
              }
            },
            {
              "id": "javascript/NodeBufferNoOffset",
              "name": "NodeBufferNoOffset",
              "shortDescription": {
                "text": "Buffer Over-read"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nWhen transmitting information to a user, software should provide only information requested to which the user has legitimate access permission. The buffer over-read weakness means that the software can return data that goes beyond the defined size of the requested data structure. For example, if the software is supposed to return and display a string that is 25 characters long, an attacker could request 50 characters-in which case, software with this weakness would return the 25 characters of the requested string, along with 25 additional characters from the following memory location(s). When a malicious user can intentionally specify a value greater than the data structure's length, and this value is passed directly to the program without validation, the program may expose sensitive information, crash, or otherwise behave erratically.\n\n### Best practices for prevention\n* Patch all servers to ensure that they are running the latest versions of OpenSSL, which corrects for Heartbleed, the best-known example of this weakness.\n* When coding in languages that are inherently prone to buffer weaknesses, such as C and C++, implement and check for well-defined data structure sentinels, such as the NULL character.\n* Never trust a user-provided variable; always perform validation such as bounds checking before passing to the program.\n* Incorporate fuzz testing into your security testing approach to improve test coverage for a wide range of user input values.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "javascript"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/andrewrk/node-yawl/commit/6bac239288926950b11131e9a4e698b097b325d2?diff=split#diff-168726dbe96b3ce427e7fedce31bb0bcL94",
                    "lines": [
                      {
                        "line": "];",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "var BUFFER_NO_DEBUG = true;",
                        "lineNumber": 93,
                        "lineChange": "removed"
                      },
                      {
                        "line": "var BUFFER_NO_DEBUG = false; // TODO revert",
                        "lineNumber": 93,
                        "lineChange": "added"
                      },
                      {
                        "line": "function createServer(options) {",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (mask) mask.copy(b, 2);",
                        "lineNumber": 692,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else if (size <= 65536) {",
                        "lineNumber": 693,
                        "lineChange": "removed"
                      },
                      {
                        "line": "} else if (size <= 65535) {",
                        "lineNumber": 693,
                        "lineChange": "added"
                      },
                      {
                        "line": "  b = new Buffer(4 + maskSize);",
                        "lineNumber": 694,
                        "lineChange": "none"
                      },
                      {
                        "line": "  b[0] = byte1;",
                        "lineNumber": 695,
                        "lineChange": "none"
                      },
                      {
                        "line": "  b[1] = 126|maskBit;",
                        "lineNumber": 696,
                        "lineChange": "none"
                      },
                      {
                        "line": "  b.writeUInt16BE(size, 2, BUFFER_NO_DEBUG);",
                        "lineNumber": 697,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (mask) mask.copy(b, 4);",
                        "lineNumber": 698,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 699,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/ipipdotnet/ipdb-nodejs/commit/f5954153c76037ef75d829a58e6baf7c216faa76?diff=split#diff-d4be1fce4091dd69a0dae4389e6907edL15",
                    "lines": [
                      {
                        "line": "this.meta = JSON.parse(buf.toString());",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "this.body = new Buffer(this.meta.total_size);",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "data.copy(this.body, 0, 4 + metaLength);",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "_readNode(node, idx) {",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "    var off = idx * 4 + node * 8;",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return this.body.readUInt32BE(off, true);",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 23,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/handshake-org/hsd/commit/28cd43045dd1e8bc6b3442847ca406b7207d9ea8?diff=split#diff-122bfc80fcd9c0c2c94222d3ba9d965aL68",
                    "lines": [
                      {
                        "line": "batch.put('R', p);",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "ver = new Buffer(4);",
                        "lineNumber": 67,
                        "lineChange": "removed"
                      },
                      {
                        "line": "ver = Buffer.allocUnsafe(4);",
                        "lineNumber": 67,
                        "lineChange": "added"
                      },
                      {
                        "line": "ver.writeUInt32LE(1, 0, true);",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "batch.put('V', ver);",
                        "lineNumber": 69,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "The support for the `noAssert` argument dropped in the upcoming",
                  "Fix deprecation warning around buffer usage"
                ],
                "precision": "very-high",
                "repoDatasetSize": 23,
                "cwe": [
                  "CWE-126"
                ]
              }
            },
            {
              "id": "java/InsecureHash",
              "name": "InsecureHash",
              "shortDescription": {
                "text": "Use of Password Hash With Insufficient Computational Effort"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nSensitive information should never be stored in plain text, since this makes it very easy for unauthorized users, whether malicious insiders or outside attackers, to access. Hashing methods are used to make stored passwords and other sensitive data unreadable to users. For example, when a password is defined for the first time, it is hashed and then stored. The next time that user attempts to log on, the password they enter is hashed following the same procedure and compared with the stored value. In this way, the original password never needs to be stored in the system.\n\nHashing is a one-way scheme, meaning a hashed password cannot be reverse engineered. However, if an outdated or custom programmed hashing scheme is used, it becomes simple for an attacker with powerful modern computing power to gain access to the hashes used. This opens up access to all stored password information, leading to breached security. Therefore, it is essential for developers to understand modern, secure password hashing techniques.\n\n### Best practices for prevention\n* Use strong standard algorithms for hashing rather than simpler but outdated methods or DIY hashing schemes, which may have inherent weaknesses.\n* Use modular design for all code dealing with hashing so it can be swapped out as security standards change over time.\n* Use salting in combination with hashing (While this places more demands on resources, it is an essential step for tighter security.).\n* Implement zero-trust architecture to ensure that access to password data is granted only for legitimate business purposes.\n* Increase developer awareness of current standards in data security and cryptography.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/tita/tita/commit/398f6b776a2aea7f20bf604768b8721beff8d93a?diff=split#diff-dd34c5e6a15ca48bff6f9ca749e68243L164",
                    "lines": [
                      {
                        "line": " */",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "private String getHashedPassword(String pwd) throws NoSuchAlgorithmException {",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "    MessageDigest md = MessageDigest.getInstance(\"SHA-1\");",
                        "lineNumber": 163,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    MessageDigest md = MessageDigest.getInstance(\"SHA-256\");",
                        "lineNumber": 103,
                        "lineChange": "added"
                      },
                      {
                        "line": "    byte[] encryptMsg = md.digest(pwd.getBytes());",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return new String(encryptMsg);",
                        "lineNumber": 165,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    return bytes2String(encryptMsg);",
                        "lineNumber": 105,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/devonfw/my-thai-star/commit/095a3fb6bb860a2411cb51e812121ec2a6b99894?diff=split#diff-4f73d1042058dd462057744068125d4eL242",
                    "lines": [
                      {
                        "line": "    + String.format(\"%02d\", ldt1.getSecond());",
                        "lineNumber": 240,
                        "lineChange": "none"
                      },
                      {
                        "line": "MessageDigest md = MessageDigest.getInstance(\"MD5\");",
                        "lineNumber": 241,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MessageDigest md = MessageDigest.getInstance(\"SHA-256\");",
                        "lineNumber": 242,
                        "lineChange": "added"
                      },
                      {
                        "line": "md.update((email + date + time).getBytes());",
                        "lineNumber": 243,
                        "lineChange": "none"
                      },
                      {
                        "line": "byte[] digest = md.digest();",
                        "lineNumber": 244,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/SecurityCompass/AndroidLabs/commit/5608f75dd665beac85dbad08f80b91d73b27904a?diff=split#diff-ffc047d4a5f84de13e373f2392bfb11bL148",
                    "lines": [
                      {
                        "line": "byte[] passwordBytes = (password).getBytes(\"UTF-8\");",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "MessageDigest md = MessageDigest.getInstance(\"SHA-1\");",
                        "lineNumber": 147,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MessageDigest md = MessageDigest.getInstance(\"SHA-256\");",
                        "lineNumber": 147,
                        "lineChange": "added"
                      },
                      {
                        "line": "md.reset();",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "md.update(salt);",
                        "lineNumber": 149,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Added an enum for the supported encryption algorithms",
                  "Added #hash(byte[], String)",
                  "Added support for\nsha256 and nonce token."
                ],
                "precision": "very-high",
                "repoDatasetSize": 122,
                "cwe": [
                  "CWE-916"
                ]
              }
            },
            {
              "id": "go/TooPermissiveTrustManager",
              "name": "TooPermissiveTrustManager",
              "shortDescription": {
                "text": "Improper Certificate Validation"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nCommunication through encrypted TLS/SSL protocols can only take place when the server bears a valid certificate associating that server with a valid public-key identity issued by a third-party authority. If certificate validation is cursory or incomplete, this creates a weakness whereby an attacker can spoof one or more certificate details (e.g., expiration date), gaining unauthorized access to confidential data and privileged actions.\n\n### Best practices for prevention\n* Verify all aspects of any certificate provided, particularly chain of trust (issuing authority), host identity, and expiration.\n* Limit the validity period for certificates.\n* Avoid using self-signed certificates, certificate pinning, and wildcard certificates, as these all add levels of convenience but can also lead to loss of control over site/app security.\n* Disable older and insecure protocols (for example, SSL 2.0/3.0, MD5, and 3DES).\n* Ensure that all team members are familiar with current best practices and approaches, such as current TLS protocols.\n* Implement automated and manual testing using current tools and techniques designed to reveal this and related SSL weaknesses (for example, web application scanners).",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/arangodb/kube-arangodb/commit/7c9b8fdecccf78ec76983baa9bbf3747aba6f1d0?diff=split#diff-ee987cb87cf8e0096365e15a5a52358eL101",
                    "lines": [
                      {
                        "line": "func createArangodVSTConfigForDNSNames(ctx context.Context, cli corev1.CoreV1Interface, apiObject *api.ArangoDeployment, dnsNames []string) (vst.ConnectionConfig, error) {",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "  scheme := \"http\"",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "  tlsConfig := &tls.Config{InsecureSkipVerify: true}",
                        "lineNumber": 100,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  tlsConfig := &tls.Config{}",
                        "lineNumber": 100,
                        "lineChange": "added"
                      },
                      {
                        "line": "  if apiObject != nil && apiObject.Spec.IsSecure() {",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "    scheme = \"https\"",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "    tlsConfig = &tls.Config{InsecureSkipVerify: true}",
                        "lineNumber": 103,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "transport := vstProtocol.TransportConfig{",
                        "lineNumber": 105,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/fiorix/go-diameter/commit/fbf03cf9eaf1047d51aed495f311280b3f74cb50?diff=split#diff-04482c9117706d6f62ddf81a1153cc2bL72",
                    "lines": [
                      {
                        "line": "  addr = \":3868\"",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "config := &tls.Config{InsecureSkipVerify: true}",
                        "lineNumber": 71,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if srv.TLSConfig != nil {",
                        "lineNumber": 72,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  *config = *srv.TLSConfig",
                        "lineNumber": 73,
                        "lineChange": "removed"
                      },
                      {
                        "line": "var config *tls.Config",
                        "lineNumber": 71,
                        "lineChange": "added"
                      },
                      {
                        "line": "if srv.TLSConfig == nil {",
                        "lineNumber": 72,
                        "lineChange": "added"
                      },
                      {
                        "line": "  config = &tls.Config{InsecureSkipVerify: true}",
                        "lineNumber": 73,
                        "lineChange": "added"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 74,
                        "lineChange": "added"
                      },
                      {
                        "line": "  config = srv.TLSConfig.Clone()",
                        "lineNumber": 75,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/toorop/tmail/commit/67f8ce07ab1260618c2afb2cb0a07ea4e71f33ad?diff=split#diff-898d6a5dc29ee443fb3b42c23bf863a4R25",
                    "lines": [
                      {
                        "line": "var listener net.Listener",
                        "lineNumber": 22,
                        "lineChange": "added"
                      },
                      {
                        "line": "var err error",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "var tlsConfig *tls.Config",
                        "lineNumber": 24,
                        "lineChange": "added"
                      },
                      {
                        "line": "// SSL ?",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "if s.dsn.ssl {",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "// TODO: http://fastah.blackbuck.mobi/blog/securing-https-in-go/",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "tlsConfig := tls.Config{",
                        "lineNumber": 36,
                        "lineChange": "removed"
                      },
                      {
                        "line": "tlsConfig = &tls.Config{",
                        "lineNumber": 32,
                        "lineChange": "added"
                      },
                      {
                        "line": "  Certificates:       []tls.Certificate{cert},",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "  InsecureSkipVerify: true,",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 39,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Update to support tls config options",
                  "Support custom ca's and make insecure as part optional default being false ()",
                  "Support client certificate on cli and nginx ()"
                ],
                "precision": "very-high",
                "repoDatasetSize": 138,
                "cwe": [
                  "CWE-295"
                ]
              }
            },
            {
              "id": "java/PT/test",
              "name": "PT/test",
              "shortDescription": {
                "text": "Path Traversal"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/google/j2objc/commit/1b271d8b25c99a91547a19f16f71c048c3164156?diff=split#diff-33b6b27033cb88022415e8cd32b1807cL244",
                    "lines": [
                      {
                        "line": " * Extract a ZipEntry to the specified directory.",
                        "lineNumber": 241,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 242,
                        "lineChange": "none"
                      },
                      {
                        "line": "public File extractZipEntry(File dir, ZipFile zipFile, ZipEntry entry) throws IOException {",
                        "lineNumber": 243,
                        "lineChange": "none"
                      },
                      {
                        "line": "  File outputFile = new File(dir, entry.getName());",
                        "lineNumber": 244,
                        "lineChange": "none"
                      },
                      {
                        "line": "  File parentFile = outputFile.getParentFile();",
                        "lineNumber": 245,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (!parentFile.isDirectory() && !parentFile.mkdirs()) {",
                        "lineNumber": 246,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    throw new IOException(\"Could not extract file to \" + dir.getPath());",
                        "lineNumber": 247,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  if (!outputFile.getCanonicalPath().startsWith(dir.getCanonicalPath() + File.separator)",
                        "lineNumber": 246,
                        "lineChange": "added"
                      },
                      {
                        "line": "      || (!parentFile.isDirectory() && !parentFile.mkdirs())) {",
                        "lineNumber": 247,
                        "lineChange": "added"
                      },
                      {
                        "line": "    throw new IOException(\"Could not extract \" + entry.getName() + \" to \" + dir.getPath());",
                        "lineNumber": 248,
                        "lineChange": "added"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 249,
                        "lineChange": "none"
                      },
                      {
                        "line": "  try (InputStream inputStream = zipFile.getInputStream(entry);",
                        "lineNumber": 250,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileOutputStream outputStream = new FileOutputStream(outputFile)) {",
                        "lineNumber": 251,
                        "lineChange": "none"
                      },
                      {
                        "line": "    byte[] buf = new byte[1024];",
                        "lineNumber": 252,
                        "lineChange": "none"
                      },
                      {
                        "line": "    int n;",
                        "lineNumber": 253,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/blackducksoftware/synopsys-detect/commit/36555b9322986e9560f241d05f2262c29a17663b?diff=split#diff-bc0b5be9b9918488d8fe1dc64584df62L48",
                    "lines": [
                      {
                        "line": "Enumeration<? extends ZipEntry> entries = zipFile.entries();",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "while (entries.hasMoreElements()) {",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "    ZipEntry entry = entries.nextElement();",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Path entryPath = destPath.resolve(entry.getName());",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!entryPath.normalize().startsWith(dest.toPath()))",
                        "lineNumber": 49,
                        "lineChange": "added"
                      },
                      {
                        "line": "        throw new IOException(\"Zip entry contained path traversal\");",
                        "lineNumber": 50,
                        "lineChange": "added"
                      },
                      {
                        "line": "    if (entry.isDirectory()) {",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Files.createDirectories(entryPath);",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Files.createDirectories(entryPath.getParent());",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try (InputStream in = zipFile.getInputStream(entry)) {",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "            try (OutputStream out = new FileOutputStream(entryPath.toFile())) {",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "                IOUtils.copy(in, out);",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }",
                        "lineNumber": 58,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/azkaban/azkaban/commit/3b74a4127c9086cd525252edabc3621febab0428?diff=split#diff-c892cca6401b1e0be4cbca3261b47098L201",
                    "lines": [
                      {
                        "line": "final Enumeration<?> entries = source.entries();",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "while (entries.hasMoreElements()) {",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "  final ZipEntry entry = (ZipEntry) entries.nextElement();",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "  final File newFile = new File(dest, entry.getName());",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (!newFile.getCanonicalPath().startsWith(dest.getCanonicalPath())) {",
                        "lineNumber": 202,
                        "lineChange": "added"
                      },
                      {
                        "line": "    throw new IOException(",
                        "lineNumber": 203,
                        "lineChange": "added"
                      },
                      {
                        "line": "        \"Extracting zip entry would have resulted in a file outside the specified destination\"",
                        "lineNumber": 204,
                        "lineChange": "added"
                      },
                      {
                        "line": "if (entry.isDirectory()) {",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "  newFile.mkdirs();",
                        "lineNumber": 209,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 210,
                        "lineChange": "none"
                      },
                      {
                        "line": "  newFile.getParentFile().mkdirs();",
                        "lineNumber": 211,
                        "lineChange": "none"
                      },
                      {
                        "line": "  final InputStream src = source.getInputStream(entry);",
                        "lineNumber": 212,
                        "lineChange": "none"
                      },
                      {
                        "line": "  try {",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "    final OutputStream output =",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "        new BufferedOutputStream(new FileOutputStream(newFile));",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "      IOUtils.copy(src, output);",
                        "lineNumber": 217,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Test changed key to file.",
                  "* more code cleanup, some tests",
                  "Add option --xcode for Xcode translation testing"
                ],
                "precision": "very-high",
                "repoDatasetSize": 948,
                "cwe": [
                  "CWE-23"
                ]
              }
            },
            {
              "id": "java/UsageOfUnencryptedSocket",
              "name": "UsageOfUnencryptedSocket",
              "shortDescription": {
                "text": "Cleartext Transmission of Sensitive Information"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\nThis weakness occurs when software transmits sensitive information, such as passwords or credit card numbers, in unencrypted form. This information may then be intercepted by threat actors using sniffer tools or interception techniques such as man-in-the-middle (MITM) attacks (often involving social engineering). Attackers can then use information gleaned to perform a variety of actions, depending on the information type. Possible actions include gaining unauthorized access, impersonating a user, moving laterally within the organization's network, or retrieving and potentially modifying files. This weakness is almost completely avoidable through intelligent architecture and design.\n\n### Best practices for prevention\n* Build web applications around a security mindset and the awareness that sniffers may be present at any time.\n* Ensure that all sensitive data transmission uses reliable encryption.\n* Implement security measures so that sensitive results are never returned in plain text.\n* Implement multiple-factor authentication methods to validate remote instances.\n* Use SSL not only at logon but throughout communications.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/ME1312/SubServers-2/commit/9a219a7d0fd259870a94d1f875f3cbb3c942ec1e?diff=split#diff-4a76c605749ad18708be15720e8fac67L57",
                    "lines": [
                      {
                        "line": "public SubDataClient(SubPlugin plugin, InetAddress address, int port, Encryption encryption) throws IOException {",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (Util.isNull(plugin, address, port)) throw new NullPointerException();",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "    socket = new Socket(address, port);",
                        "lineNumber": 56,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    socket = new NamedContainer<>(false, new Socket(address, port));",
                        "lineNumber": 60,
                        "lineChange": "added"
                      },
                      {
                        "line": "    this.plugin = plugin;",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.writer = new PrintWriter(socket.getOutputStream(), true);",
                        "lineNumber": 58,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    this.writer = new PrintWriter(socket.get().getOutputStream(), true);",
                        "lineNumber": 62,
                        "lineChange": "added"
                      },
                      {
                        "line": "    this.encryption = encryption;",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.queue = new LinkedList<NamedContainer<String, PacketOut>>();",
                        "lineNumber": 64,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/dddpaul/android-SimpleNetCat/commit/3235f85ae26fa31e1e36739c608668e15c53a04c?diff=split#diff-6689eedf89cc41d9c93933ea7ff5ebf4L62",
                    "lines": [
                      {
                        "line": "    int port = Integer.parseInt( params[2] );",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Log.d( CLASS_NAME, String.format( \"Connecting to %s:%d\", host, port ) );",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "    socket = new Socket( host, port );",
                        "lineNumber": 61,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    result.object = new Socket( host, port );",
                        "lineNumber": 65,
                        "lineChange": "added"
                      },
                      {
                        "line": "    break;",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "case RECEIVE:",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "    BufferedReader reader = new BufferedReader( new InputStreamReader( input ) );",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "    PrintWriter writer = new PrintWriter( socket.getOutputStream() );",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "    transferStreams( reader, writer );",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 114,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/rancher/cattle/commit/b06df6f37fdfe906b7804fbba41d2c02d472f8ab?diff=split#diff-125505ce5e24cbf259a0267dd1d3af77L314",
                    "lines": [
                      {
                        "line": "String[] parts = master.getConfig().getAdvertiseAddress().split(\":\");",
                        "lineNumber": 311,
                        "lineChange": "none"
                      },
                      {
                        "line": "try (",
                        "lineNumber": 312,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Socket socket = new Socket(parts[0], Integer.parseInt(parts[1]));",
                        "lineNumber": 313,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    OutputStream os = socket.getOutputStream();",
                        "lineNumber": 314,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    Socket socket = new Socket();",
                        "lineNumber": 313,
                        "lineChange": "added"
                      },
                      {
                        "line": ") {",
                        "lineNumber": 315,
                        "lineChange": "none"
                      },
                      {
                        "line": "    socket.connect(new InetSocketAddress(parts[0], Integer.parseInt(parts[1])), 5000);",
                        "lineNumber": 315,
                        "lineChange": "added"
                      },
                      {
                        "line": "    log.info(\"Connection test to master\");",
                        "lineNumber": 316,
                        "lineChange": "none"
                      },
                      {
                        "line": " } catch (IOException e) {",
                        "lineNumber": 317,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Use thread local sockets for everything except IDLE and STATUS.",
                  "- Adding a test that a locator can shut itself down\nwith SSL.",
                  "Added support for SSL secured Manager connections"
                ],
                "precision": "very-high",
                "repoDatasetSize": 108,
                "cwe": [
                  "CWE-319"
                ]
              }
            },
            {
              "id": "javascript/TrojanSourceBidiControl",
              "name": "TrojanSourceBidiControl",
              "shortDescription": {
                "text": "TrojanSourceBidiControl"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "",
                "text": ""
              },
              "properties": {
                "tags": [
                  "javascript"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0
              }
            },
            {
              "id": "java/PT",
              "name": "PT",
              "shortDescription": {
                "text": "Path Traversal"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/google/j2objc/commit/1b271d8b25c99a91547a19f16f71c048c3164156?diff=split#diff-33b6b27033cb88022415e8cd32b1807cL244",
                    "lines": [
                      {
                        "line": " * Extract a ZipEntry to the specified directory.",
                        "lineNumber": 241,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 242,
                        "lineChange": "none"
                      },
                      {
                        "line": "public File extractZipEntry(File dir, ZipFile zipFile, ZipEntry entry) throws IOException {",
                        "lineNumber": 243,
                        "lineChange": "none"
                      },
                      {
                        "line": "  File outputFile = new File(dir, entry.getName());",
                        "lineNumber": 244,
                        "lineChange": "none"
                      },
                      {
                        "line": "  File parentFile = outputFile.getParentFile();",
                        "lineNumber": 245,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (!parentFile.isDirectory() && !parentFile.mkdirs()) {",
                        "lineNumber": 246,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    throw new IOException(\"Could not extract file to \" + dir.getPath());",
                        "lineNumber": 247,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  if (!outputFile.getCanonicalPath().startsWith(dir.getCanonicalPath() + File.separator)",
                        "lineNumber": 246,
                        "lineChange": "added"
                      },
                      {
                        "line": "      || (!parentFile.isDirectory() && !parentFile.mkdirs())) {",
                        "lineNumber": 247,
                        "lineChange": "added"
                      },
                      {
                        "line": "    throw new IOException(\"Could not extract \" + entry.getName() + \" to \" + dir.getPath());",
                        "lineNumber": 248,
                        "lineChange": "added"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 249,
                        "lineChange": "none"
                      },
                      {
                        "line": "  try (InputStream inputStream = zipFile.getInputStream(entry);",
                        "lineNumber": 250,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileOutputStream outputStream = new FileOutputStream(outputFile)) {",
                        "lineNumber": 251,
                        "lineChange": "none"
                      },
                      {
                        "line": "    byte[] buf = new byte[1024];",
                        "lineNumber": 252,
                        "lineChange": "none"
                      },
                      {
                        "line": "    int n;",
                        "lineNumber": 253,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/blackducksoftware/synopsys-detect/commit/36555b9322986e9560f241d05f2262c29a17663b?diff=split#diff-bc0b5be9b9918488d8fe1dc64584df62L48",
                    "lines": [
                      {
                        "line": "Enumeration<? extends ZipEntry> entries = zipFile.entries();",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "while (entries.hasMoreElements()) {",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "    ZipEntry entry = entries.nextElement();",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Path entryPath = destPath.resolve(entry.getName());",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!entryPath.normalize().startsWith(dest.toPath()))",
                        "lineNumber": 49,
                        "lineChange": "added"
                      },
                      {
                        "line": "        throw new IOException(\"Zip entry contained path traversal\");",
                        "lineNumber": 50,
                        "lineChange": "added"
                      },
                      {
                        "line": "    if (entry.isDirectory()) {",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Files.createDirectories(entryPath);",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Files.createDirectories(entryPath.getParent());",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try (InputStream in = zipFile.getInputStream(entry)) {",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "            try (OutputStream out = new FileOutputStream(entryPath.toFile())) {",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "                IOUtils.copy(in, out);",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }",
                        "lineNumber": 58,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/azkaban/azkaban/commit/3b74a4127c9086cd525252edabc3621febab0428?diff=split#diff-c892cca6401b1e0be4cbca3261b47098L201",
                    "lines": [
                      {
                        "line": "final Enumeration<?> entries = source.entries();",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "while (entries.hasMoreElements()) {",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "  final ZipEntry entry = (ZipEntry) entries.nextElement();",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "  final File newFile = new File(dest, entry.getName());",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (!newFile.getCanonicalPath().startsWith(dest.getCanonicalPath())) {",
                        "lineNumber": 202,
                        "lineChange": "added"
                      },
                      {
                        "line": "    throw new IOException(",
                        "lineNumber": 203,
                        "lineChange": "added"
                      },
                      {
                        "line": "        \"Extracting zip entry would have resulted in a file outside the specified destination\"",
                        "lineNumber": 204,
                        "lineChange": "added"
                      },
                      {
                        "line": "if (entry.isDirectory()) {",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "  newFile.mkdirs();",
                        "lineNumber": 209,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 210,
                        "lineChange": "none"
                      },
                      {
                        "line": "  newFile.getParentFile().mkdirs();",
                        "lineNumber": 211,
                        "lineChange": "none"
                      },
                      {
                        "line": "  final InputStream src = source.getInputStream(entry);",
                        "lineNumber": 212,
                        "lineChange": "none"
                      },
                      {
                        "line": "  try {",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "    final OutputStream output =",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "        new BufferedOutputStream(new FileOutputStream(newFile));",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "      IOUtils.copy(src, output);",
                        "lineNumber": 217,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Test changed key to file.",
                  "* more code cleanup, some tests",
                  "Add option --xcode for Xcode translation testing"
                ],
                "precision": "very-high",
                "repoDatasetSize": 948,
                "cwe": [
                  "CWE-23"
                ]
              }
            },
            {
              "id": "ruby/TrojanSourceBidiControl",
              "name": "TrojanSourceBidiControl",
              "shortDescription": {
                "text": "TrojanSourceBidiControl"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "",
                "text": ""
              },
              "properties": {
                "tags": [
                  "ruby"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0
              }
            },
            {
              "id": "csharp/NoHardcodedCredentials",
              "name": "NoHardcodedCredentials",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n### Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "csharp"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/JeremyLikness/BlazorWasmEFCoreExample/commit/2c891738e38a92d5d1574eafcb40e5f6e498aa02?diff=split#diff-6f1dbc0a380174c6e9cb1d61b2a053a7L31",
                    "lines": [
                      {
                        "line": "    Func<Task<int>> saveChangesAsync)",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "    var user = \"Unknown\";",
                        "lineNumber": 30,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    var user = Unknown;",
                        "lineNumber": 31,
                        "lineChange": "added"
                      },
                      {
                        "line": "    // grab user identifier",
                        "lineNumber": 33,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Altinn/altinn-studio/commit/2f20fdac8b40893ff6e3a3141a063057735c05f9?diff=split#diff-2e730baa8831d7e708e7163620a2a05dL191",
                    "lines": [
                      {
                        "line": "public async Task<IActionResult> Login()",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "    string userName = \"TestUser\";",
                        "lineNumber": 190,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    string userName = string.Empty;",
                        "lineNumber": 191,
                        "lineChange": "added"
                      },
                      {
                        "line": "    string goToUrl = \"/\";",
                        "lineNumber": 192,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/angelsix/fasetto-word/commit/79f26a6658baa47205c9c4345767cf179f891ebd?diff=split#diff-c602dd61610843bf3e9405215c4b8566L29",
                    "lines": [
                      {
                        "line": "// For now set username",
                        "lineNumber": 27,
                        "lineChange": "removed"
                      },
                      {
                        "line": "var username = \"angelsix\";",
                        "lineNumber": 28,
                        "lineChange": "removed"
                      },
                      {
                        "line": "// Get username",
                        "lineNumber": 110,
                        "lineChange": "added"
                      },
                      {
                        "line": "var username = user.UserName;",
                        "lineNumber": 111,
                        "lineChange": "added"
                      },
                      {
                        "line": "// Set our tokens claims",
                        "lineNumber": 113,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "* Testing upgrade and parity validation",
                  "* Contracts documentation"
                ],
                "precision": "very-high",
                "repoDatasetSize": 46,
                "cwe": [
                  "CWE-798"
                ]
              }
            },
            {
              "id": "go/InsecureTLSConfig",
              "name": "InsecureTLSConfig",
              "shortDescription": {
                "text": "Insecure TLS Configuration"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nImplementing encryption for the transmission and storage of sensitive information is essential. But encryption standards are constantly changing since attackers have more and more powerful resources at their disposal-along with more sophisticated attack algorithms. This means that encryption is only useful if it meets current standards appropriate for the type of data being transmitted or stored.\nWhen organizations use weakly encoded passwords or weak hashes (especially when they also utilize single-factor authentication, which places too much emphasis on passwords), attackers can potentially gain unauthorized access through a brute-force attack.\n\n### Best practices for prevention\n* Use TLS instead of SSL\n* Be aware of outdated algorithms; recognize and implement current cryptographic standards instead.\n* Never use custom or DIY security and cryptographic methods; instead, use methods that are part of an accepted library or framework.\n* Ensure that code dealing with cryptographic methods is highly modular and can be easily replaced as security standards change.\n* Increase developer awareness of proper encryption key management and protection to ensure best practices throughout the application.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/gopherpit/gopherpit/commit/85ef080b72a60bdd902ab97d935e93cc4b294c92?diff=split#diff-91bbeda7eb98a7adc57b9e47e2cf5c2bL261",
                    "lines": [
                      {
                        "line": "// Configure TLS",
                        "lineNumber": 259,
                        "lineChange": "removed"
                      },
                      {
                        "line": "tlsConfig := &tls.Config{",
                        "lineNumber": 260,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}",
                        "lineNumber": 282,
                        "lineChange": "added"
                      },
                      {
                        "line": "func newTLSConfig(s *Server) (tlsConfig *tls.Config, err error) {",
                        "lineNumber": 284,
                        "lineChange": "added"
                      },
                      {
                        "line": "  tlsConfig = &tls.Config{",
                        "lineNumber": 285,
                        "lineChange": "added"
                      },
                      {
                        "line": "    MinVersion:         tls.VersionTLS10,",
                        "lineNumber": 286,
                        "lineChange": "none"
                      },
                      {
                        "line": "    NextProtos:         []string{\"h2\"},",
                        "lineNumber": 287,
                        "lineChange": "none"
                      },
                      {
                        "line": "    ClientSessionCache: tls.NewLRUClientSessionCache(-1),",
                        "lineNumber": 288,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 289,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/distribution/distribution/commit/cc341b01108a81f7c92249456cae0b1c164fa8da?diff=split#diff-55e333416ad33b237c440cbd78d81cebR84",
                    "lines": [
                      {
                        "line": "var tlsVersions = map[string]uint16{",
                        "lineNumber": 81,
                        "lineChange": "added"
                      },
                      {
                        "line": "  // user specified values",
                        "lineNumber": 82,
                        "lineChange": "added"
                      },
                      {
                        "line": "  \"tls1.0\": tls.VersionTLS10,",
                        "lineNumber": 83,
                        "lineChange": "added"
                      },
                      {
                        "line": "  \"tls1.1\": tls.VersionTLS11,",
                        "lineNumber": 84,
                        "lineChange": "added"
                      },
                      {
                        "line": "  \"tls1.2\": tls.VersionTLS12,",
                        "lineNumber": 85,
                        "lineChange": "added"
                      },
                      {
                        "line": "if config.HTTP.TLS.Certificate != \"\" || config.HTTP.TLS.LetsEncrypt.CacheFile != \"\" {",
                        "lineNumber": 221,
                        "lineChange": "none"
                      },
                      {
                        "line": "dcontext.GetLogger(registry.app).Infof(\"restricting TLS cipher suites to: %s\", strings.Join(getCipherSuiteNames(tlsCipherSuites), \",\"))",
                        "lineNumber": 235,
                        "lineChange": "added"
                      },
                      {
                        "line": "tlsConf := &tls.Config{",
                        "lineNumber": 237,
                        "lineChange": "none"
                      },
                      {
                        "line": "  ClientAuth:               tls.NoClientCert,",
                        "lineNumber": 238,
                        "lineChange": "none"
                      },
                      {
                        "line": "  NextProtos:               nextProtos(config),",
                        "lineNumber": 239,
                        "lineChange": "none"
                      },
                      {
                        "line": "  MinVersion:               tls.VersionTLS10,",
                        "lineNumber": 141,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  MinVersion:               tlsMinVersion,",
                        "lineNumber": 240,
                        "lineChange": "added"
                      },
                      {
                        "line": "  PreferServerCipherSuites: true,",
                        "lineNumber": 241,
                        "lineChange": "none"
                      },
                      {
                        "line": "  CipherSuites: []uint16{",
                        "lineNumber": 143,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  CipherSuites:             tlsCipherSuites,",
                        "lineNumber": 242,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/muraenateam/muraena/commit/5828c4e9f1f0b0cd016cb03036f3ee3f6000b5c7?diff=split#diff-8852c8f0f0b918ff654ffe4bff05dd2bR38",
                    "lines": [
                      {
                        "line": " ",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "var tlsVersionToConst = map[string]uint16{",
                        "lineNumber": 36,
                        "lineChange": "added"
                      },
                      {
                        "line": "  \"SSL3.0\": tls.VersionSSL30,",
                        "lineNumber": 37,
                        "lineChange": "added"
                      },
                      {
                        "line": "  \"TLS1.0\": tls.VersionTLS10,",
                        "lineNumber": 38,
                        "lineChange": "added"
                      },
                      {
                        "line": "  \"TLS1.1\": tls.VersionTLS11,",
                        "lineNumber": 39,
                        "lineChange": "added"
                      },
                      {
                        "line": "func (server *tlsServer) serveTLS() (err error) {",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": " // In an ideal world everyone would use TLS 1.2 at least, but we downgrade to",
                        "lineNumber": 34,
                        "lineChange": "removed"
                      },
                      {
                        "line": " // accept SSL 3.0 as a minimum version, otherwise old clients will have issues",
                        "lineNumber": 35,
                        "lineChange": "removed"
                      },
                      {
                        "line": " conf := &tls.Config{",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "   MinVersion:               tls.VersionSSL30,",
                        "lineNumber": 37,
                        "lineChange": "removed"
                      },
                      {
                        "line": "   PreferServerCipherSuites: true,",
                        "lineNumber": 38,
                        "lineChange": "removed"
                      },
                      {
                        "line": "   SessionTicketsDisabled:   true,",
                        "lineNumber": 39,
                        "lineChange": "removed"
                      },
                      {
                        "line": "   MinVersion:               tlsVersionToConst[server.MinVersion],",
                        "lineNumber": 47,
                        "lineChange": "added"
                      },
                      {
                        "line": "   PreferServerCipherSuites: server.PreferServerCipherSuites,",
                        "lineNumber": 48,
                        "lineChange": "added"
                      },
                      {
                        "line": "   SessionTicketsDisabled:   server.SessionTicketsDisabled,",
                        "lineNumber": 49,
                        "lineChange": "added"
                      },
                      {
                        "line": "   NextProtos:               []string{\"http/1.1\"},",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "   Certificates:             make([]tls.Certificate, 1),",
                        "lineNumber": 51,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Add support to customize server TLS",
                  "* Switch to dep for dependency management"
                ],
                "precision": "very-high",
                "repoDatasetSize": 32,
                "cwe": [
                  "CWE-327"
                ]
              }
            },
            {
              "id": "javascript/InsecureHash",
              "name": "InsecureHash",
              "shortDescription": {
                "text": "Use of Password Hash With Insufficient Computational Effort"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nSensitive information should never be stored in plain text, since this makes it very easy for unauthorized users, whether malicious insiders or outside attackers, to access. Hashing methods are used to make stored passwords and other sensitive data unreadable to users. For example, when a password is defined for the first time, it is hashed and then stored. The next time that user attempts to log on, the password they enter is hashed following the same procedure and compared with the stored value. In this way, the original password never needs to be stored in the system.\n\nHashing is a one-way scheme, meaning a hashed password cannot be reverse engineered. However, if an outdated or custom programmed hashing scheme is used, it becomes simple for an attacker with powerful modern computing power to gain access to the hashes used. This opens up access to all stored password information, leading to breached security. Therefore, it is essential for developers to understand modern, secure password hashing techniques.\n\n### Best practices for prevention\n* Use strong standard algorithms for hashing rather than simpler but outdated methods or DIY hashing schemes, which may have inherent weaknesses.\n* Use modular design for all code dealing with hashing so it can be swapped out as security standards change over time.\n* Use salting in combination with hashing (While this places more demands on resources, it is an essential step for tighter security.).\n* Implement zero-trust architecture to ensure that access to password data is granted only for legitimate business purposes.\n* Increase developer awareness of current standards in data security and cryptography.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "javascript"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/feup-infolab/dendro/commit/af4689bf0d26af0607567c46922251ac07922dea?diff=split#diff-3ee957c630ef81dd1016237f56c05e070eff7d84460f45ae3c25ab0441fa79b9L25",
                    "lines": [
                      {
                        "line": "var crypto = require('crypto'),",
                        "lineNumber": 24,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    shasum = crypto.createHash('sha1');",
                        "lineNumber": 25,
                        "lineChange": "removed"
                      },
                      {
                        "line": "shasum.update(req.body.password);",
                        "lineNumber": 27,
                        "lineChange": "removed"
                      },
                      {
                        "line": "var encodedPassword = shasum.digest('hex');",
                        "lineNumber": 28,
                        "lineChange": "removed"
                      },
                      {
                        "line": "var crypto = require('crypto');",
                        "lineNumber": 24,
                        "lineChange": "added"
                      },
                      {
                        "line": "const key = crypto.pbkdf2Sync(req.body.password, user.ddr.salt, 100000, 512, 'sha512');",
                        "lineNumber": 25,
                        "lineChange": "added"
                      },
                      {
                        "line": "var encodedPassword = key.toString('hex');",
                        "lineNumber": 26,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/coderaiser/cloudcmd/commit/1c3a97fbad9c22f94000e89384321642affbf80d?diff=split#diff-0502e5ba15e6b2caa99bf88e97eb4fef9994e885299ee3df4efd1b51a59e13f0L104",
                    "lines": [
                      {
                        "line": "sha     = crypto.createHash('sha1');",
                        "lineNumber": 103,
                        "lineChange": "removed"
                      },
                      {
                        "line": "sha     = crypto.createHash('sha512WithRSAEncryption');",
                        "lineNumber": 103,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Swizec/node-unshortener/commit/e9a84efd37b3d65ff14f44e11297b28b8987d38e?diff=split#diff-d94bcce9e1b6dc29137c2d0fe590e001ef186ba13f7ed1322296e70e7e0196b8L75",
                    "lines": [
                      {
                        "line": "memclient.set( md5(url.href), JSON.stringify(result), 1000);",
                        "lineNumber": 74,
                        "lineChange": "removed"
                      },
                      {
                        "line": "memclient.set( hash.sha256(url.href), JSON.stringify(result), 1000);",
                        "lineNumber": 74,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "switch to sha256",
                  "Files are now hashed with SHA512 instead of SHA1"
                ],
                "precision": "very-high",
                "repoDatasetSize": 101,
                "cwe": [
                  "CWE-916"
                ]
              }
            },
            {
              "id": "python/PT",
              "name": "PT",
              "shortDescription": {
                "text": "Path Traversal"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/pynickle/amazing-python/commit/80d2cc8c3e2c8330416b91f17a09b51830915b86?diff=split#diff-f626b00ab4d99fdbd4cb2bd61ae29469L118",
                    "lines": [
                      {
                        "line": "if request.method == \"POST\":",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try:",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "        f = request.files['file']",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "        filename = f.filename",
                        "lineNumber": 118,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        filename = secure_filename(f.filename)",
                        "lineNumber": 164,
                        "lineChange": "added"
                      },
                      {
                        "line": "        f.save(filename)",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "        with open(filename, \"r\", encoding=\"utf-8\") as f:",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "            success, errors = words_validate(f.read())",
                        "lineNumber": 167,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/WhaleShark-Team/cobra/commit/1ac467a2c1cf8427a5bf60031677817140fe181c?diff=split#diff-dc0ad7c98d7072655327746f1bc95b3aL72",
                    "lines": [
                      {
                        "line": "task_type = 1",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "# check if there is a file or gitlab url",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "if len(request.files) == 0:",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "    # no files, should check username and password",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "    task_type = 1",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "# there is a file, check file format and uncompress it.",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "task_type = 2",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "upload_src = request.files['file']",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "filename = str(int(time.time())) + '_' + upload_src.filename",
                        "lineNumber": 90,
                        "lineChange": "removed"
                      },
                      {
                        "line": "filename = str(int(time.time())) + '_' + secure_filename(upload_src.filename)",
                        "lineNumber": 91,
                        "lineChange": "added"
                      },
                      {
                        "line": "filepath = 'uploads/' + filename",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "upload_src.save(filepath)",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "# if you upload a rar file, upload_src.mimetype will returns \"application/octet-stream\"",
                        "lineNumber": 95,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Wordseer/wordseer/commit/ea92ade27f7a7a12d057a2b71daf9ffa1cf4385e?diff=split#diff-e86334029c6a0118169cce848ff474ddR13",
                    "lines": [
                      {
                        "line": " PROJECT_ROUTE = \"/projects/\"",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": " ",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "def allowed_file(filename):",
                        "lineNumber": 12,
                        "lineChange": "added"
                      },
                      {
                        "line": "    return os.path.splitext(filename)[1] in app.config[\"ALLOWED_EXTENSIONS\"]",
                        "lineNumber": 13,
                        "lineChange": "added"
                      },
                      {
                        "line": " @app.route(PROJECT_ROUTE, methods=[\"GET\", \"POST\"])",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": " def projects():",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "if request.method == \"POST\":",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "    uploaded_file = request.files[\"uploaded_file\"]",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if uploaded_file and allowed_file(uploaded_file.filename):",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "        filename = secure_filename(uploaded_file.filename)",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "        dest_path = os.path.join(app.config[\"UPLOAD_DIR\"],",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "            filename)",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "        uploaded_file.save(dest_path)",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "        #TODO: send the user somewhere useful?",
                        "lineNumber": 49,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "update test files for reports.",
                  "Python 3 support",
                  "Add test for handling upload files task"
                ],
                "precision": "very-high",
                "repoDatasetSize": 553,
                "cwe": [
                  "CWE-23"
                ]
              }
            },
            {
              "id": "php/ServerLeak",
              "name": "ServerLeak",
              "shortDescription": {
                "text": "Information Exposure"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "## Details\n\nSensitive data includes: personally identifiable information (PII) of employees, customers, users, or other third parties; financial information; code; intellectual property; or protected network information such as passwords. Exposure of sensitive information to an unauthorized actor occurs when any party who does not require this information for business purposes can remove this information from the secure network.\nConsequences of exposure can include holding it for ransom payment, identity theft, or access to other internal network resources-along with financial loss due to regulatory fines, court settlements, or cost to restore compromised systems. As most attackers aim to extract sensitive information, this CWE only describes exploits that take advantage of vulnerabilities related to how data is handled: the management, storage, transfer, or removal of sensitive information.\n\n### Best practices for prevention\n* Encrypt data at all times, whether in transit or at rest.\n* When transporting data, always use a secure protocol such as TLS.\n* Before collecting PII or financial information, consider whether there is a true business need for this information; similarly, before storing the data, ensure that there is an ongoing business need.\n* Classify all incoming data according to privacy and security guidelines to improve awareness of sensitive data.\n* Ensure that caching is disabled for all transactions involving sensitive information.\n* Store passwords with secure, salted hashing functions.\n* Apply a network-wide least-privilege policy so sensitive data is provided only to users with business need to know.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "php"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/apsdehal/Link/commit/45776f81b02ca39cbe592166cb9988fc09620e03?diff=split#diff-eca26158ad620b49b6a2ed2988992211L61",
                    "lines": [
                      {
                        "line": "    self::$recognized[$path] = $instanceOfHandler;",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "} catch ( Exception $e ){",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "  echo $e;",
                        "lineNumber": 61,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  echo '<pre>';",
                        "lineNumber": 59,
                        "lineChange": "added"
                      },
                      {
                        "line": "  print_r($e);",
                        "lineNumber": 60,
                        "lineChange": "added"
                      },
                      {
                        "line": "  die();",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "} \t",
                        "lineNumber": 63,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Cvar1984/LiteOTP/commit/4f37ee7de2f49546b0dfd86bff3c034f2c0f3955?diff=split#diff-60d8343421788cef497c9d81f8adccc5L99",
                    "lines": [
                      {
                        "line": "        exit(1);",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "} catch(Exception $e) {",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "    echo $e->xdebug_message;",
                        "lineNumber": 99,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    echo $e->getMessage().\"\\n\";",
                        "lineNumber": 99,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 100,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/walkor/Workerman/commit/3f8a1dfc4009ef81ec6d6a3a2655ea46918520dc?diff=split#diff-f56505fb2dd57f75fbc957145a0fff14L450",
                    "lines": [
                      {
                        "line": "    exit(250);",
                        "lineNumber": 451,
                        "lineChange": "none"
                      },
                      {
                        "line": "} catch (\\Error $e) {",
                        "lineNumber": 452,
                        "lineChange": "none"
                      },
                      {
                        "line": "    echo $e;",
                        "lineNumber": 450,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    Worker::log($e);",
                        "lineNumber": 453,
                        "lineChange": "added"
                      },
                      {
                        "line": "    exit(250);",
                        "lineNumber": 454,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 455,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Modify the error output",
                  "Fix exception to Command->error"
                ],
                "precision": "very-high",
                "repoDatasetSize": 93,
                "cwe": [
                  "CWE-200"
                ]
              }
            },
            {
              "id": "javascript/PT",
              "name": "PT",
              "shortDescription": {
                "text": "Path Traversal"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                "text": ""
              },
              "properties": {
                "tags": [
                  "javascript"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/how-to-firebase/fogo/commit/a3d5054fa9e7da0201e2709d847102a00a525067?diff=split#diff-ef1bae33e98527602bd4e6bfe2fe6c04747d71e6655a5c718f7100b844c9bb6eL158",
                    "lines": [
                      {
                        "line": "  return `/tmp/${path.parse(filename).base}`;",
                        "lineNumber": 157,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  return `/tmp/${Date.now()}`;",
                        "lineNumber": 157,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "function convertLocalFile(localFilename, versionName) {",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "  const cmd = getCmd(localFilename, versionName);",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return execPromise(cmd);",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "function getCmd(localFilename, versionName) {",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return `convert ${localFilename} -resize ${versionName}\\\\> ${localFilename}`;",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "function execPromise(cmd) {",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return new Promise((resolve, reject) =>",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "    exec(cmd, (error, stdout) => (error ? reject(error) : resolve(stdout)))",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "  );",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "function getDestination(filename, versionName) {",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "  const filenameParts = filename.split('/');",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "  filenameParts[filenameParts.length - 2] = versionName;",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return filenameParts.join('/');",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "function getFile(admin, filename) {",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return admin",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "    .storage()",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "    .bucket()",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "    .file(filename);",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "function unlinkPromise(localFilename) {",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return new Promise(",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "    (resolve, reject) => fs.unlink(localFilename, err => err && reject(err)) || resolve()",
                        "lineNumber": 190,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/zhoukekestar/modules/commit/b6c2fc78dc8679080b982124a24771f1466b2fb2?diff=split#diff-7347edae6e14bc50ee18f048e29145ce21cf3bb679d0391605c283ec246942bcL20",
                    "lines": [
                      {
                        "line": "res.sendFile(dir + '/' + req.params.id);",
                        "lineNumber": 19,
                        "lineChange": "removed"
                      },
                      {
                        "line": "// Test ok on winodws. Not sure that linux will be work ok.",
                        "lineNumber": 20,
                        "lineChange": "added"
                      },
                      {
                        "line": "res.sendFile((dir + '/' + req.params.id).replace(/\\//g, '\\\\\\\\'));",
                        "lineNumber": 21,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/NodeBB/NodeBB/commit/cacc732015c64bba55a6ab45510086febccfb1b2?diff=split#diff-300f765b568b38163933bfcd40c75fe91709a35e9a7522bca2f8c5fe4b19195aL102",
                    "lines": [
                      {
                        "line": "\t\t\tuploadUserPicture(req.user.uid, req.files.userPhoto.name, req.files.userPhoto.path, res);",
                        "lineNumber": 101,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\tuploadUserPicture(req.user.uid, path.extname(req.files.userPhoto.name), req.files.userPhoto.path, res);",
                        "lineNumber": 101,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\treturn;",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tvar absolutePath = path.join(global.configuration['ROOT_DIRECTORY'], global.nconf.get('upload_path'), path.basename(oldpicture));",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfs.unlink(absolutePath, function(err) {",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif(err) {\t\t\t\t",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tconsole.error('[%d] %s', Date.now(), + err);",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tuploadUserPicture(req.user.uid, path.extname(req.files.userPhoto.name), req.files.userPhoto.path, res);",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t});",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t});",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "});",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "function uploadUserPicture(uid, extension, tempPath, res) {",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif(!extension) {",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tres.send({",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\terror: 'Error uploading file! Error : Invalid extension!'",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t});",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn;",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar filename = uid + '-profileimg' + extension;",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar uploadPath = path.join(global.configuration['ROOT_DIRECTORY'], global.nconf.get('upload_path'), filename);",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// @todo move to proper logging code - this should only be temporary",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tconsole.log('Info: Attempting upload to: '+ uploadPath);",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar is = fs.createReadStream(tempPath);",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar os = fs.createWriteStream(uploadPath);",
                        "lineNumber": 133,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "- only tested with files",
                  "add integer support, and failing tests"
                ],
                "precision": "very-high",
                "repoDatasetSize": 760,
                "cwe": [
                  "CWE-23"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "php/TrojanSourceBidiControl",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "(BETA Suggestion) Bidi control characters on the line may be represented visually in a way that does not convey the actual semantics of the code to a human reviewer.",
            "markdown": "(BETA Suggestion) Bidi control characters on the line may be represented visually in a way that does not convey the actual semantics of the code to a human reviewer.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/php/test/Fixtures.php",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 38,
                  "endLine": 38,
                  "startColumn": 1,
                  "endColumn": 1037
                }
              }
            }
          ],
          "fingerprints": {
            "0": "34204d128c789701febade99269261d6e429d04b580e096f7f199a6fac49c74a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/php/test/Fixtures.php",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 1,
                            "endColumn": 1037
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 151,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ]
          }
        },
        {
          "ruleId": "python/TrojanSourceBidiControl",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "(BETA Suggestion) Bidi control characters on the line may be represented visually in a way that does not convey the actual semantics of the code to a human reviewer.",
            "markdown": "(BETA Suggestion) Bidi control characters on the line may be represented visually in a way that does not convey the actual semantics of the code to a human reviewer.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/py/TestClient.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 84,
                  "endLine": 84,
                  "startColumn": 1,
                  "endColumn": 69
                }
              }
            }
          ],
          "fingerprints": {
            "0": "487645061ff1bc6ff13e87a5b1c61613341d764eaf53c2a13dfb3953389dd85d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/py/TestClient.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 84,
                            "endLine": 84,
                            "startColumn": 1,
                            "endColumn": 69
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 201,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ]
          }
        },
        {
          "ruleId": "python/TrojanSourceBidiControl",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "(BETA Suggestion) Bidi control characters on the line may be represented visually in a way that does not convey the actual semantics of the code to a human reviewer.",
            "markdown": "(BETA Suggestion) Bidi control characters on the line may be represented visually in a way that does not convey the actual semantics of the code to a human reviewer.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/py/TestClient.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 85,
                  "endLine": 85,
                  "startColumn": 1,
                  "endColumn": 24
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f853dd87b76541e005b3b9225dd18dbe15f6fcc8faa66a72d0cca32474d0ee55"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/py/TestClient.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 85,
                            "endLine": 85,
                            "startColumn": 1,
                            "endColumn": 24
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 201,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ]
          }
        },
        {
          "ruleId": "go/TrojanSourceBidiControl",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "(BETA Suggestion) Bidi control characters on the line may be represented visually in a way that does not convey the actual semantics of the code to a human reviewer.",
            "markdown": "(BETA Suggestion) Bidi control characters on the line may be represented visually in a way that does not convey the actual semantics of the code to a human reviewer.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/go/test/tests/thrifttest_driver.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 68,
                  "endLine": 68,
                  "startColumn": 1,
                  "endColumn": 64
                }
              }
            }
          ],
          "fingerprints": {
            "0": "53cf4c2787345e4fb6a24e7eca8ef8b532b94cd2d40345067e09c9ea51e1e6de"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/go/test/tests/thrifttest_driver.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 1,
                            "endColumn": 64
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 201,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ]
          }
        },
        {
          "ruleId": "go/TrojanSourceBidiControl",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "(BETA Suggestion) Bidi control characters on the line may be represented visually in a way that does not convey the actual semantics of the code to a human reviewer.",
            "markdown": "(BETA Suggestion) Bidi control characters on the line may be represented visually in a way that does not convey the actual semantics of the code to a human reviewer.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/go/test/tests/thrifttest_driver.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 69,
                  "endLine": 69,
                  "startColumn": 1,
                  "endColumn": 19
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e3c6ed5dd92a905e0cc54d6fd127f7414b9865df4fc8001e79dd5a494f64bba8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/go/test/tests/thrifttest_driver.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 69,
                            "endLine": 69,
                            "startColumn": 1,
                            "endColumn": 19
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 201,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ]
          }
        },
        {
          "ruleId": "go/XSS/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Unsanitized input from the request body flows into Write, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[the request body](0)",
              "[flows](1),(2),(3),(4)",
              "[Write](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/go/thrift/protocol_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 67,
                  "endLine": 67,
                  "startColumn": 3,
                  "endColumn": 10
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d0328ccbf0dddd50249615bbc4d5c4ed9c6639f2ea0f950dab02854d4d282cf1",
            "1": "ba4e4356.73eb5804.45df3e14.c19d78c5.78b40541.57f89f2f.981a2d61.e01cd24f.38552e76.73eb5804.45df3e14.62dc6a46.6b6807dc.57f89f2f.981a2d61.61d243d0"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/go/thrift/protocol_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 64,
                            "endLine": 64,
                            "startColumn": 29,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/go/thrift/protocol_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 64,
                            "endLine": 64,
                            "startColumn": 29,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/go/thrift/protocol_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 64,
                            "endLine": 64,
                            "startColumn": 14,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/go/thrift/protocol_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 64,
                            "endLine": 64,
                            "startColumn": 2,
                            "endColumn": 5
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/go/thrift/protocol_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 67,
                            "endLine": 67,
                            "startColumn": 11,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/go/thrift/protocol_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 67,
                            "endLine": 67,
                            "startColumn": 3,
                            "endColumn": 10
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 402,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "go/XSS/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Unsanitized input from the request body flows into Write, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[the request body](0)",
              "[flows](1),(2),(3),(4)",
              "[Write](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/go/thrift/protocol_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 70,
                  "endLine": 70,
                  "startColumn": 3,
                  "endColumn": 10
                }
              }
            }
          ],
          "fingerprints": {
            "0": "aedfec8ba5b242edff843ff3d483508ef4b1c511e83ff95e448d4c3fee95fbcc",
            "1": "ba4e4356.73eb5804.45df3e14.c19d78c5.78b40541.57f89f2f.981a2d61.e01cd24f.38552e76.73eb5804.45df3e14.62dc6a46.6b6807dc.57f89f2f.981a2d61.61d243d0"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/go/thrift/protocol_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 64,
                            "endLine": 64,
                            "startColumn": 29,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/go/thrift/protocol_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 64,
                            "endLine": 64,
                            "startColumn": 29,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/go/thrift/protocol_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 64,
                            "endLine": 64,
                            "startColumn": 14,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/go/thrift/protocol_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 64,
                            "endLine": 64,
                            "startColumn": 2,
                            "endColumn": 5
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/go/thrift/protocol_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 11,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/go/thrift/protocol_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 3,
                            "endColumn": 10
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 402,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "go/XSS/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Unsanitized input from the request body flows into Write, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[the request body](0)",
              "[flows](1),(2),(3),(4)",
              "[Write](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/go/thrift/protocol_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 78,
                  "endLine": 78,
                  "startColumn": 3,
                  "endColumn": 10
                }
              }
            }
          ],
          "fingerprints": {
            "0": "267532ce698ac3e9a0e46f43038c3c3d052672820268b183fc496c34e3728867",
            "1": "ba4e4356.73eb5804.45df3e14.c19d78c5.78b40541.57f89f2f.981a2d61.e01cd24f.38552e76.73eb5804.45df3e14.62dc6a46.6b6807dc.57f89f2f.981a2d61.61d243d0"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/go/thrift/protocol_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 29,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/go/thrift/protocol_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 29,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/go/thrift/protocol_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 14,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/go/thrift/protocol_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 2,
                            "endColumn": 5
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/go/thrift/protocol_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 78,
                            "endLine": 78,
                            "startColumn": 11,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/go/thrift/protocol_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 78,
                            "endLine": 78,
                            "startColumn": 3,
                            "endColumn": 10
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 402,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "go/XSS/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Unsanitized input from the request body flows into Write, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[the request body](0)",
              "[flows](1),(2),(3),(4)",
              "[Write](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/go/thrift/protocol_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 81,
                  "endLine": 81,
                  "startColumn": 3,
                  "endColumn": 10
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3eba30825c5cb269ae8b0e6311f036bdc21fc3ee2ccd9cbf5517f95fae8f9ff5",
            "1": "ba4e4356.73eb5804.45df3e14.c19d78c5.78b40541.57f89f2f.981a2d61.e01cd24f.38552e76.73eb5804.45df3e14.62dc6a46.6b6807dc.57f89f2f.981a2d61.61d243d0"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/go/thrift/protocol_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 29,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/go/thrift/protocol_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 29,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/go/thrift/protocol_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 14,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/go/thrift/protocol_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 2,
                            "endColumn": 5
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/go/thrift/protocol_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 81,
                            "endLine": 81,
                            "startColumn": 11,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/go/thrift/protocol_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 81,
                            "endLine": 81,
                            "startColumn": 3,
                            "endColumn": 10
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 402,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/go/src/common/client.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 80,
                  "endLine": 80,
                  "startColumn": 34,
                  "endColumn": 58
                }
              }
            }
          ],
          "fingerprints": {
            "0": "83ef0e5963e366583cea3cf5dafda476abcea1b13f17711aefdc354ec717f16f",
            "1": "424eddda.9bf9da8e.8d277033.bfac11f0.6ee851a6.6c8feca2.8ee950b3.1f55c1aa.424eddda.9bf9da8e.8d277033.bfac11f0.a0280c3b.6c8feca2.8ee950b3.1f55c1aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/go/src/common/client.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 34,
                            "endColumn": 58
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 351,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "csharp/NoHardcodedCredentials/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "(BETA Suggestion) Do not hardcode credentials in code. Found hardcoded credential used in X509Certificate2.",
            "markdown": "(BETA Suggestion) Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[X509Certificate2](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/csharp/TestClient.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 64,
                  "endLine": 64,
                  "startColumn": 83,
                  "endColumn": 91
                }
              }
            }
          ],
          "fingerprints": {
            "0": "471de2f234f711fa3d61fb48a1b3bd68bca5030319469cb81828690060dfe51d",
            "1": "9dcbd817.978accee.4d16229b.a090ec1d.75f2f31c.9814f0b9.f588e51e.8e772e22.9dcbd817.978accee.4d16229b.a090ec1d.75f2f31c.9814f0b9.f588e51e.8e772e22"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/csharp/TestClient.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 64,
                            "endLine": 64,
                            "startColumn": 83,
                            "endColumn": 91
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/csharp/TestClient.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 64,
                            "endLine": 64,
                            "startColumn": 56,
                            "endColumn": 72
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 352,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "csharp/NoHardcodedCredentials/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "(BETA Suggestion) Do not hardcode credentials in code. Found hardcoded credential used in X509Certificate2.",
            "markdown": "(BETA Suggestion) Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[X509Certificate2](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/netcore/Client/TestClient.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 147,
                  "endLine": 147,
                  "startColumn": 63,
                  "endColumn": 71
                }
              }
            }
          ],
          "fingerprints": {
            "0": "acf6373f6007daaaf0591efd8af2aed4719849da4fbcbd7ee3eca053e0f8ddc3",
            "1": "9dcbd817.978accee.4d16229b.a090ec1d.75f2f31c.9814f0b9.f588e51e.8e772e22.9dcbd817.978accee.4d16229b.a090ec1d.75f2f31c.9814f0b9.f588e51e.8e772e22"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/netcore/Client/TestClient.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 147,
                            "endLine": 147,
                            "startColumn": 63,
                            "endColumn": 71
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/netcore/Client/TestClient.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 147,
                            "endLine": 147,
                            "startColumn": 32,
                            "endColumn": 48
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 352,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "csharp/NoHardcodedCredentials/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "(BETA Suggestion) Do not hardcode credentials in code. Found hardcoded credential used in X509Certificate2.",
            "markdown": "(BETA Suggestion) Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[X509Certificate2](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/netcore/Server/TestServer.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 490,
                  "endLine": 490,
                  "startColumn": 59,
                  "endColumn": 67
                }
              }
            }
          ],
          "fingerprints": {
            "0": "781c200720f33b05dcd7b249f81229a1bd945c763759c242c73505527aaea0c2",
            "1": "9dcbd817.978accee.4d16229b.a090ec1d.75f2f31c.9814f0b9.f588e51e.8e772e22.9dcbd817.978accee.4d16229b.a090ec1d.75f2f31c.9814f0b9.f588e51e.8e772e22"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/netcore/Server/TestServer.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 490,
                            "endLine": 490,
                            "startColumn": 59,
                            "endColumn": 67
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/netcore/Server/TestServer.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 490,
                            "endLine": 490,
                            "startColumn": 28,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 352,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "csharp/NoHardcodedCredentials/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "(BETA Suggestion) Do not hardcode credentials in code. Found hardcoded credential used in X509Certificate2.",
            "markdown": "(BETA Suggestion) Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[X509Certificate2](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/netstd/Server/TestServer.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 559,
                  "endLine": 559,
                  "startColumn": 59,
                  "endColumn": 67
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b74c4d7617c8197109ae3fdd4d204167e765ff365c40ac23d3d909d23ad4735e",
            "1": "9dcbd817.978accee.4d16229b.a090ec1d.75f2f31c.9814f0b9.f588e51e.8e772e22.9dcbd817.978accee.4d16229b.a090ec1d.75f2f31c.9814f0b9.f588e51e.8e772e22"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/netstd/Server/TestServer.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 559,
                            "endLine": 559,
                            "startColumn": 59,
                            "endColumn": 67
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/netstd/Server/TestServer.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 559,
                            "endLine": 559,
                            "startColumn": 28,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 352,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "csharp/NoHardcodedCredentials/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "(BETA Suggestion) Do not hardcode credentials in code. Found hardcoded credential used in X509Certificate2.",
            "markdown": "(BETA Suggestion) Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[X509Certificate2](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/csharp/TestServer.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 458,
                  "endLine": 458,
                  "startColumn": 114,
                  "endColumn": 122
                }
              }
            }
          ],
          "fingerprints": {
            "0": "bd353fb94b7f5754c633de8f3f646d2736e9f9de8229972f4244b9b499f39528",
            "1": "9dcbd817.978accee.4d16229b.a090ec1d.75f2f31c.9814f0b9.f588e51e.8e772e22.9dcbd817.978accee.4d16229b.a090ec1d.75f2f31c.9814f0b9.f588e51e.8e772e22"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/csharp/TestServer.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 458,
                            "endLine": 458,
                            "startColumn": 114,
                            "endColumn": 122
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/csharp/TestServer.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 458,
                            "endLine": 458,
                            "startColumn": 87,
                            "endColumn": 103
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 352,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "csharp/NoHardcodedCredentials/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "(BETA Suggestion) Do not hardcode credentials in code. Found hardcoded credential used in X509Certificate2.",
            "markdown": "(BETA Suggestion) Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[X509Certificate2](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/netstd/Client/TestClient.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 229,
                  "endLine": 229,
                  "startColumn": 63,
                  "endColumn": 71
                }
              }
            }
          ],
          "fingerprints": {
            "0": "433acc434455673921cb75b5f4a0877c59dbbeb31754e3f7a320b801b7523e52",
            "1": "9dcbd817.978accee.4d16229b.a090ec1d.75f2f31c.9814f0b9.f588e51e.8e772e22.9dcbd817.978accee.4d16229b.a090ec1d.75f2f31c.9814f0b9.f588e51e.8e772e22"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/netstd/Client/TestClient.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 229,
                            "endLine": 229,
                            "startColumn": 63,
                            "endColumn": 71
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/netstd/Client/TestClient.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 229,
                            "endLine": 229,
                            "startColumn": 32,
                            "endColumn": 48
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 352,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "csharp/AntiforgeryTokenDisabled/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "(BETA Suggestion) This ASP.NET MVC action should use an anti-forgery validation attribute. Not using this attribute disables Cross Site Request Forgery (CSRF) protection and allows CSRF attacks.",
            "markdown": "(BETA Suggestion) This {0} should use an anti-forgery validation attribute. Not using this attribute disables Cross Site Request Forgery (CSRF) protection and allows CSRF attacks.",
            "arguments": [
              "[ASP.NET MVC action](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/csharp/test/ThriftMVCTest/Controllers/HomeController.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 31,
                  "endLine": 31,
                  "startColumn": 29,
                  "endColumn": 34
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9ccb8e1f8a8617262b9f8b03a6a48b389322752fba284f7c4440697a976a3fdd",
            "1": "c44d6ed0.69639c37.1d318ef7.945116d4.a8a6a553.7e8ec1cc.ce0185b2.6e9d66df.c44d6ed0.69639c37.1d318ef7.2a0f755e.a8a6a553.7e8ec1cc.ce0185b2.ea666449"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/csharp/test/ThriftMVCTest/Controllers/HomeController.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 29,
                            "endColumn": 34
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "csharp/AntiforgeryTokenDisabled/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "(BETA Suggestion) This ASP.NET MVC action should use an anti-forgery validation attribute. Not using this attribute disables Cross Site Request Forgery (CSRF) protection and allows CSRF attacks.",
            "markdown": "(BETA Suggestion) This {0} should use an anti-forgery validation attribute. Not using this attribute disables Cross Site Request Forgery (CSRF) protection and allows CSRF attacks.",
            "arguments": [
              "[ASP.NET MVC action](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/csharp/test/ThriftMVCTest/Controllers/HomeController.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 36,
                  "endLine": 36,
                  "startColumn": 41,
                  "endColumn": 56
                }
              }
            }
          ],
          "fingerprints": {
            "0": "97055e60f54d12ab65b87813cec8eb5f204ef80882c5bea103f60fbf1fbaf421",
            "1": "c44d6ed0.7153de55.1d318ef7.3f2be8ed.a8a6a553.7e8ec1cc.ce0185b2.6e9d66df.c44d6ed0.7153de55.1d318ef7.2a0f755e.a8a6a553.7e8ec1cc.ce0185b2.ea666449"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/csharp/test/ThriftMVCTest/Controllers/HomeController.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 41,
                            "endColumn": 56
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "csharp/AntiforgeryTokenDisabled/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "(BETA Suggestion) This ASP.NET MVC action should use an anti-forgery validation attribute. Not using this attribute disables Cross Site Request Forgery (CSRF) protection and allows CSRF attacks.",
            "markdown": "(BETA Suggestion) This {0} should use an anti-forgery validation attribute. Not using this attribute disables Cross Site Request Forgery (CSRF) protection and allows CSRF attacks.",
            "arguments": [
              "[ASP.NET MVC action](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/csharp/test/ThriftMVCTest/Controllers/HomeController.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53,
                  "startColumn": 29,
                  "endColumn": 43
                }
              }
            }
          ],
          "fingerprints": {
            "0": "20c037e3ee761e03f18054102b2c57b1712217c8d32c068dac8bc06a0d6ea8b4",
            "1": "c44d6ed0.69639c37.1d318ef7.2a0f755e.a8a6a553.7e8ec1cc.ce0185b2.6e9d66df.c44d6ed0.69639c37.1d318ef7.2a0f755e.a8a6a553.7e8ec1cc.ce0185b2.ea666449"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/csharp/test/ThriftMVCTest/Controllers/HomeController.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 53,
                            "endLine": 53,
                            "startColumn": 29,
                            "endColumn": 43
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "javascript/XSS",
          "ruleIndex": 7,
          "level": "error",
          "message": {
            "text": "Unsanitized input from the request URL flows into end, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[the request URL](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9)",
              "[end](10)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/nodejs/lib/thrift/web_server.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 377,
                  "endLine": 377,
                  "startColumn": 20,
                  "endColumn": 23
                }
              }
            }
          ],
          "fingerprints": {
            "0": "cb7e5ec86f488e1d7808f63e45e118aa8ec8b0d6fa785e3a2158277cd3acbbcc",
            "1": "bc441d81.7d4b7307.607187b5.40e287cf.546b9441.756a1932.83265159.ef91db1e.656c2687.7d4b7307.ddfea499.59162423.b6be8b13.98c7c24d.83265159.1cce3d77"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/nodejs/lib/thrift/web_server.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 356,
                            "endLine": 356,
                            "startColumn": 33,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/nodejs/lib/thrift/web_server.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 356,
                            "endLine": 356,
                            "startColumn": 33,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/nodejs/lib/thrift/web_server.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 356,
                            "endLine": 356,
                            "startColumn": 15,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/nodejs/lib/thrift/web_server.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 356,
                            "endLine": 356,
                            "startColumn": 9,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/nodejs/lib/thrift/web_server.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 357,
                            "endLine": 357,
                            "startColumn": 24,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/nodejs/lib/thrift/web_server.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 357,
                            "endLine": 357,
                            "startColumn": 9,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/nodejs/lib/thrift/web_server.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 358,
                            "endLine": 358,
                            "startColumn": 10,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/nodejs/lib/thrift/web_server.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 372,
                            "endLine": 372,
                            "startColumn": 24,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/nodejs/lib/thrift/web_server.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 374,
                            "endLine": 374,
                            "startColumn": 75,
                            "endColumn": 78
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/nodejs/lib/thrift/web_server.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 377,
                            "endLine": 377,
                            "startColumn": 24,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/nodejs/lib/thrift/web_server.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 377,
                            "endLine": 377,
                            "startColumn": 20,
                            "endColumn": 23
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 901,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              },
              {
                "label": true,
                "type": "commonlyFixed"
              }
            ]
          }
        },
        {
          "ruleId": "javascript/HttpToHttps",
          "ruleIndex": 8,
          "level": "warning",
          "message": {
            "text": "http.request uses HTTP which is an insecure protocol and should not be used in code due to cleartext transmission of information. Data in cleartext in a communication channel can be sniffed by unauthorized actors. Consider using the https module instead.",
            "markdown": "{0} uses HTTP which is an insecure protocol and should not be used in code due to cleartext transmission of information. Data in cleartext in a communication channel can be sniffed by unauthorized actors. Consider using the https module instead.",
            "arguments": [
              "[http.request](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/nodejs/lib/thrift/http_connection.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 223,
                  "endLine": 223,
                  "startColumn": 7,
                  "endColumn": 19
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a3c1d67d457e79c5c9e7dc1003e2fc69b410d65aac043bca24bcfd6479234865",
            "1": "84a53940.4773f344.607187b5.d7919eeb.782cdf5e.98c7c24d.dd97cc6a.ae94f388.84a53940.4773f344.607187b5.d7919eeb.782cdf5e.98c7c24d.dd97cc6a.ae94f388"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/nodejs/lib/thrift/http_connection.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 223,
                            "endLine": 223,
                            "startColumn": 7,
                            "endColumn": 19
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 501,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "javascript/HttpToHttps",
          "ruleIndex": 8,
          "level": "warning",
          "message": {
            "text": "http.createServer uses HTTP which is an insecure protocol and should not be used in code due to cleartext transmission of information. Data in cleartext in a communication channel can be sniffed by unauthorized actors. Consider using the https module instead.",
            "markdown": "{0} uses HTTP which is an insecure protocol and should not be used in code due to cleartext transmission of information. Data in cleartext in a communication channel can be sniffed by unauthorized actors. Consider using the https module instead.",
            "arguments": [
              "[http.createServer](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/nodejs/lib/thrift/web_server.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 486,
                  "endLine": 486,
                  "startColumn": 14,
                  "endColumn": 31
                }
              }
            }
          ],
          "fingerprints": {
            "0": "574cb242186bdfa1a9dc2f8d2f8e37debf84be8b840fe7f14f2d88cf3311c351",
            "1": "6638fd89.7d4b7307.eb86c6b6.bf599f91.3a62c696.98c7c24d.df7e59ba.545e9171.6638fd89.7d4b7307.eb86c6b6.bf599f91.3a62c696.98c7c24d.df7e59ba.545e9171"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/nodejs/lib/thrift/web_server.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 486,
                            "endLine": 486,
                            "startColumn": 14,
                            "endColumn": 31
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 551,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "javascript/NodeBufferNoOffset",
          "ruleIndex": 9,
          "level": "warning",
          "message": {
            "text": "Setting noAssert to true (in writeUInt16BE) allows offset to be beyond the end of the buffer.",
            "markdown": "Setting noAssert to {0} (in {1}) allows offset to be beyond the end of the {2}.",
            "arguments": [
              "[true](0)",
              "[writeUInt16BE](1)",
              "[buffer](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/nodejs/lib/thrift/web_server.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 96,
                  "endLine": 96,
                  "startColumn": 15,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2c66cc52a8e03d71210525cc592544d45e8dbd5cb05b7bc5c3b535aa2e706948",
            "1": "3df95e84.4773f344.223a435d.7ddb3752.ef9f7d82.8020cfdf.cd61fc56.fd61ca83.3df95e84.4773f344.223a435d.7ddb3752.ef9f7d82.0ef37289.cd61fc56.fd61ca83"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/nodejs/lib/thrift/web_server.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 96,
                            "endLine": 96,
                            "startColumn": 45,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/nodejs/lib/thrift/web_server.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 96,
                            "endLine": 96,
                            "startColumn": 15,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/nodejs/lib/thrift/web_server.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 86,
                            "endLine": 86,
                            "startColumn": 23,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 551,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "javascript/NodeBufferNoOffset",
          "ruleIndex": 9,
          "level": "warning",
          "message": {
            "text": "Setting noAssert to true (in writeUInt32BE) allows offset to be beyond the end of the buffer.",
            "markdown": "Setting noAssert to {0} (in {1}) allows offset to be beyond the end of the {2}.",
            "arguments": [
              "[true](0)",
              "[writeUInt32BE](1)",
              "[buffer](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/nodejs/lib/thrift/web_server.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 100,
                  "endLine": 100,
                  "startColumn": 15,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b68a02820d7888c9426696cf137884dd065ef8cec415d54d00ef81471e0fbb2a",
            "1": "5e7f8b57.4773f344.223a435d.c8688b2b.ef9f7d82.8020cfdf.cd61fc56.9a818f27.5e7f8b57.4773f344.223a435d.c8688b2b.ef9f7d82.0ef37289.cd61fc56.9a818f27"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/nodejs/lib/thrift/web_server.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 35,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/nodejs/lib/thrift/web_server.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 15,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/nodejs/lib/thrift/web_server.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 86,
                            "endLine": 86,
                            "startColumn": 23,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 551,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "javascript/NodeBufferNoOffset",
          "ruleIndex": 9,
          "level": "warning",
          "message": {
            "text": "Setting noAssert to true (in writeUInt32BE) allows offset to be beyond the end of the buffer.",
            "markdown": "Setting noAssert to {0} (in {1}) allows offset to be beyond the end of the {2}.",
            "arguments": [
              "[true](0)",
              "[writeUInt32BE](1)",
              "[buffer](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/nodejs/lib/thrift/web_server.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 101,
                  "endLine": 101,
                  "startColumn": 15,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4e468e132aa01f529d2aeb25497f00e51b45b9d7eb19a0cd3d7f34a573af37a0",
            "1": "3df95e84.4773f344.223a435d.c8688b2b.ef9f7d82.8020cfdf.cd61fc56.9a818f27.3df95e84.4773f344.223a435d.c8688b2b.ef9f7d82.0ef37289.cd61fc56.9a818f27"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/nodejs/lib/thrift/web_server.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 101,
                            "endLine": 101,
                            "startColumn": 45,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/nodejs/lib/thrift/web_server.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 101,
                            "endLine": 101,
                            "startColumn": 15,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/nodejs/lib/thrift/web_server.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 86,
                            "endLine": 86,
                            "startColumn": 23,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 551,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureHash",
          "ruleIndex": 10,
          "level": "warning",
          "message": {
            "text": "The MD5 hash (used in java.security.MessageDigest.getInstance) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The {0} hash (used in {1}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[MD5](0)",
              "[java.security.MessageDigest.getInstance](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contrib/thrift-maven-plugin/src/main/java/org/apache/thrift/maven/AbstractThriftMojo.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 344,
                  "endLine": 344,
                  "startColumn": 36,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "17f8d679aa1f6435be6685e26cba64d29ea9ee7e1c63020521465b80adc0ab7e",
            "1": "8df8fa68.0f6054fa.19694eb9.44ab356c.6aa38729.c80ba7fb.2a1a68a1.41ec51de.8df8fa68.0f6054fa.19694eb9.44ab356c.6aa38729.c80ba7fb.df7e59ba.41ec51de"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "contrib/thrift-maven-plugin/src/main/java/org/apache/thrift/maven/AbstractThriftMojo.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 344,
                            "endLine": 344,
                            "startColumn": 62,
                            "endColumn": 67
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "contrib/thrift-maven-plugin/src/main/java/org/apache/thrift/maven/AbstractThriftMojo.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 344,
                            "endLine": 344,
                            "startColumn": 36,
                            "endColumn": 61
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 551,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "go/TooPermissiveTrustManager",
          "ruleIndex": 11,
          "level": "warning",
          "message": {
            "text": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "markdown": "TrustManager might be too permissive: The client will accept any certificate and any host name in that certificate, making it susceptible to man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tutorial/go/src/client.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 85,
                  "endLine": 85,
                  "startColumn": 3,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "78a7ffc539b31e687560b20de2637ace0557ff5ba71aa353eca55e85cfa71e2d",
            "1": "9cf53582.9bf9da8e.8d277033.e22980a8.c8f211d9.67ab4541.860c51ff.91f18234.b8a4ff30.9bf9da8e.8d277033.e22980a8.a0280c3b.67ab4541.f563e0a5.91f18234"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tutorial/go/src/client.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 85,
                            "endLine": 85,
                            "startColumn": 3,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 501,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 12,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.io.FileInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1)",
              "[java.io.FileInputStream](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/java/src/test/java/org/apache/thrift/test/ReadStruct.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 41,
                  "endLine": 41,
                  "startColumn": 60,
                  "endColumn": 75
                }
              }
            }
          ],
          "fingerprints": {
            "0": "486aee308b236b046d976ce290e80edafaa6a6d734a152ee1bc934b0b9d6d6f2",
            "1": "682e2f2f.ff76257e.1b9a1d8e.6c52ae28.025462d2.117e971f.55c6f621.6f114b23.8df8fa68.7f413d6f.622565c7.e22980a8.a7b964d9.730a5695.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/java/src/test/java/org/apache/thrift/test/ReadStruct.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 76,
                            "endColumn": 83
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/java/src/test/java/org/apache/thrift/test/ReadStruct.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 76,
                            "endColumn": 83
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/java/src/test/java/org/apache/thrift/test/ReadStruct.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 60,
                            "endColumn": 75
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 352,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 12,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.io.FileInputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1)",
              "[java.io.FileInputStream](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/java/test/org/apache/thrift/test/ReadStruct.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 40,
                  "endLine": 40,
                  "startColumn": 75,
                  "endColumn": 90
                }
              }
            }
          ],
          "fingerprints": {
            "0": "868016604996997a9dea8a83d4309935743cc173719fd1e416cd5961cd0f0d05",
            "1": "682e2f2f.ff76257e.1b9a1d8e.6c52ae28.025462d2.117e971f.55c6f621.6f114b23.8df8fa68.7f413d6f.622565c7.e22980a8.a7b964d9.730a5695.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/java/test/org/apache/thrift/test/ReadStruct.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 91,
                            "endColumn": 98
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/java/test/org/apache/thrift/test/ReadStruct.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 91,
                            "endColumn": 98
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/java/test/org/apache/thrift/test/ReadStruct.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 75,
                            "endColumn": 90
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 352,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 12,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.io.FileOutputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1)",
              "[java.io.FileOutputStream](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/java/src/test/java/org/apache/thrift/test/WriteStruct.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 40,
                  "endLine": 40,
                  "startColumn": 61,
                  "endColumn": 77
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ca60c0264c0d4984f2a71e733cf32beafe65aa9de76f96a97296fdd8d8782e0e",
            "1": "682e2f2f.ff76257e.1b9a1d8e.6c52ae28.025462d2.117e971f.df7e59ba.203bd690.8df8fa68.7f413d6f.622565c7.e22980a8.025462d2.730a5695.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/java/src/test/java/org/apache/thrift/test/WriteStruct.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 78,
                            "endColumn": 85
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/java/src/test/java/org/apache/thrift/test/WriteStruct.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 78,
                            "endColumn": 85
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/java/src/test/java/org/apache/thrift/test/WriteStruct.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 61,
                            "endColumn": 77
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 352,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 12,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a command line argument flows into java.io.FileOutputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1)",
              "[java.io.FileOutputStream](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/java/test/org/apache/thrift/test/WriteStruct.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 38,
                  "endLine": 38,
                  "startColumn": 76,
                  "endColumn": 92
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0b8c4cf2239c3652a787506e99d15d22f8dfb6b26ff753fbd35e4e3d5e3a1a37",
            "1": "682e2f2f.ff76257e.1b9a1d8e.6c52ae28.025462d2.117e971f.df7e59ba.203bd690.8df8fa68.7f413d6f.622565c7.e22980a8.025462d2.730a5695.377b98a3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/java/test/org/apache/thrift/test/WriteStruct.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 93,
                            "endColumn": 100
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/java/test/org/apache/thrift/test/WriteStruct.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 93,
                            "endColumn": 100
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/java/test/org/apache/thrift/test/WriteStruct.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 76,
                            "endColumn": 92
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 352,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket",
          "ruleIndex": 13,
          "level": "warning",
          "message": {
            "text": "Reading from an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Reading from](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/java/src/org/apache/thrift/transport/TSocket.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 222,
                  "endLine": 222,
                  "startColumn": 46,
                  "endColumn": 68
                }
              }
            }
          ],
          "fingerprints": {
            "0": "dabdb43bff500daee96cb8df61850ca6cb0a74fe4846fc7b9bf08e4de64173e6",
            "1": "15f23729.1831e1cc.bb993ef0.4cb5bde1.eb74cf06.7fda7c5e.f8175e12.0f01a149.15f23729.1831e1cc.bb993ef0.4cb5bde1.4a9c8cbc.7fda7c5e.f8175e12.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/java/src/org/apache/thrift/transport/TSocket.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 222,
                            "endLine": 222,
                            "startColumn": 46,
                            "endColumn": 68
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/java/src/org/apache/thrift/transport/TSocket.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 222,
                            "endLine": 222,
                            "startColumn": 46,
                            "endColumn": 68
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 552,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket",
          "ruleIndex": 13,
          "level": "warning",
          "message": {
            "text": "Reading from an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Reading from](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/java/src/main/java/org/apache/thrift/transport/TSocket.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 227,
                  "endLine": 227,
                  "startColumn": 46,
                  "endColumn": 68
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2a2382eb0f6fca9f3e6ede71764cb21a08a6bf1217e8dd7f3103304db91f4168",
            "1": "15f23729.1831e1cc.bb993ef0.4cb5bde1.eb74cf06.7fda7c5e.f8175e12.0f01a149.15f23729.1831e1cc.bb993ef0.4cb5bde1.4a9c8cbc.7fda7c5e.f8175e12.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/java/src/main/java/org/apache/thrift/transport/TSocket.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 227,
                            "endLine": 227,
                            "startColumn": 46,
                            "endColumn": 68
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/java/src/main/java/org/apache/thrift/transport/TSocket.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 227,
                            "endLine": 227,
                            "startColumn": 46,
                            "endColumn": 68
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 552,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket",
          "ruleIndex": 13,
          "level": "warning",
          "message": {
            "text": "Writing to an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Writing to](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/java/src/org/apache/thrift/transport/TSocket.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 223,
                  "endLine": 223,
                  "startColumn": 48,
                  "endColumn": 71
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5f9a26437022d474cb0e7563bce2c369f447f1b8fa533096dbdaad00bfa80fef",
            "1": "15f23729.67ecd964.bb993ef0.4cb5bde1.18a1aab6.7fda7c5e.e09198b1.0f01a149.15f23729.67ecd964.bb993ef0.4cb5bde1.18a1aab6.7fda7c5e.8c5f03ec.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/java/src/org/apache/thrift/transport/TSocket.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 223,
                            "endLine": 223,
                            "startColumn": 48,
                            "endColumn": 71
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/java/src/org/apache/thrift/transport/TSocket.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 223,
                            "endLine": 223,
                            "startColumn": 48,
                            "endColumn": 71
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 552,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket",
          "ruleIndex": 13,
          "level": "warning",
          "message": {
            "text": "Writing to an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Writing to](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/java/src/main/java/org/apache/thrift/transport/TSocket.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 228,
                  "endLine": 228,
                  "startColumn": 48,
                  "endColumn": 71
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2155af3e501003fb3456aeca2c679e075bf33bd87bbd9f10a8d9c8b14265de3f",
            "1": "15f23729.67ecd964.bb993ef0.4cb5bde1.18a1aab6.7fda7c5e.e09198b1.0f01a149.15f23729.67ecd964.bb993ef0.4cb5bde1.18a1aab6.7fda7c5e.8c5f03ec.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/java/src/main/java/org/apache/thrift/transport/TSocket.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 228,
                            "endLine": 228,
                            "startColumn": 48,
                            "endColumn": 71
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/java/src/main/java/org/apache/thrift/transport/TSocket.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 228,
                            "endLine": 228,
                            "startColumn": 48,
                            "endColumn": 71
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 552,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "javascript/TrojanSourceBidiControl",
          "ruleIndex": 14,
          "level": "note",
          "message": {
            "text": "(BETA Suggestion) Bidi control characters on the line may be represented visually in a way that does not convey the actual semantics of the code to a human reviewer.",
            "markdown": "(BETA Suggestion) Bidi control characters on the line may be represented visually in a way that does not convey the actual semantics of the code to a human reviewer.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/nodets/test/test-cases.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 23,
                  "endLine": 23,
                  "startColumn": 1,
                  "endColumn": 66
                }
              }
            }
          ],
          "fingerprints": {
            "0": "64122f21f68e9e5780c3b1cfe0c082eb31e8b634438c7b696780e9f2ad37df01"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/nodets/test/test-cases.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 23,
                            "endLine": 23,
                            "startColumn": 1,
                            "endColumn": 66
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 203,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ]
          }
        },
        {
          "ruleId": "javascript/TrojanSourceBidiControl",
          "ruleIndex": 14,
          "level": "note",
          "message": {
            "text": "(BETA Suggestion) Bidi control characters on the line may be represented visually in a way that does not convey the actual semantics of the code to a human reviewer.",
            "markdown": "(BETA Suggestion) Bidi control characters on the line may be represented visually in a way that does not convey the actual semantics of the code to a human reviewer.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/nodets/test/test-cases.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 24,
                  "endLine": 24,
                  "startColumn": 1,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8dd0e8c83c8967837e151730520ba88e906e96f67f434bc819ff5f6f50202e4b"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/nodets/test/test-cases.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 24,
                            "endLine": 24,
                            "startColumn": 1,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 203,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ]
          }
        },
        {
          "ruleId": "javascript/TrojanSourceBidiControl",
          "ruleIndex": 14,
          "level": "note",
          "message": {
            "text": "(BETA Suggestion) Bidi control characters on the line may be represented visually in a way that does not convey the actual semantics of the code to a human reviewer.",
            "markdown": "(BETA Suggestion) Bidi control characters on the line may be represented visually in a way that does not convey the actual semantics of the code to a human reviewer.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/js/test/phantom-client.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 99,
                  "endLine": 99,
                  "startColumn": 1,
                  "endColumn": 1017
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a059c8431fb5080c72a5876a31877962bc6854001de4cb4edd910cf2223dbd27"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/js/test/phantom-client.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 99,
                            "endLine": 99,
                            "startColumn": 1,
                            "endColumn": 1017
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 153,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ]
          }
        },
        {
          "ruleId": "javascript/TrojanSourceBidiControl",
          "ruleIndex": 14,
          "level": "note",
          "message": {
            "text": "(BETA Suggestion) Bidi control characters on the line may be represented visually in a way that does not convey the actual semantics of the code to a human reviewer.",
            "markdown": "(BETA Suggestion) Bidi control characters on the line may be represented visually in a way that does not convey the actual semantics of the code to a human reviewer.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/ts/test/phantom-client.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 107,
                  "endLine": 107,
                  "startColumn": 1,
                  "endColumn": 1019
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2ee19e3ef1e35226a32f33ed6588f21a34e419a25336570d3987cbe6bd482ce1"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/ts/test/phantom-client.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 107,
                            "endLine": 107,
                            "startColumn": 1,
                            "endColumn": 1019
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 153,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ]
          }
        },
        {
          "ruleId": "javascript/TrojanSourceBidiControl",
          "ruleIndex": 14,
          "level": "note",
          "message": {
            "text": "(BETA Suggestion) Bidi control characters on the line may be represented visually in a way that does not convey the actual semantics of the code to a human reviewer.",
            "markdown": "(BETA Suggestion) Bidi control characters on the line may be represented visually in a way that does not convey the actual semantics of the code to a human reviewer.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/js/test/test-es6.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 33,
                  "endLine": 33,
                  "startColumn": 1,
                  "endColumn": 1013
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6e83453ce691032177546130f8fb0e65a334d8cf09aab9b77c04f3ae4a0bd14a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/js/test/test-es6.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 33,
                            "endLine": 33,
                            "startColumn": 1,
                            "endColumn": 1013
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 203,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ]
          }
        },
        {
          "ruleId": "javascript/TrojanSourceBidiControl",
          "ruleIndex": 14,
          "level": "note",
          "message": {
            "text": "(BETA Suggestion) Bidi control characters on the line may be represented visually in a way that does not convey the actual semantics of the code to a human reviewer.",
            "markdown": "(BETA Suggestion) Bidi control characters on the line may be represented visually in a way that does not convey the actual semantics of the code to a human reviewer.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/js/test/test-async.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 33,
                  "endLine": 33,
                  "startColumn": 1,
                  "endColumn": 1013
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3aad0a56858ac11a2358557efa089e93b2456ae0d893f4814fa1408f83a01d5c"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/js/test/test-async.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 33,
                            "endLine": 33,
                            "startColumn": 1,
                            "endColumn": 1013
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 153,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ]
          }
        },
        {
          "ruleId": "javascript/TrojanSourceBidiControl",
          "ruleIndex": 14,
          "level": "note",
          "message": {
            "text": "(BETA Suggestion) Bidi control characters on the line may be represented visually in a way that does not convey the actual semantics of the code to a human reviewer.",
            "markdown": "(BETA Suggestion) Bidi control characters on the line may be represented visually in a way that does not convey the actual semantics of the code to a human reviewer.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/ts/test/test.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 31,
                  "endLine": 31,
                  "startColumn": 1,
                  "endColumn": 1023
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ca700a3a73af44c4b01234b92075f0c87d186fc7c697bfe193c14be842491480"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/ts/test/test.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 1,
                            "endColumn": 1023
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 153,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ]
          }
        },
        {
          "ruleId": "javascript/TrojanSourceBidiControl",
          "ruleIndex": 14,
          "level": "note",
          "message": {
            "text": "(BETA Suggestion) Bidi control characters on the line may be represented visually in a way that does not convey the actual semantics of the code to a human reviewer.",
            "markdown": "(BETA Suggestion) Bidi control characters on the line may be represented visually in a way that does not convey the actual semantics of the code to a human reviewer.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/nodejs/test/test-cases.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 42,
                  "endLine": 42,
                  "startColumn": 1,
                  "endColumn": 66
                }
              }
            }
          ],
          "fingerprints": {
            "0": "cd9e6eec99dad892a0e6335cae034d8b0eb41e6b5d651505d294798297360c8c"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/nodejs/test/test-cases.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 1,
                            "endColumn": 66
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 203,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ]
          }
        },
        {
          "ruleId": "javascript/TrojanSourceBidiControl",
          "ruleIndex": 14,
          "level": "note",
          "message": {
            "text": "(BETA Suggestion) Bidi control characters on the line may be represented visually in a way that does not convey the actual semantics of the code to a human reviewer.",
            "markdown": "(BETA Suggestion) Bidi control characters on the line may be represented visually in a way that does not convey the actual semantics of the code to a human reviewer.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/nodejs/test/test-cases.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 43,
                  "endLine": 43,
                  "startColumn": 1,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "28b13f23562456cb5c157c786d2373e0ea9424dae35bca8ff881fa352981cc8a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/nodejs/test/test-cases.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 1,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 203,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ]
          }
        },
        {
          "ruleId": "javascript/TrojanSourceBidiControl",
          "ruleIndex": 14,
          "level": "note",
          "message": {
            "text": "(BETA Suggestion) Bidi control characters on the line may be represented visually in a way that does not convey the actual semantics of the code to a human reviewer.",
            "markdown": "(BETA Suggestion) Bidi control characters on the line may be represented visually in a way that does not convey the actual semantics of the code to a human reviewer.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/js/test/test.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 70,
                  "endLine": 70,
                  "startColumn": 1,
                  "endColumn": 1013
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e1ea685978a6c00729ca3b179561c778821b56cb7b1e2933a83719aa3a7d119e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/js/test/test.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 1,
                            "endColumn": 1013
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 153,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ]
          }
        },
        {
          "ruleId": "java/PT",
          "ruleIndex": 15,
          "level": "error",
          "message": {
            "text": "Unsanitized input from a zip file flows into mkdirs, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to manipulate arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to manipulate arbitrary files.",
            "arguments": [
              "[a zip file](0)",
              "[flows](1),(2),(3),(4),(5),(6)",
              "[mkdirs](7)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contrib/thrift-maven-plugin/src/main/java/org/apache/thrift/maven/AbstractThriftMojo.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 302,
                  "endLine": 302,
                  "startColumn": 25,
                  "endColumn": 64
                }
              }
            }
          ],
          "fingerprints": {
            "0": "472e672f74faab35b5432604a63e4087f7a1b00739a7058255a82b6b499197b2",
            "1": "90c1ba4b.c5c25509.f3cf9a45.e22980a8.278f629c.41d8b89f.be04624c.54d46e25.90c1ba4b.99f8206b.df7f8d4d.3957e58a.408180c7.9699126d.a204df5d.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "contrib/thrift-maven-plugin/src/main/java/org/apache/thrift/maven/AbstractThriftMojo.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 296,
                            "endLine": 296,
                            "startColumn": 49,
                            "endColumn": 65
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "contrib/thrift-maven-plugin/src/main/java/org/apache/thrift/maven/AbstractThriftMojo.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 296,
                            "endLine": 296,
                            "startColumn": 49,
                            "endColumn": 65
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "contrib/thrift-maven-plugin/src/main/java/org/apache/thrift/maven/AbstractThriftMojo.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 296,
                            "endLine": 296,
                            "startColumn": 34,
                            "endColumn": 67
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "contrib/thrift-maven-plugin/src/main/java/org/apache/thrift/maven/AbstractThriftMojo.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 301,
                            "endLine": 301,
                            "startColumn": 37,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "contrib/thrift-maven-plugin/src/main/java/org/apache/thrift/maven/AbstractThriftMojo.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 300,
                            "endLine": 301,
                            "startColumn": 36,
                            "endColumn": 76
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "contrib/thrift-maven-plugin/src/main/java/org/apache/thrift/maven/AbstractThriftMojo.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 302,
                            "endLine": 302,
                            "startColumn": 25,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "contrib/thrift-maven-plugin/src/main/java/org/apache/thrift/maven/AbstractThriftMojo.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 302,
                            "endLine": 302,
                            "startColumn": 25,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "contrib/thrift-maven-plugin/src/main/java/org/apache/thrift/maven/AbstractThriftMojo.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 302,
                            "endLine": 302,
                            "startColumn": 25,
                            "endColumn": 64
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 801,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "ruby/TrojanSourceBidiControl",
          "ruleIndex": 16,
          "level": "note",
          "message": {
            "text": "(BETA Suggestion) Bidi control characters on the line may be represented visually in a way that does not convey the actual semantics of the code to a human reviewer.",
            "markdown": "(BETA Suggestion) Bidi control characters on the line may be represented visually in a way that does not convey the actual semantics of the code to a human reviewer.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/rb/integration/TestClient.rb",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 115,
                  "endLine": 115,
                  "startColumn": 1,
                  "endColumn": 68
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c97721a01863f38add165e0e5762f0b77f77ad640ab6b78e7b09060f24242627"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/rb/integration/TestClient.rb",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 1,
                            "endColumn": 68
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 201,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ]
          }
        },
        {
          "ruleId": "ruby/TrojanSourceBidiControl",
          "ruleIndex": 16,
          "level": "note",
          "message": {
            "text": "(BETA Suggestion) Bidi control characters on the line may be represented visually in a way that does not convey the actual semantics of the code to a human reviewer.",
            "markdown": "(BETA Suggestion) Bidi control characters on the line may be represented visually in a way that does not convey the actual semantics of the code to a human reviewer.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/rb/integration/TestClient.rb",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 116,
                  "endLine": 116,
                  "startColumn": 1,
                  "endColumn": 23
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1beda8691b5f486b64e0fc953eb786be3278c0a2c19c80b9f8d592c3eb7175ca"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/rb/integration/TestClient.rb",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 116,
                            "endLine": 116,
                            "startColumn": 1,
                            "endColumn": 23
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 201,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ]
          }
        },
        {
          "ruleId": "csharp/NoHardcodedCredentials",
          "ruleIndex": 17,
          "level": "warning",
          "message": {
            "text": "(BETA Suggestion) Do not hardcode credentials in code. Found hardcoded credential used in X509Certificate2.",
            "markdown": "(BETA Suggestion) Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[X509Certificate2](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tutorial/netstd/Client/Program.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 258,
                  "endLine": 258,
                  "startColumn": 51,
                  "endColumn": 63
                }
              }
            }
          ],
          "fingerprints": {
            "0": "143ec2c3af04f397a5da33381be6fd98c81c937608c616341ff969aa5a4c7e49",
            "1": "9dcbd817.551e9d3b.4d16229b.a090ec1d.5533dcf0.f261c7f1.81efecc6.8e772e22.9dcbd817.551e9d3b.4d16229b.a090ec1d.5533dcf0.f261c7f1.81efecc6.8e772e22"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tutorial/netstd/Client/Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 258,
                            "endLine": 258,
                            "startColumn": 51,
                            "endColumn": 63
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tutorial/netstd/Client/Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 258,
                            "endLine": 258,
                            "startColumn": 24,
                            "endColumn": 40
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 502,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "csharp/NoHardcodedCredentials",
          "ruleIndex": 17,
          "level": "warning",
          "message": {
            "text": "(BETA Suggestion) Do not hardcode credentials in code. Found hardcoded credential used in X509Certificate2.",
            "markdown": "(BETA Suggestion) Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[X509Certificate2](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tutorial/netcore/Server/Program.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 226,
                  "endLine": 226,
                  "startColumn": 51,
                  "endColumn": 63
                }
              }
            }
          ],
          "fingerprints": {
            "0": "57de3ed6efc0afd1890549f32a687e15f50459f47ec1ceecdbe9be2d10b951c2",
            "1": "9dcbd817.551e9d3b.4d16229b.a090ec1d.5533dcf0.f261c7f1.81efecc6.8e772e22.9dcbd817.551e9d3b.4d16229b.a090ec1d.5533dcf0.f261c7f1.81efecc6.8e772e22"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tutorial/netcore/Server/Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 226,
                            "endLine": 226,
                            "startColumn": 51,
                            "endColumn": 63
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tutorial/netcore/Server/Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 226,
                            "endLine": 226,
                            "startColumn": 24,
                            "endColumn": 40
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 502,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "csharp/NoHardcodedCredentials",
          "ruleIndex": 17,
          "level": "warning",
          "message": {
            "text": "(BETA Suggestion) Do not hardcode credentials in code. Found hardcoded credential used in X509Certificate2.",
            "markdown": "(BETA Suggestion) Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[X509Certificate2](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tutorial/netstd/Server/Program.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 261,
                  "endLine": 261,
                  "startColumn": 51,
                  "endColumn": 63
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2bf81cee92ce2c52381391fbaa13f46b74d6a1779bee115287e914a2cd5da4cb",
            "1": "9dcbd817.551e9d3b.4d16229b.a090ec1d.5533dcf0.f261c7f1.81efecc6.8e772e22.9dcbd817.551e9d3b.4d16229b.a090ec1d.5533dcf0.f261c7f1.81efecc6.8e772e22"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tutorial/netstd/Server/Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 261,
                            "endLine": 261,
                            "startColumn": 51,
                            "endColumn": 63
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tutorial/netstd/Server/Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 261,
                            "endLine": 261,
                            "startColumn": 24,
                            "endColumn": 40
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 502,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "csharp/NoHardcodedCredentials",
          "ruleIndex": 17,
          "level": "warning",
          "message": {
            "text": "(BETA Suggestion) Do not hardcode credentials in code. Found hardcoded credential used in X509Certificate2.",
            "markdown": "(BETA Suggestion) Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[X509Certificate2](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tutorial/netcore/Client/Program.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 172,
                  "endLine": 172,
                  "startColumn": 51,
                  "endColumn": 63
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fa1875fc06ed7195dae1b1ca94135c0698e54d4e6562e21d36e776ea08c4abee",
            "1": "9dcbd817.551e9d3b.4d16229b.a090ec1d.5533dcf0.f261c7f1.81efecc6.8e772e22.9dcbd817.551e9d3b.4d16229b.a090ec1d.5533dcf0.f261c7f1.81efecc6.8e772e22"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tutorial/netcore/Client/Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 172,
                            "endLine": 172,
                            "startColumn": 51,
                            "endColumn": 63
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tutorial/netcore/Client/Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 172,
                            "endLine": 172,
                            "startColumn": 24,
                            "endColumn": 40
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 502,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "go/InsecureTLSConfig",
          "ruleIndex": 18,
          "level": "warning",
          "message": {
            "text": "Insecure TLS configuration is found to be in use. MinVersion is set to a deprecated SSL/TLS version",
            "markdown": "Insecure TLS configuration is found to be in use. MinVersion is set to a deprecated SSL/TLS version",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/go/thrift/ssl_socket.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 52,
                  "endLine": 52,
                  "startColumn": 3,
                  "endColumn": 36
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0d4b7b87d7ea859ffc67becfd85151d1fb09c542ce798688f6c89b4d5331f0ee",
            "1": "9cf53582.73eb5804.52a8a1ee.e22980a8.c8f211d9.67ab4541.860c51ff.37d4bff0.00561b7f.73eb5804.52a8a1ee.e22980a8.be152d1f.67ab4541.8ee950b3.75864eb9"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/go/thrift/ssl_socket.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 52,
                            "endLine": 52,
                            "startColumn": 3,
                            "endColumn": 36
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 501,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "go/InsecureTLSConfig",
          "ruleIndex": 18,
          "level": "warning",
          "message": {
            "text": "Insecure TLS configuration is found to be in use. MinVersion is set to a deprecated SSL/TLS version",
            "markdown": "Insecure TLS configuration is found to be in use. MinVersion is set to a deprecated SSL/TLS version",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/go/thrift/ssl_server_socket.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 42,
                  "endLine": 42,
                  "startColumn": 3,
                  "endColumn": 36
                }
              }
            }
          ],
          "fingerprints": {
            "0": "18bd8bbf9343bebd1023508ab85e3a702adc65e78493713ceb360771fd479e59",
            "1": "9cf53582.73eb5804.52a8a1ee.e22980a8.c8f211d9.67ab4541.860c51ff.37d4bff0.00561b7f.73eb5804.52a8a1ee.e22980a8.6ee851a6.67ab4541.8ee950b3.75864eb9"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/go/thrift/ssl_server_socket.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 3,
                            "endColumn": 36
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 501,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "javascript/InsecureHash",
          "ruleIndex": 19,
          "level": "warning",
          "message": {
            "text": "sha1 hash (used in crypto.createHash) is insecure. Consider changing it to a secure hashing algorithm (e.g. SHA256).",
            "markdown": "{0} hash (used in {1}) is insecure. Consider changing it to a secure hashing algorithm (e.g. SHA256).",
            "arguments": [
              "[sha1](0)",
              "[crypto.createHash](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/nodejs/lib/thrift/web_server.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 514,
                  "endLine": 514,
                  "startColumn": 16,
                  "endColumn": 33
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f6e34410cd4657dbb9704db7f1f38ebf926d00d4de951f390be6cd472005c362",
            "1": "37bc1bfe.ef45cec4.191eaf2b.d7919eeb.ef9f7d82.82ca542b.24e58b06.71520ffe.37bc1bfe.4773f344.191eaf2b.d7919eeb.ef9f7d82.82ca542b.24e58b06.71520ffe"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/nodejs/lib/thrift/web_server.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 514,
                            "endLine": 514,
                            "startColumn": 34,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/nodejs/lib/thrift/web_server.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 514,
                            "endLine": 514,
                            "startColumn": 16,
                            "endColumn": 33
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 551,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "python/PT",
          "ruleIndex": 20,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[open](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contrib/parse_profiling.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 298,
                  "endLine": 298,
                  "startColumn": 19,
                  "endColumn": 23
                }
              }
            }
          ],
          "fingerprints": {
            "0": "bab961bce8c3ffb83655ff796de2abd0f556792dbe58a74cd64e355dc778a8dc",
            "1": "a6b41d6e.09b47a5b.79e62dc9.ef463c52.f3eda546.ba14daf2.a2237efa.f46ed94e.a6b41d6e.d2031361.59612bde.b5f6ec27.ba62a2ca.3b0605d1.c532d34b.6aac30d8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "contrib/parse_profiling.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 311,
                            "endLine": 311,
                            "startColumn": 15,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "contrib/parse_profiling.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 311,
                            "endLine": 311,
                            "startColumn": 15,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "contrib/parse_profiling.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 283,
                            "endLine": 283,
                            "startColumn": 10,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "contrib/parse_profiling.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 293,
                            "endLine": 293,
                            "startColumn": 41,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "contrib/parse_profiling.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 298,
                            "endLine": 298,
                            "startColumn": 24,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "contrib/parse_profiling.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 298,
                            "endLine": 298,
                            "startColumn": 24,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "contrib/parse_profiling.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 298,
                            "endLine": 298,
                            "startColumn": 19,
                            "endColumn": 23
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 551,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "php/ServerLeak",
          "ruleIndex": 21,
          "level": "warning",
          "message": {
            "text": "An exception object flows to _ and is leaked to the attacker. This may disclose important information about the application to an attacker.",
            "markdown": "{0} {1} to {2} and is leaked to the attacker. This may disclose important information about the application to an attacker.",
            "arguments": [
              "[An exception object](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[_](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tutorial/php/PhpClient.php",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 73,
                  "endLine": 73,
                  "startColumn": 5,
                  "endColumn": 41
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4884726f564c3e9089a9bdc9c40e425609fd770b62a335909180481fc1902fad",
            "1": "85ec4d04.103ac387.2683ade8.bb9e4303.ab291b9c.70594887.6b78c42f.2377a06c.85ec4d04.35fb54e4.2683ade8.bb9e4303.af225eaf.2f4e1548.15ea137c.9e35b52b"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tutorial/php/PhpClient.php",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 72,
                            "endLine": 72,
                            "startColumn": 39,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tutorial/php/PhpClient.php",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 72,
                            "endLine": 72,
                            "startColumn": 39,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tutorial/php/PhpClient.php",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 73,
                            "endLine": 73,
                            "startColumn": 30,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tutorial/php/PhpClient.php",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 73,
                            "endLine": 73,
                            "startColumn": 30,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tutorial/php/PhpClient.php",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 73,
                            "endLine": 73,
                            "startColumn": 11,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tutorial/php/PhpClient.php",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 73,
                            "endLine": 73,
                            "startColumn": 5,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tutorial/php/PhpClient.php",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 73,
                            "endLine": 73,
                            "startColumn": 5,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 501,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "javascript/PT",
          "ruleIndex": 22,
          "level": "error",
          "message": {
            "text": "Unsanitized input from the request URL flows into fs.readFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[the request URL](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9)",
              "[fs.readFile](10)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/nodejs/lib/thrift/web_server.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 430,
                  "endLine": 430,
                  "startColumn": 7,
                  "endColumn": 18
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2dcc7a7877d355cfe1828f8bafa85ed19c382a96f61a7605f758677fb464b2cf",
            "1": "c3f8dfad.4773f344.693cee93.459f6834.5c2b5c9d.5eccefd7.f0256597.cde67692.c3f8dfad.7d4b7307.94b29de5.59162423.354745f9.98c7c24d.f0256597.e7a718ae"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/nodejs/lib/thrift/web_server.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 417,
                            "endLine": 417,
                            "startColumn": 33,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/nodejs/lib/thrift/web_server.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 417,
                            "endLine": 417,
                            "startColumn": 33,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/nodejs/lib/thrift/web_server.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 417,
                            "endLine": 417,
                            "startColumn": 15,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/nodejs/lib/thrift/web_server.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 417,
                            "endLine": 417,
                            "startColumn": 9,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/nodejs/lib/thrift/web_server.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 418,
                            "endLine": 418,
                            "startColumn": 39,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/nodejs/lib/thrift/web_server.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 418,
                            "endLine": 418,
                            "startColumn": 20,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/nodejs/lib/thrift/web_server.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 418,
                            "endLine": 418,
                            "startColumn": 9,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/nodejs/lib/thrift/web_server.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 419,
                            "endLine": 419,
                            "startColumn": 15,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/nodejs/lib/thrift/web_server.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 426,
                            "endLine": 426,
                            "startColumn": 23,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/nodejs/lib/thrift/web_server.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 430,
                            "endLine": 430,
                            "startColumn": 19,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/nodejs/lib/thrift/web_server.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 430,
                            "endLine": 430,
                            "startColumn": 7,
                            "endColumn": 18
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 801,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        }
      ],
      "properties": {
        "coverage": [
          {
            "files": 88,
            "isSupported": true,
            "lang": "Python"
          },
          {
            "files": 26,
            "isSupported": true,
            "lang": "XML"
          },
          {
            "files": 246,
            "isSupported": true,
            "lang": "C# (beta)"
          },
          {
            "files": 443,
            "isSupported": true,
            "lang": "Java"
          },
          {
            "files": 78,
            "isSupported": true,
            "lang": "PHP"
          },
          {
            "files": 154,
            "isSupported": true,
            "lang": "Go"
          },
          {
            "files": 75,
            "isSupported": true,
            "lang": "JavaScript"
          },
          {
            "files": 14,
            "isSupported": true,
            "lang": "HTML"
          },
          {
            "files": 11,
            "isSupported": false,
            "lang": "Unknown"
          },
          {
            "files": 10,
            "isSupported": true,
            "lang": "TypeScript"
          },
          {
            "files": 93,
            "isSupported": true,
            "lang": "Ruby"
          }
        ]
      }
    }
  ]
}
