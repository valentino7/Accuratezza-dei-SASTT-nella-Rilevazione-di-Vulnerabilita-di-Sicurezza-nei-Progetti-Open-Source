{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SnykCode",
          "semanticVersion": "1.0.0",
          "version": "1.0.0",
          "rules": [
            {
              "id": "java/NonCryptoHardcodedSecret",
              "name": "NonCryptoHardcodedSecret",
              "shortDescription": {
                "text": "Use of Hardcoded, Security-relevant Constants"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nWhen constants are hardcoded into applications, this information could easily be reverse-engineered and become known to attackers. For example, if a breached authentication token is hardcoded in multiple places in the application, it may lead to components of the application remaining vulnerable if not all instances are changed.\nAnother negative effect of hard-coding constants is potential unpredictability in the application's performance if the development team fails to update every single instance of the hardcoded constant throughout the code. For these reasons, hard-coding security-relevant constants is considered bad coding practice and should be remedied if present and avoided in future.\n\n### Best practices for prevention\n* Never hard code security-related constants; use symbolic names or configuration lookup files.\n* As hard coding is often done by coders working alone on a small scale, examine all legacy code components and test carefully when scaling.\n* Adopt a \"future-proof code\" mindset: While use of constants may save a little time now and make development simpler in the short term, it could cost time and money adapting to scale or other unforeseen circumstances (such as new hardware) in the future.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/RocketChat/Rocket.Chat.Java.SDK/commit/6f17474770cd120650daa9945ed65273aaa5ec5c?diff=split#diff-fc51f9a049d8a8cd9df2a4226b87c214L19",
                    "lines": [
                      {
                        "line": "String username = \"sachin.shinde\";",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "String password = \"sachin9924\";",
                        "lineNumber": 18,
                        "lineChange": "removed"
                      },
                      {
                        "line": "String password = \"sachin123\";",
                        "lineNumber": 23,
                        "lineChange": "added"
                      },
                      {
                        "line": "private static String serverurl = \"wss://demo.rocket.chat\";",
                        "lineNumber": 25,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/wso2-attic/ballerina-message-broker/commit/8d606a4838b057411b7226e4651f7ca59d9746ce?diff=split#diff-2d8482e5c13da266ce6e6196d45bdf1eL66",
                    "lines": [
                      {
                        "line": "private String user = \"wso2carbon\";",
                        "lineNumber": 63,
                        "lineChange": "removed"
                      },
                      {
                        "line": "private String user = \"ballerina\";",
                        "lineNumber": 63,
                        "lineChange": "added"
                      },
                      {
                        "line": "private String password = \"wso2carbon\";",
                        "lineNumber": 65,
                        "lineChange": "removed"
                      },
                      {
                        "line": "private String password = \"ballerina\";",
                        "lineNumber": 65,
                        "lineChange": "added"
                      },
                      {
                        "line": "public String getUrl() {",
                        "lineNumber": 67,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/games647/FlexibleLogin/commit/9ea9726f145063f4436ca47ef864735e247c34c1?diff=split#diff-02a91e75dcc99d9c759ee4d9e0c88734L26",
                    "lines": [
                      {
                        "line": "@Setting(comment = \"Password in order to login\")",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "private String password = \"password123456789\";",
                        "lineNumber": 25,
                        "lineChange": "removed"
                      },
                      {
                        "line": "private String password = \"\";",
                        "lineNumber": 25,
                        "lineChange": "added"
                      },
                      {
                        "line": "public SQLType getType() {",
                        "lineNumber": 27,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Removed test keys",
                  "Remove API keys",
                  "Remove DropBox sync API libraries and dependencies"
                ],
                "precision": "very-high",
                "repoDatasetSize": 158,
                "cwe": [
                  "CWE-547"
                ]
              }
            },
            {
              "id": "java/InsecureDefaultAesCipher/test",
              "name": "InsecureDefaultAesCipher/test",
              "shortDescription": {
                "text": "Use of a Broken or Risky Cryptographic Algorithm"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nWhen sensitive information is transmitted with weak encryption, attackers are potentially able to intercept the information and decrypt it, with a wide range of negative consequences. This includes accessing code or content they are not authorized to view and changing or taking down a site or app, often with a demand for ransom. Every developer is aware of the risks of transmitting sensitive information in plain text. Yet many still use outdated or inferior cryptographic methods to protect information under their control. As cryptographic methods grow stronger with time, code must be updated to incorporate more modern and secure cryptography.\n\n### Best practices for prevention\n* Avoid using DES, and use AES (in a secure mode, such as Galois/Counter Mode) or another strong encryption algorithm instead.\n* Be aware of outdated hashes, such as MD5 and SHA1 (along with many others); recognize and implement current cryptographic standards instead.\n* Never use custom or DIY security and cryptographic methods; instead, use methods that are part of an accepted library or framework.\n* Ensure that code dealing with cryptographic methods is highly modular and can be easily replaced as security standards change.\n* Increase developer awareness of proper encryption key management and protection to ensure best practices throughout the application.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/Esri/mapbook-android/commit/29dbb58917955ca69632a80cc189247f6398fdbb?diff=split#diff-9865f4effc693075a16c0a2b0657d46eL84",
                    "lines": [
                      {
                        "line": "public class CredentialCryptographer {",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String TAG = CredentialCryptographer.class.getSimpleName();",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String CIPHER_TYPE = \"AES/GCM/NoPadding\";",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String RSA_MODE =  \"RSA/ECB/PKCS1Padding\";",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String AES_MODE = \"AES/ECB/PKCS7Padding\";",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String AndroidKeyStore = \"AndroidKeyStore\";",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String ALIAS = \"CRED_KEY\";",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "final SecretKey key = (SecretKey) keyStore.getKey(ALIAS, null);",
                        "lineNumber": 236,
                        "lineChange": "none"
                      },
                      {
                        "line": "final Cipher c = Cipher.getInstance(CIPHER_TYPE);",
                        "lineNumber": 238,
                        "lineChange": "none"
                      },
                      {
                        "line": "final File file = new File(getFilePath(encryptedDataFileName));",
                        "lineNumber": 240,
                        "lineChange": "none"
                      },
                      {
                        "line": "byte [] decodedBytes = null;",
                        "lineNumber": 473,
                        "lineChange": "removed"
                      },
                      {
                        "line": "try{",
                        "lineNumber": 474,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  final Cipher c = Cipher.getInstance(AES_MODE, \"BC\");",
                        "lineNumber": 475,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  c.init(Cipher.DECRYPT_MODE, getSecretKey(context));",
                        "lineNumber": 476,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  decodedBytes = c.doFinal(encrypted);",
                        "lineNumber": 477,
                        "lineChange": "removed"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/jenkinsci/jenkins/commit/1ac357c2ea2cac85acc222aa5feb9a25c6b4346e?diff=split#diff-3f1937871076df5e4440785f2ac5ddd6L120",
                    "lines": [
                      {
                        "line": "String base64 = req.getHeader(\"X-ConsoleAnnotator\");",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (base64!=null) {",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Cipher sym = Cipher.getInstance(\"AES\");",
                        "lineNumber": 119,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    Cipher sym = Secret.getCipher(\"AES\");",
                        "lineNumber": 117,
                        "lineChange": "added"
                      },
                      {
                        "line": "    sym.init(Cipher.DECRYPT_MODE, Hudson.getInstance().getSecretKeyAsAES128());",
                        "lineNumber": 120,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/tasos-py/AES-Encryption-Classes/commit/b11039b5febf20bbe854fc6bb1d401191a4ee29f?diff=split#diff-bfedf423ceee7772f0ec16aa9392fa8dL310",
                    "lines": [
                      {
                        "line": " */",
                        "lineNumber": 307,
                        "lineChange": "removed"
                      },
                      {
                        "line": "private Cipher cipher(int cipherMode, byte[] key, byte[] iv) {",
                        "lineNumber": 308,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  SecretKeySpec keySpec = new SecretKeySpec(key, \"AES\");",
                        "lineNumber": 309,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  IvParameterSpec ivSpec = new IvParameterSpec(iv);",
                        "lineNumber": 310,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  try {",
                        "lineNumber": 311,
                        "lineChange": "removed"
                      },
                      {
                        "line": "   */ ",
                        "lineNumber": 293,
                        "lineChange": "added"
                      },
                      {
                        "line": "  private Cipher cipher(int cipherMode, byte[] key, byte[] iv) {",
                        "lineNumber": 294,
                        "lineChange": "added"
                      },
                      {
                        "line": "      SecretKeySpec keySpec = new SecretKeySpec(key, \"AES\");",
                        "lineNumber": 295,
                        "lineChange": "added"
                      },
                      {
                        "line": "      IvParameterSpec ivSpec = new IvParameterSpec(iv);",
                        "lineNumber": 296,
                        "lineChange": "added"
                      },
                      {
                        "line": "      try {",
                        "lineNumber": 297,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Made changes to support CBC mode encryption",
                  "added all sha and AES tests"
                ],
                "precision": "very-high",
                "repoDatasetSize": 53,
                "cwe": [
                  "CWE-327"
                ]
              }
            },
            {
              "id": "java/InsecureHash",
              "name": "InsecureHash",
              "shortDescription": {
                "text": "Use of Password Hash With Insufficient Computational Effort"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nSensitive information should never be stored in plain text, since this makes it very easy for unauthorized users, whether malicious insiders or outside attackers, to access. Hashing methods are used to make stored passwords and other sensitive data unreadable to users. For example, when a password is defined for the first time, it is hashed and then stored. The next time that user attempts to log on, the password they enter is hashed following the same procedure and compared with the stored value. In this way, the original password never needs to be stored in the system.\n\nHashing is a one-way scheme, meaning a hashed password cannot be reverse engineered. However, if an outdated or custom programmed hashing scheme is used, it becomes simple for an attacker with powerful modern computing power to gain access to the hashes used. This opens up access to all stored password information, leading to breached security. Therefore, it is essential for developers to understand modern, secure password hashing techniques.\n\n### Best practices for prevention\n* Use strong standard algorithms for hashing rather than simpler but outdated methods or DIY hashing schemes, which may have inherent weaknesses.\n* Use modular design for all code dealing with hashing so it can be swapped out as security standards change over time.\n* Use salting in combination with hashing (While this places more demands on resources, it is an essential step for tighter security.).\n* Implement zero-trust architecture to ensure that access to password data is granted only for legitimate business purposes.\n* Increase developer awareness of current standards in data security and cryptography.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/tita/tita/commit/398f6b776a2aea7f20bf604768b8721beff8d93a?diff=split#diff-dd34c5e6a15ca48bff6f9ca749e68243L164",
                    "lines": [
                      {
                        "line": " */",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "private String getHashedPassword(String pwd) throws NoSuchAlgorithmException {",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "    MessageDigest md = MessageDigest.getInstance(\"SHA-1\");",
                        "lineNumber": 163,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    MessageDigest md = MessageDigest.getInstance(\"SHA-256\");",
                        "lineNumber": 103,
                        "lineChange": "added"
                      },
                      {
                        "line": "    byte[] encryptMsg = md.digest(pwd.getBytes());",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return new String(encryptMsg);",
                        "lineNumber": 165,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    return bytes2String(encryptMsg);",
                        "lineNumber": 105,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/devonfw/my-thai-star/commit/095a3fb6bb860a2411cb51e812121ec2a6b99894?diff=split#diff-4f73d1042058dd462057744068125d4eL242",
                    "lines": [
                      {
                        "line": "    + String.format(\"%02d\", ldt1.getSecond());",
                        "lineNumber": 240,
                        "lineChange": "none"
                      },
                      {
                        "line": "MessageDigest md = MessageDigest.getInstance(\"MD5\");",
                        "lineNumber": 241,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MessageDigest md = MessageDigest.getInstance(\"SHA-256\");",
                        "lineNumber": 242,
                        "lineChange": "added"
                      },
                      {
                        "line": "md.update((email + date + time).getBytes());",
                        "lineNumber": 243,
                        "lineChange": "none"
                      },
                      {
                        "line": "byte[] digest = md.digest();",
                        "lineNumber": 244,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/SecurityCompass/AndroidLabs/commit/5608f75dd665beac85dbad08f80b91d73b27904a?diff=split#diff-ffc047d4a5f84de13e373f2392bfb11bL148",
                    "lines": [
                      {
                        "line": "byte[] passwordBytes = (password).getBytes(\"UTF-8\");",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "MessageDigest md = MessageDigest.getInstance(\"SHA-1\");",
                        "lineNumber": 147,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MessageDigest md = MessageDigest.getInstance(\"SHA-256\");",
                        "lineNumber": 147,
                        "lineChange": "added"
                      },
                      {
                        "line": "md.reset();",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "md.update(salt);",
                        "lineNumber": 149,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Added an enum for the supported encryption algorithms",
                  "Added #hash(byte[], String)",
                  "Added support for\nsha256 and nonce token."
                ],
                "precision": "very-high",
                "repoDatasetSize": 122,
                "cwe": [
                  "CWE-916"
                ]
              }
            },
            {
              "id": "java/HardcodedPassword",
              "name": "HardcodedPassword",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n### Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/utluiz/spring-examples/commit/56e44932a3a004c3ac96ce1caa3e6d8817230f6e?diff=split#diff-19d771f687bc8ca37d378c39d20ed425L26",
                    "lines": [
                      {
                        "line": "  ds.setUrl(\"jdbc:mysql://localhost:3311/agenda\");",
                        "lineNumber": 23,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  ds.setUrl(\"jdbc:mysql://localhost/agenda\");",
                        "lineNumber": 20,
                        "lineChange": "added"
                      },
                      {
                        "line": "  ds.setUser(\"root\");",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "  ds.setPassword(\"root\");",
                        "lineNumber": 25,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  ds.setPassword(\"\");",
                        "lineNumber": 22,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return ds;",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 27,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Evolveum/midpoint/commit/9ce1d7ff1e78ca65d6b614c52035e1971d1187cd?diff=split#diff-0003b3a408395a5640011d7c8422d19bL43",
                    "lines": [
                      {
                        "line": "      // set the password for our message.",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "      pc.setPassword(\"5ecr3t\");",
                        "lineNumber": 42,
                        "lineChange": "removed"
                      },
                      {
                        "line": "      pc.setPassword(Main.ADM_PASSWORD);",
                        "lineNumber": 42,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 43,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/theonedev/onedev/commit/ee60c786981347fc5ab6685656f3de2ea67045f7?diff=split#diff-7f6f95fdc3f39c216b4bd099d0ca65b6L60",
                    "lines": [
                      {
                        "line": "  System.exit(1);",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "root.setPassword(\"12345\");",
                        "lineNumber": 59,
                        "lineChange": "removed"
                      },
                      {
                        "line": "String password = Bootstrap.command.getArgs()[0];",
                        "lineNumber": 63,
                        "lineChange": "added"
                      },
                      {
                        "line": "root.setPassword(password);",
                        "lineNumber": 64,
                        "lineChange": "added"
                      },
                      {
                        "line": "accountManager.save(root);",
                        "lineNumber": 65,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Added user/password configuration from YML file.",
                  "Added ability to configure databases to run tests against."
                ],
                "precision": "very-high",
                "repoDatasetSize": 383,
                "cwe": [
                  "CWE-798",
                  "CWE-259"
                ]
              }
            },
            {
              "id": "java/InsecureHash/test",
              "name": "InsecureHash/test",
              "shortDescription": {
                "text": "Use of Password Hash With Insufficient Computational Effort"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nSensitive information should never be stored in plain text, since this makes it very easy for unauthorized users, whether malicious insiders or outside attackers, to access. Hashing methods are used to make stored passwords and other sensitive data unreadable to users. For example, when a password is defined for the first time, it is hashed and then stored. The next time that user attempts to log on, the password they enter is hashed following the same procedure and compared with the stored value. In this way, the original password never needs to be stored in the system.\n\nHashing is a one-way scheme, meaning a hashed password cannot be reverse engineered. However, if an outdated or custom programmed hashing scheme is used, it becomes simple for an attacker with powerful modern computing power to gain access to the hashes used. This opens up access to all stored password information, leading to breached security. Therefore, it is essential for developers to understand modern, secure password hashing techniques.\n\n### Best practices for prevention\n* Use strong standard algorithms for hashing rather than simpler but outdated methods or DIY hashing schemes, which may have inherent weaknesses.\n* Use modular design for all code dealing with hashing so it can be swapped out as security standards change over time.\n* Use salting in combination with hashing (While this places more demands on resources, it is an essential step for tighter security.).\n* Implement zero-trust architecture to ensure that access to password data is granted only for legitimate business purposes.\n* Increase developer awareness of current standards in data security and cryptography.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/tita/tita/commit/398f6b776a2aea7f20bf604768b8721beff8d93a?diff=split#diff-dd34c5e6a15ca48bff6f9ca749e68243L164",
                    "lines": [
                      {
                        "line": " */",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "private String getHashedPassword(String pwd) throws NoSuchAlgorithmException {",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "    MessageDigest md = MessageDigest.getInstance(\"SHA-1\");",
                        "lineNumber": 163,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    MessageDigest md = MessageDigest.getInstance(\"SHA-256\");",
                        "lineNumber": 103,
                        "lineChange": "added"
                      },
                      {
                        "line": "    byte[] encryptMsg = md.digest(pwd.getBytes());",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return new String(encryptMsg);",
                        "lineNumber": 165,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    return bytes2String(encryptMsg);",
                        "lineNumber": 105,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/devonfw/my-thai-star/commit/095a3fb6bb860a2411cb51e812121ec2a6b99894?diff=split#diff-4f73d1042058dd462057744068125d4eL242",
                    "lines": [
                      {
                        "line": "    + String.format(\"%02d\", ldt1.getSecond());",
                        "lineNumber": 240,
                        "lineChange": "none"
                      },
                      {
                        "line": "MessageDigest md = MessageDigest.getInstance(\"MD5\");",
                        "lineNumber": 241,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MessageDigest md = MessageDigest.getInstance(\"SHA-256\");",
                        "lineNumber": 242,
                        "lineChange": "added"
                      },
                      {
                        "line": "md.update((email + date + time).getBytes());",
                        "lineNumber": 243,
                        "lineChange": "none"
                      },
                      {
                        "line": "byte[] digest = md.digest();",
                        "lineNumber": 244,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/SecurityCompass/AndroidLabs/commit/5608f75dd665beac85dbad08f80b91d73b27904a?diff=split#diff-ffc047d4a5f84de13e373f2392bfb11bL148",
                    "lines": [
                      {
                        "line": "byte[] passwordBytes = (password).getBytes(\"UTF-8\");",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "MessageDigest md = MessageDigest.getInstance(\"SHA-1\");",
                        "lineNumber": 147,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MessageDigest md = MessageDigest.getInstance(\"SHA-256\");",
                        "lineNumber": 147,
                        "lineChange": "added"
                      },
                      {
                        "line": "md.reset();",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "md.update(salt);",
                        "lineNumber": 149,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Added an enum for the supported encryption algorithms",
                  "Added #hash(byte[], String)",
                  "Added support for\nsha256 and nonce token."
                ],
                "precision": "very-high",
                "repoDatasetSize": 122,
                "cwe": [
                  "CWE-916"
                ]
              }
            },
            {
              "id": "java/UsageOfUnencryptedSocket",
              "name": "UsageOfUnencryptedSocket",
              "shortDescription": {
                "text": "Cleartext Transmission of Sensitive Information"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\nThis weakness occurs when software transmits sensitive information, such as passwords or credit card numbers, in unencrypted form. This information may then be intercepted by threat actors using sniffer tools or interception techniques such as man-in-the-middle (MITM) attacks (often involving social engineering). Attackers can then use information gleaned to perform a variety of actions, depending on the information type. Possible actions include gaining unauthorized access, impersonating a user, moving laterally within the organization's network, or retrieving and potentially modifying files. This weakness is almost completely avoidable through intelligent architecture and design.\n\n### Best practices for prevention\n* Build web applications around a security mindset and the awareness that sniffers may be present at any time.\n* Ensure that all sensitive data transmission uses reliable encryption.\n* Implement security measures so that sensitive results are never returned in plain text.\n* Implement multiple-factor authentication methods to validate remote instances.\n* Use SSL not only at logon but throughout communications.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/ME1312/SubServers-2/commit/9a219a7d0fd259870a94d1f875f3cbb3c942ec1e?diff=split#diff-4a76c605749ad18708be15720e8fac67L57",
                    "lines": [
                      {
                        "line": "public SubDataClient(SubPlugin plugin, InetAddress address, int port, Encryption encryption) throws IOException {",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (Util.isNull(plugin, address, port)) throw new NullPointerException();",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "    socket = new Socket(address, port);",
                        "lineNumber": 56,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    socket = new NamedContainer<>(false, new Socket(address, port));",
                        "lineNumber": 60,
                        "lineChange": "added"
                      },
                      {
                        "line": "    this.plugin = plugin;",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.writer = new PrintWriter(socket.getOutputStream(), true);",
                        "lineNumber": 58,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    this.writer = new PrintWriter(socket.get().getOutputStream(), true);",
                        "lineNumber": 62,
                        "lineChange": "added"
                      },
                      {
                        "line": "    this.encryption = encryption;",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.queue = new LinkedList<NamedContainer<String, PacketOut>>();",
                        "lineNumber": 64,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/dddpaul/android-SimpleNetCat/commit/3235f85ae26fa31e1e36739c608668e15c53a04c?diff=split#diff-6689eedf89cc41d9c93933ea7ff5ebf4L62",
                    "lines": [
                      {
                        "line": "    int port = Integer.parseInt( params[2] );",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Log.d( CLASS_NAME, String.format( \"Connecting to %s:%d\", host, port ) );",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "    socket = new Socket( host, port );",
                        "lineNumber": 61,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    result.object = new Socket( host, port );",
                        "lineNumber": 65,
                        "lineChange": "added"
                      },
                      {
                        "line": "    break;",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "case RECEIVE:",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "    BufferedReader reader = new BufferedReader( new InputStreamReader( input ) );",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "    PrintWriter writer = new PrintWriter( socket.getOutputStream() );",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "    transferStreams( reader, writer );",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 114,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/rancher/cattle/commit/b06df6f37fdfe906b7804fbba41d2c02d472f8ab?diff=split#diff-125505ce5e24cbf259a0267dd1d3af77L314",
                    "lines": [
                      {
                        "line": "String[] parts = master.getConfig().getAdvertiseAddress().split(\":\");",
                        "lineNumber": 311,
                        "lineChange": "none"
                      },
                      {
                        "line": "try (",
                        "lineNumber": 312,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Socket socket = new Socket(parts[0], Integer.parseInt(parts[1]));",
                        "lineNumber": 313,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    OutputStream os = socket.getOutputStream();",
                        "lineNumber": 314,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    Socket socket = new Socket();",
                        "lineNumber": 313,
                        "lineChange": "added"
                      },
                      {
                        "line": ") {",
                        "lineNumber": 315,
                        "lineChange": "none"
                      },
                      {
                        "line": "    socket.connect(new InetSocketAddress(parts[0], Integer.parseInt(parts[1])), 5000);",
                        "lineNumber": 315,
                        "lineChange": "added"
                      },
                      {
                        "line": "    log.info(\"Connection test to master\");",
                        "lineNumber": 316,
                        "lineChange": "none"
                      },
                      {
                        "line": " } catch (IOException e) {",
                        "lineNumber": 317,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Use thread local sockets for everything except IDLE and STATUS.",
                  "- Adding a test that a locator can shut itself down\nwith SSL.",
                  "Added support for SSL secured Manager connections"
                ],
                "precision": "very-high",
                "repoDatasetSize": 108,
                "cwe": [
                  "CWE-319"
                ]
              }
            },
            {
              "id": "java/HardcodedPassword/test",
              "name": "HardcodedPassword/test",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n### Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/utluiz/spring-examples/commit/56e44932a3a004c3ac96ce1caa3e6d8817230f6e?diff=split#diff-19d771f687bc8ca37d378c39d20ed425L26",
                    "lines": [
                      {
                        "line": "  ds.setUrl(\"jdbc:mysql://localhost:3311/agenda\");",
                        "lineNumber": 23,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  ds.setUrl(\"jdbc:mysql://localhost/agenda\");",
                        "lineNumber": 20,
                        "lineChange": "added"
                      },
                      {
                        "line": "  ds.setUser(\"root\");",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "  ds.setPassword(\"root\");",
                        "lineNumber": 25,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  ds.setPassword(\"\");",
                        "lineNumber": 22,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return ds;",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 27,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Evolveum/midpoint/commit/9ce1d7ff1e78ca65d6b614c52035e1971d1187cd?diff=split#diff-0003b3a408395a5640011d7c8422d19bL43",
                    "lines": [
                      {
                        "line": "      // set the password for our message.",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "      pc.setPassword(\"5ecr3t\");",
                        "lineNumber": 42,
                        "lineChange": "removed"
                      },
                      {
                        "line": "      pc.setPassword(Main.ADM_PASSWORD);",
                        "lineNumber": 42,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 43,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/theonedev/onedev/commit/ee60c786981347fc5ab6685656f3de2ea67045f7?diff=split#diff-7f6f95fdc3f39c216b4bd099d0ca65b6L60",
                    "lines": [
                      {
                        "line": "  System.exit(1);",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "root.setPassword(\"12345\");",
                        "lineNumber": 59,
                        "lineChange": "removed"
                      },
                      {
                        "line": "String password = Bootstrap.command.getArgs()[0];",
                        "lineNumber": 63,
                        "lineChange": "added"
                      },
                      {
                        "line": "root.setPassword(password);",
                        "lineNumber": 64,
                        "lineChange": "added"
                      },
                      {
                        "line": "accountManager.save(root);",
                        "lineNumber": 65,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Added user/password configuration from YML file.",
                  "Added ability to configure databases to run tests against."
                ],
                "precision": "very-high",
                "repoDatasetSize": 383,
                "cwe": [
                  "CWE-798",
                  "CWE-259"
                ]
              }
            },
            {
              "id": "java/InsecureAesWithBadPaddingCipher/test",
              "name": "InsecureAesWithBadPaddingCipher/test",
              "shortDescription": {
                "text": "Inadequate Padding for AES encryption"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nImplementing encryption for the transmission and storage of sensitive information is essential. But encryption standards are constantly changing since attackers have more and more powerful resources at their disposal-along with more sophisticated attack algorithms. This means that encryption is only useful if it meets current standards appropriate for the type of data being transmitted or stored.\nWhen organizations use weakly encoded passwords or weak hashes (especially when they also utilize single-factor authentication, which places too much emphasis on passwords), attackers can potentially gain unauthorized access through a brute-force attack.\n\n### Best practices for prevention\n* Understand best practices of contemporary encryption algorithms and techniques.\n* Avoid encryption algorithms and techniques that are widely known to be outdated (for example, DES).\n* Implement multi-factor authentication to minimize reliance on a single factor, such as a password, that is too susceptible to brute-force attacks.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/terracotta-bank/terracotta-bank/commit/a27453b52859d32ef25694869c1662a9493c621c?diff=split#diff-49444057459eecb4ff09662c3beab114L95",
                    "lines": [
                      {
                        "line": "String ivHeader = request.getHeader(\"X-Encryption-Iv\");",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "byte[] iv = Base64.getDecoder().decode(ivHeader);",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");",
                        "lineNumber": 94,
                        "lineChange": "removed"
                      },
                      {
                        "line": "cipher.init(Cipher.DECRYPT_MODE, secretKey(), new IvParameterSpec(iv));",
                        "lineNumber": 95,
                        "lineChange": "removed"
                      },
                      {
                        "line": "Cipher cipher = Cipher.getInstance(\"AES/GCM/NoPadding\");",
                        "lineNumber": 95,
                        "lineChange": "added"
                      },
                      {
                        "line": "cipher.init(Cipher.DECRYPT_MODE, secretKey(), new GCMParameterSpec(128, iv));",
                        "lineNumber": 96,
                        "lineChange": "added"
                      },
                      {
                        "line": "cipher.updateAAD(version.getBytes(UTF_8));",
                        "lineNumber": 97,
                        "lineChange": "added"
                      },
                      {
                        "line": "InputStream plain = new CipherInputStream(new Base64InputStream(request.getInputStream()), cipher);",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn new DecryptedWrapper(request, plain);",
                        "lineNumber": 99,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/oracle/helidon/commit/bd7b527d900fc3c7c5204459f9bf6dabb5de9f3f?diff=split#diff-c80e0c0f8ccdd12b672e5ad32aeee36dL151",
                    "lines": [
                      {
                        "line": "SecretKeySpec spec = new SecretKeySpec(secretKeyFactory.generateSecret(keySpec).getEncoded(), \"AES\");",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "cipher.init(cipherMode, spec, new IvParameterSpec(salt));",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "KeySpec keySpec = new PBEKeySpec(masterPassword, salt, HASH_ITERATIONS, KEY_LENGTH);",
                        "lineNumber": 165,
                        "lineChange": "added"
                      },
                      {
                        "line": "SecretKeySpec spec = new SecretKeySpec(secretKeyFactory.generateSecret(keySpec).getEncoded(), \"AES\");",
                        "lineNumber": 166,
                        "lineChange": "added"
                      },
                      {
                        "line": "Cipher cipher = Cipher.getInstance(\"AES/GCM/NoPadding\");",
                        "lineNumber": 167,
                        "lineChange": "added"
                      },
                      {
                        "line": "cipher.init(cipherMode, spec, new GCMParameterSpec(AUTHENTICATION_TAG_LENGTH, nonce));",
                        "lineNumber": 168,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/vauvenal5/pieShare/commit/18468bf783a7ee736a4b05d6c66e363cb041ea72?diff=split#diff-164a90f5642f53516d8333a485e295a6L27",
                    "lines": [
                      {
                        "line": "private String provName;",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "private final String passwordEncryptionAlgo = \"PBEWithSHAAndTwofish-CBC\";",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "private final String encryptionAlgo = \"AES/CBC/PKCS5Padding\";",
                        "lineNumber": 26,
                        "lineChange": "removed"
                      },
                      {
                        "line": "private final String encryptionAlgo = \"AES/CFB8/NoPadding\";//AES/CFB/PKCS7Padding\";",
                        "lineNumber": 26,
                        "lineChange": "added"
                      },
                      {
                        "line": "private final String fileHashAlgo = \"MD5\";",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "public Cipher getEnDeCryptCipher() {",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "  try {",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return Cipher.getInstance(this.encryptionAlgo, this.provName);//return \"PBEWithSHAAndTwofish-CBC\";",
                        "lineNumber": 67,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    return Cipher.getInstance(this.encryptionAlgo, this.provName);",
                        "lineNumber": 67,
                        "lineChange": "added"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "  catch (NoSuchAlgorithmException | NoSuchProviderException | NoSuchPaddingException ex) {",
                        "lineNumber": 69,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "added versioning and included salt in encrypted byte stream.",
                  "Switch from CBC to GCM",
                  "Add support for other AES transformation"
                ],
                "precision": "very-high",
                "repoDatasetSize": 52,
                "cwe": [
                  "CWE-326"
                ]
              }
            },
            {
              "id": "java/TooPermissiveTrustManager",
              "name": "TooPermissiveTrustManager",
              "shortDescription": {
                "text": "Improper Certificate Validation"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nCommunication through encrypted TLS/SSL protocols can only take place when the server bears a valid certificate associating that server with a valid public-key identity issued by a third-party authority. If certificate validation is cursory or incomplete, this creates a weakness whereby an attacker can spoof one or more certificate details (e.g., expiration date), gaining unauthorized access to confidential data and privileged actions.\n\n### Best practices for prevention\n* Verify all aspects of any certificate provided, particularly chain of trust (issuing authority), host identity, and expiration.\n* Limit the validity period for certificates.\n* Avoid using self-signed certificates, certificate pinning, and wildcard certificates, as these all add levels of convenience but can also lead to loss of control over site/app security.\n* Disable older and insecure protocols (for example, SSL 2.0/3.0, MD5, and 3DES).\n* Ensure that all team members are familiar with current best practices and approaches, such as current TLS protocols.\n* Implement automated and manual testing using current tools and techniques designed to reveal this and related SSL weaknesses (for example, web application scanners).",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/pentaho/pentaho-kettle/commit/5a4014d3e4e7307198635a1d9d1cbe7e868fb889?diff=split#diff-b711fa3a1339a77fb1b62ea5a608f827L143",
                    "lines": [
                      {
                        "line": "  }",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @Override",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public X509Certificate[] getAcceptedIssuers() {",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return null;",
                        "lineNumber": 144,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    return new X509Certificate[0];",
                        "lineNumber": 147,
                        "lineChange": "added"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "};",
                        "lineNumber": 149,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/guardianproject/NetCipher/commit/3b971438ed74870685f404c43feae65fc413d703?diff=split#diff-6f4869070d4eee5c76931a7bf27ed055L179",
                    "lines": [
                      {
                        "line": "}",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "public void checkClientTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "    //not yet implemented",
                        "lineNumber": 179,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    ",
                        "lineNumber": 184,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tdebug (\"WARNING: Client Cert Trust NOT YET IMPLEMENTED\");",
                        "lineNumber": 185,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 671,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif (SHOW_DEBUG_OUTPUT)",
                        "lineNumber": 672,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tLog.d(TAG, msg);",
                        "lineNumber": 673,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 674,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/HtmlUnit/htmlunit/commit/2ab74fb459fa25764fa3c6f56d00cf076fadf69d?diff=split#diff-3070dfb96ed2fae966d731bf849982d1L125",
                    "lines": [
                      {
                        "line": " * {@inheritDoc}",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "public void checkClientTrusted(final X509Certificate[] chain, final String authType) throws CertificateException {",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Everyone is trusted!",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "    acceptedIssuers_.addAll(Arrays.asList(chain));",
                        "lineNumber": 131,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 132,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Finalize tests for HTTP libraries",
                  "Relates elastic/elasticsearch",
                  "* Allow possibility for pushing trust issue to user"
                ],
                "precision": "very-high",
                "repoDatasetSize": 54,
                "cwe": [
                  "CWE-295"
                ]
              }
            },
            {
              "id": "java/TLS/test",
              "name": "TLS/test",
              "shortDescription": {
                "text": "Inadequate Encryption Strength"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nImplementing encryption for the transmission and storage of sensitive information is essential. But encryption standards are constantly changing since attackers have more and more powerful resources at their disposal-along with more sophisticated attack algorithms. This means that encryption is only useful if it meets current standards appropriate for the type of data being transmitted or stored.\nWhen organizations use weakly encoded passwords or weak hashes (especially when they also utilize single-factor authentication, which places too much emphasis on passwords), attackers can potentially gain unauthorized access through a brute-force attack.\n\n### Best practices for prevention\n* Understand best practices of contemporary encryption algorithms and techniques.\n* Avoid encryption algorithms and techniques that are widely known to be outdated (for example, DES).\n* Implement multi-factor authentication to minimize reliance on a single factor, such as a password, that is too susceptible to brute-force attacks.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/apache/cloudstack/commit/91f7012b015249d9d74dace8874ee8f38b54bfc2?diff=split#diff-5604a4e589dc38cc8d80f2f4020c2a23L53",
                    "lines": [
                      {
                        "line": "public static SSLContext getSSLContext() throws NoSuchAlgorithmException {",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return SSLContext.getInstance(\"TLSv1\");",
                        "lineNumber": 52,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    return SSLContext.getInstance(\"TLSv1.2\");",
                        "lineNumber": 69,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 70,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/MissionCriticalCloud/cosmic/commit/3a4004a34b42e30a49a1c48f1ff57e5f3ca26913?diff=split#diff-49bfef0c8d16a2c34d787d4fca65e2e7L35",
                    "lines": [
                      {
                        "line": "public static SSLContext getSSLContext() throws NoSuchAlgorithmException {",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return SSLContext.getInstance(\"TLSv1\");",
                        "lineNumber": 34,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    return SSLContext.getInstance(\"TLSv1.2\");",
                        "lineNumber": 34,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 35,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/hypercube1024/firefly/commit/e2e4d7810c9bb202bbef3d5022e3b13447f102dd?diff=split#diff-fb5cd0d3953731ed2bdb241178f1ce05L32",
                    "lines": [
                      {
                        "line": "  tmf.init(ks);",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "  sslContext = SSLContext.getInstance(\"TLS\");",
                        "lineNumber": 31,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  sslContext = SSLContext.getInstance(\"TLSv1.2\");",
                        "lineNumber": 31,
                        "lineChange": "added"
                      },
                      {
                        "line": "  sslContext.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "return sslContext;",
                        "lineNumber": 33,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Configuring TSL/SSL now supports property placeholders.",
                  "support for TLS config tweaks",
                  "Temporarily peg SSL version to TLSv1.2."
                ],
                "precision": "very-high",
                "repoDatasetSize": 78,
                "cwe": [
                  "CWE-326"
                ]
              }
            },
            {
              "id": "java/TimingAttack",
              "name": "TimingAttack",
              "shortDescription": {
                "text": "Observable Timing Discrepancy (Timing Attack)"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\nA timing attack is a form of side-channel attack, meaning it does not take advantage of the way the code is structured, but rather exploits external clues that let an attacker infer the program's state. In a timing attack, program state is inferred from the time it takes to execute a particular operation. For example, an app might use a lookup table of valid session IDs to speed up access.\nWhile this is convenient for validated users, an invalid session ID will take far longer to be rejected (since it's not in the lookup table), giving the attackers a valuable way to engineer a brute-force attack. All they need to do is test a large number of randomly generated session IDs in the hope of discovering a valid one. Once access is granted, through the session ID, the malicious actor may impersonate a legitimate user, executing actions or freely accessing secure data. Through brute force, such as a massive bot attack, this weakness can be successfully exploited to bypass even very strong encryption algorithms.\n\n### Best practices for prevention\n* Implement a constant-time algorithm to ensure that timing is identical regardless of input validity and returned outcome.\n* If a constant-time algorithm is impractical due to a desire to optimize performance, choose another technique such as blinding.\n* Promote an awareness among developers that encryption is not enough if your app is giving off clues to help attackers.\n* Timing attacks often depend on the production environment and are thus difficult to test during development; be sure to use a staging environment as close as possible to production.\n* Choose hardened, reliable libraries for encryption and authentication with side-channel attack protection strategies rather than implementing your own methods.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-208"
                ]
              }
            },
            {
              "id": "java/InsecureCipherNoIntegrity/test",
              "name": "InsecureCipherNoIntegrity/test",
              "shortDescription": {
                "text": "Use of a Broken or Risky Cryptographic Algorithm"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nWhen sensitive information is transmitted with weak encryption, attackers are potentially able to intercept the information and decrypt it, with a wide range of negative consequences. This includes accessing code or content they are not authorized to view and changing or taking down a site or app, often with a demand for ransom. Every developer is aware of the risks of transmitting sensitive information in plain text. Yet many still use outdated or inferior cryptographic methods to protect information under their control. As cryptographic methods grow stronger with time, code must be updated to incorporate more modern and secure cryptography.\n\n### Best practices for prevention\n* Avoid using DES, and use AES (in a secure mode, such as Galois/Counter Mode) or another strong encryption algorithm instead.\n* Be aware of outdated hashes, such as MD5 and SHA1 (along with many others); recognize and implement current cryptographic standards instead.\n* Never use custom or DIY security and cryptographic methods; instead, use methods that are part of an accepted library or framework.\n* Ensure that code dealing with cryptographic methods is highly modular and can be easily replaced as security standards change.\n* Increase developer awareness of proper encryption key management and protection to ensure best practices throughout the application.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/terracotta-bank/terracotta-bank/commit/a27453b52859d32ef25694869c1662a9493c621c?diff=split#diff-49444057459eecb4ff09662c3beab114L95",
                    "lines": [
                      {
                        "line": "String ivHeader = request.getHeader(\"X-Encryption-Iv\");",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "byte[] iv = Base64.getDecoder().decode(ivHeader);",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");",
                        "lineNumber": 94,
                        "lineChange": "removed"
                      },
                      {
                        "line": "cipher.init(Cipher.DECRYPT_MODE, secretKey(), new IvParameterSpec(iv));",
                        "lineNumber": 95,
                        "lineChange": "removed"
                      },
                      {
                        "line": "Cipher cipher = Cipher.getInstance(\"AES/GCM/NoPadding\");",
                        "lineNumber": 95,
                        "lineChange": "added"
                      },
                      {
                        "line": "cipher.init(Cipher.DECRYPT_MODE, secretKey(), new GCMParameterSpec(128, iv));",
                        "lineNumber": 96,
                        "lineChange": "added"
                      },
                      {
                        "line": "cipher.updateAAD(version.getBytes(UTF_8));",
                        "lineNumber": 97,
                        "lineChange": "added"
                      },
                      {
                        "line": "InputStream plain = new CipherInputStream(new Base64InputStream(request.getInputStream()), cipher);",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn new DecryptedWrapper(request, plain);",
                        "lineNumber": 99,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/oracle/helidon/commit/bd7b527d900fc3c7c5204459f9bf6dabb5de9f3f?diff=split#diff-5ab21f1b0b5ca2653372fd39b4aa40b0L64",
                    "lines": [
                      {
                        "line": "KeySpec keySpec = new PBEKeySpec(masterPassword, salt, 10000, 128);",
                        "lineNumber": 61,
                        "lineChange": "removed"
                      },
                      {
                        "line": "KeySpec keySpec = new PBEKeySpec(masterPassword, salt, 10000, 256);",
                        "lineNumber": 61,
                        "lineChange": "added"
                      },
                      {
                        "line": "SecretKeySpec spec = new SecretKeySpec(secretKeyFactory.generateSecret(keySpec).getEncoded(), \"AES\");",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");",
                        "lineNumber": 63,
                        "lineChange": "removed"
                      },
                      {
                        "line": "cipher.init(cipherMode, spec, new IvParameterSpec(salt));",
                        "lineNumber": 64,
                        "lineChange": "removed"
                      },
                      {
                        "line": "Cipher cipher = Cipher.getInstance(\"AES/GCM/NoPadding\");",
                        "lineNumber": 63,
                        "lineChange": "added"
                      },
                      {
                        "line": "cipher.init(cipherMode, spec, new GCMParameterSpec(128, nonce));",
                        "lineNumber": 64,
                        "lineChange": "added"
                      },
                      {
                        "line": " return cipher;",
                        "lineNumber": 66,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Esri/mapbook-android/commit/29dbb58917955ca69632a80cc189247f6398fdbb?diff=split#diff-9865f4effc693075a16c0a2b0657d46eL84",
                    "lines": [
                      {
                        "line": "public class CredentialCryptographer {",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String TAG = CredentialCryptographer.class.getSimpleName();",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String CIPHER_TYPE = \"AES/GCM/NoPadding\";",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String RSA_MODE =  \"RSA/ECB/PKCS1Padding\";",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String AES_MODE = \"AES/ECB/PKCS7Padding\";",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String AndroidKeyStore = \"AndroidKeyStore\";",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String ALIAS = \"CRED_KEY\";",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "final SecretKey key = (SecretKey) keyStore.getKey(ALIAS, null);",
                        "lineNumber": 236,
                        "lineChange": "none"
                      },
                      {
                        "line": "final Cipher c = Cipher.getInstance(CIPHER_TYPE);",
                        "lineNumber": 238,
                        "lineChange": "none"
                      },
                      {
                        "line": "final File file = new File(getFilePath(encryptedDataFileName));",
                        "lineNumber": 240,
                        "lineChange": "none"
                      },
                      {
                        "line": "byte [] decodedBytes = null;",
                        "lineNumber": 473,
                        "lineChange": "removed"
                      },
                      {
                        "line": "try{",
                        "lineNumber": 474,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  final Cipher c = Cipher.getInstance(AES_MODE, \"BC\");",
                        "lineNumber": 475,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  c.init(Cipher.DECRYPT_MODE, getSecretKey(context));",
                        "lineNumber": 476,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  decodedBytes = c.doFinal(encrypted);",
                        "lineNumber": 477,
                        "lineChange": "removed"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "added versioning and included salt in encrypted byte stream.",
                  "Switch from CBC to GCM"
                ],
                "precision": "very-high",
                "repoDatasetSize": 54,
                "cwe": [
                  "CWE-327"
                ]
              }
            },
            {
              "id": "python/CommandInjection",
              "name": "CommandInjection",
              "shortDescription": {
                "text": "Command Injection"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nWith an OS command injection attack a web application user can pass commands directly to the system shell, attached to a legitimate request. These commands can then be executed on the application server, potentially leading to harmful consequences, including data exposure or deletion. Like code injection attacks, command injection attacks are essentially a failure of data validation. Unlike code injection attacks, which introduce new code, command injection attacks use existing system functions, often taking advantage of the application's unnecessarily high privilege level, increasing the risk of serious harm and reputational damage.\n\n### Best practices for prevention\n- Never trust user input. Assume any input may transmit harmful values.\n- Adopt the principle of least privilege: No application should have a greater access level than needed to run its required tasks.\n- Control user access policies on a task-by-task basis.\n- Don't pass user input directly to the system; use libraries or APIs that lack system access.\n- Where shell commands must be passed, escape values using functions like shlex for Python, or escapeshellarg() for PHP.\n- Sanitize user input with regular expressions to define permitted characters along with maximum string length.\n- Convert special characters such as `& |  ; $ > < \\ !` before passing to the server.\n- Whitelist permitted commands and validate user responses against these expectations.\n- Remember that code injection can take place on multiple fronts: GET and POST requests, but also cookies and HTTP headers.\n- Ensure up-to-date patching across all systems to remediate known vulnerabilities.\n- Educate all team members on safer data handling procedures to prevent attacks.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/DustinBorn/avain/commit/4776439387645bced0e86e3766817de2562bf2eb?diff=split#diff-40f53a8850b6eb3209bd2d436d3ec5acL41",
                    "lines": [
                      {
                        "line": "# first download the data feed overview to retrieve URLs to all data feeds",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "try:",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "    nvd_response = requests.get(\"https://nvd.nist.gov/vuln/data-feeds\", timeout=20)",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "except:",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "communicate_warning(\"An error occured when trying to download webpage: https://nvd.nist.gov/vuln/data-feeds\")",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "# match the data feed URLs",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "nvd_nist_datafeed_html = nvd_response.text",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "jfeed_expr = re.compile(r\"https://nvd\\.nist\\.gov/feeds/json/cve/1\\.1/nvdcve-1\\.1-\\d\\d\\d\\d.json\\.zip\")",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "nvd_feed_urls = re.findall(jfeed_expr, nvd_nist_datafeed_html)",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "if not nvd_feed_urls:",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "with open(WGET_OUTFILE, \"w\") as file:",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "    zipfiles = []",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "    for nvd_feed_url in nvd_feed_urls:",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "        outname = os.path.join(NVD_DATAFEED_DIR, nvd_feed_url.split(\"/\")[-1])",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return_code = subprocess.call(\"wget %s -O %s\" % (nvd_feed_url, outname), stdout=file, stderr=subprocess.STDOUT, shell=True)",
                        "lineNumber": 65,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        return_code = subprocess.call(\"wget %s -O %s\" % (shlex.quote(nvd_feed_url), shlex.quote(outname)),",
                        "lineNumber": 86,
                        "lineChange": "added"
                      },
                      {
                        "line": "                                      stdout=file, stderr=subprocess.STDOUT, shell=True)",
                        "lineNumber": 87,
                        "lineChange": "added"
                      },
                      {
                        "line": "        if return_code != 0:",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "            NVD_UPDATE_SUCCESS = False",
                        "lineNumber": 89,
                        "lineChange": "added"
                      },
                      {
                        "line": "            communicate_warning(\"Getting NVD data feed %s failed\" %  nvd_feed_url)",
                        "lineNumber": 90,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/phase/o/commit/0f4bf9160b046e42f4cfad49585cc727b5213dc0?diff=split#diff-d689391370727e13cf640b0a56f5c1f0L32",
                    "lines": [
                      {
                        "line": "    compileO()",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "#Run code",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "code = request.form['code']",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "input = request.form['input'].replace('\\r\\n', '\\n')",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "print('Got code:', code, 'input:', input)",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "print('Running O code...')",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "p = Popen('./oide -e ' + code, stdout=PIPE, stderr=PIPE, stdin=PIPE, universal_newlines=True, shell=True)",
                        "lineNumber": 35,
                        "lineChange": "removed"
                      },
                      {
                        "line": "p = Popen(['./oide', '-e', code], stdout=PIPE, stderr=PIPE, stdin=PIPE, universal_newlines=True)",
                        "lineNumber": 35,
                        "lineChange": "added"
                      },
                      {
                        "line": "output, error = p.communicate(input)",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "#Output to IDE",
                        "lineNumber": 37,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/fossasia/susi_linux/commit/cb0d01d811fcb53863847ce57f57e8cb6c83df6c?diff=split#diff-d1b551c102df7ccabbf2e58275781476L15",
                    "lines": [
                      {
                        "line": "    return 'starting the installation script'",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "@app.route('/config/<stt>/<tts>/<hotword>/<wake>')",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "def config(stt, tts, hotword, wake):",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "    os.system('sudo bash /home/pi/SUSI.AI/susi_linux/access_point/server/config.sh {} {} {} {}'.format(stt,tts,hotword,wake))  #nosec #pylint-disable type: ignore",
                        "lineNumber": 16,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    subprocess.call(['sudo', 'bash' , 'server/config.sh', stt, tts, hotword, wake])  #nosec #pylint-disable type: ignore",
                        "lineNumber": 16,
                        "lineChange": "added"
                      },
                      {
                        "line": "    return 'Done' # pylint-enable",
                        "lineNumber": 17,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Tracking a local branch which in turn tracks a remote ref:",
                  "Python 3 support"
                ],
                "precision": "very-high",
                "repoDatasetSize": 128,
                "cwe": [
                  "CWE-78"
                ]
              }
            },
            {
              "id": "java/UsageOfUnencryptedSocket/test",
              "name": "UsageOfUnencryptedSocket/test",
              "shortDescription": {
                "text": "Cleartext Transmission of Sensitive Information"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\nThis weakness occurs when software transmits sensitive information, such as passwords or credit card numbers, in unencrypted form. This information may then be intercepted by threat actors using sniffer tools or interception techniques such as man-in-the-middle (MITM) attacks (often involving social engineering). Attackers can then use information gleaned to perform a variety of actions, depending on the information type. Possible actions include gaining unauthorized access, impersonating a user, moving laterally within the organization's network, or retrieving and potentially modifying files. This weakness is almost completely avoidable through intelligent architecture and design.\n\n### Best practices for prevention\n* Build web applications around a security mindset and the awareness that sniffers may be present at any time.\n* Ensure that all sensitive data transmission uses reliable encryption.\n* Implement security measures so that sensitive results are never returned in plain text.\n* Implement multiple-factor authentication methods to validate remote instances.\n* Use SSL not only at logon but throughout communications.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/ME1312/SubServers-2/commit/9a219a7d0fd259870a94d1f875f3cbb3c942ec1e?diff=split#diff-4a76c605749ad18708be15720e8fac67L57",
                    "lines": [
                      {
                        "line": "public SubDataClient(SubPlugin plugin, InetAddress address, int port, Encryption encryption) throws IOException {",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (Util.isNull(plugin, address, port)) throw new NullPointerException();",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "    socket = new Socket(address, port);",
                        "lineNumber": 56,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    socket = new NamedContainer<>(false, new Socket(address, port));",
                        "lineNumber": 60,
                        "lineChange": "added"
                      },
                      {
                        "line": "    this.plugin = plugin;",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.writer = new PrintWriter(socket.getOutputStream(), true);",
                        "lineNumber": 58,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    this.writer = new PrintWriter(socket.get().getOutputStream(), true);",
                        "lineNumber": 62,
                        "lineChange": "added"
                      },
                      {
                        "line": "    this.encryption = encryption;",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.queue = new LinkedList<NamedContainer<String, PacketOut>>();",
                        "lineNumber": 64,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/dddpaul/android-SimpleNetCat/commit/3235f85ae26fa31e1e36739c608668e15c53a04c?diff=split#diff-6689eedf89cc41d9c93933ea7ff5ebf4L62",
                    "lines": [
                      {
                        "line": "    int port = Integer.parseInt( params[2] );",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Log.d( CLASS_NAME, String.format( \"Connecting to %s:%d\", host, port ) );",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "    socket = new Socket( host, port );",
                        "lineNumber": 61,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    result.object = new Socket( host, port );",
                        "lineNumber": 65,
                        "lineChange": "added"
                      },
                      {
                        "line": "    break;",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "case RECEIVE:",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "    BufferedReader reader = new BufferedReader( new InputStreamReader( input ) );",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "    PrintWriter writer = new PrintWriter( socket.getOutputStream() );",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "    transferStreams( reader, writer );",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 114,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/rancher/cattle/commit/b06df6f37fdfe906b7804fbba41d2c02d472f8ab?diff=split#diff-125505ce5e24cbf259a0267dd1d3af77L314",
                    "lines": [
                      {
                        "line": "String[] parts = master.getConfig().getAdvertiseAddress().split(\":\");",
                        "lineNumber": 311,
                        "lineChange": "none"
                      },
                      {
                        "line": "try (",
                        "lineNumber": 312,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Socket socket = new Socket(parts[0], Integer.parseInt(parts[1]));",
                        "lineNumber": 313,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    OutputStream os = socket.getOutputStream();",
                        "lineNumber": 314,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    Socket socket = new Socket();",
                        "lineNumber": 313,
                        "lineChange": "added"
                      },
                      {
                        "line": ") {",
                        "lineNumber": 315,
                        "lineChange": "none"
                      },
                      {
                        "line": "    socket.connect(new InetSocketAddress(parts[0], Integer.parseInt(parts[1])), 5000);",
                        "lineNumber": 315,
                        "lineChange": "added"
                      },
                      {
                        "line": "    log.info(\"Connection test to master\");",
                        "lineNumber": 316,
                        "lineChange": "none"
                      },
                      {
                        "line": " } catch (IOException e) {",
                        "lineNumber": 317,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Use thread local sockets for everything except IDLE and STATUS.",
                  "- Adding a test that a locator can shut itself down\nwith SSL.",
                  "Added support for SSL secured Manager connections"
                ],
                "precision": "very-high",
                "repoDatasetSize": 108,
                "cwe": [
                  "CWE-319"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "java/NonCryptoHardcodedSecret",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found hardcoded secret.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found hardcoded {0}.",
            "arguments": [
              "[secret](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/com/unboundid/ldap/sdk/unboundidds/extensions/GenerateTOTPSharedSecretExtendedResult.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 78,
                  "endLine": 78,
                  "startColumn": 8,
                  "endColumn": 34
                }
              }
            }
          ],
          "fingerprints": {
            "0": "abede1bc7e5726ac61f886c205100ea18f9dccb747df788cff93a76515ea4ed0",
            "1": "197da1b7.ebf91977.3c7d90aa.de031890.4ad0fbd6.ce109560.2ed7aa4c.1ffb7ce2.197da1b7.ebf91977.34d94eb1.de031890.bb61bed7.ce109560.ace5a5bf.61d19a00"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/com/unboundid/ldap/sdk/unboundidds/extensions/GenerateTOTPSharedSecretExtendedResult.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 78,
                            "endLine": 78,
                            "startColumn": 8,
                            "endColumn": 34
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 752,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/NonCryptoHardcodedSecret",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found hardcoded secret.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found hardcoded {0}.",
            "arguments": [
              "[secret](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/com/unboundid/ldap/sdk/unboundidds/extensions/GetPasswordQualityRequirementsExtendedResult.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 90,
                  "endLine": 90,
                  "startColumn": 8,
                  "endColumn": 34
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b4561eecc28363384b929057bcc6d1efb558ca7e298fc63404336d89e0ea3dc4",
            "1": "197da1b7.92e378d2.3c7d90aa.de031890.8b2d3351.ce109560.2ed7aa4c.17c6de0e.4a2686b9.92e378d2.34d94eb1.de031890.bb61bed7.ce109560.ace5a5bf.17c6de0e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/com/unboundid/ldap/sdk/unboundidds/extensions/GetPasswordQualityRequirementsExtendedResult.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 8,
                            "endColumn": 34
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 752,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/NonCryptoHardcodedSecret",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found hardcoded secret.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found hardcoded {0}.",
            "arguments": [
              "[secret](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/com/unboundid/ldap/sdk/unboundidds/extensions/ValidateTOTPPasswordExtendedRequest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 80,
                  "endLine": 80,
                  "startColumn": 8,
                  "endColumn": 34
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0478b7d7cff12605a8fac33aba8816ada6bd65a7dadd7165a034d06bfe3fa281",
            "1": "da8f72c3.dd05ec30.34d94eb1.de031890.8b2d3351.ce109560.ace5a5bf.87dfd8cc.da8f72c3.1efc0308.730b0e0d.de031890.bb61bed7.ce109560.ace5a5bf.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/com/unboundid/ldap/sdk/unboundidds/extensions/ValidateTOTPPasswordExtendedRequest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 8,
                            "endColumn": 34
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 752,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/NonCryptoHardcodedSecret",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found hardcoded secret.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found hardcoded {0}.",
            "arguments": [
              "[secret](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/com/unboundid/ldap/sdk/unboundidds/controls/GetPasswordPolicyStateIssuesResponseControl.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 104,
                  "endLine": 104,
                  "startColumn": 8,
                  "endColumn": 34
                }
              }
            }
          ],
          "fingerprints": {
            "0": "751476b95e8b7aeaed454cd2b21e0b48635d5a5e808d58f8be52cd91db22135a",
            "1": "1100d382.dd05ec30.afed152f.de031890.8b2d3351.ce109560.ace5a5bf.03178f86.1100d382.dd05ec30.afed152f.de031890.bb61bed7.ce109560.ace5a5bf.1ce3235f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/com/unboundid/ldap/sdk/unboundidds/controls/GetPasswordPolicyStateIssuesResponseControl.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 104,
                            "endLine": 104,
                            "startColumn": 8,
                            "endColumn": 34
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 752,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/NonCryptoHardcodedSecret",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found hardcoded secret.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found hardcoded {0}.",
            "arguments": [
              "[secret](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/com/unboundid/ldap/sdk/unboundidds/controls/PasswordUpdateBehaviorRequestControl.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 87,
                  "endLine": 87,
                  "startColumn": 8,
                  "endColumn": 34
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3c1dab2649041a442fd3bf33fc891669329cf36aee1331cc8eef586db6be96e6",
            "1": "416089e6.dd05ec30.34d94eb1.de031890.eca1801e.ce109560.ace5a5bf.713dbdb5.54a059af.dd05ec30.34d94eb1.de031890.79134071.ce109560.ace5a5bf.c3e3c6ad"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/com/unboundid/ldap/sdk/unboundidds/controls/PasswordUpdateBehaviorRequestControl.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 87,
                            "endLine": 87,
                            "startColumn": 8,
                            "endColumn": 34
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 752,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/NonCryptoHardcodedSecret",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found hardcoded secret.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found hardcoded {0}.",
            "arguments": [
              "[secret](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/com/unboundid/ldap/sdk/unboundidds/controls/GeneratePasswordRequestControl.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 87,
                  "endLine": 87,
                  "startColumn": 8,
                  "endColumn": 34
                }
              }
            }
          ],
          "fingerprints": {
            "0": "228f33b9cbeaaf333eeb94f81676d3ab3139da16af03cc12fbb5fb128c1b2115",
            "1": "cb724ed2.dd05ec30.34d94eb1.de031890.8b2d3351.ce109560.ace5a5bf.0b96f95e.adca6220.dd05ec30.34d94eb1.de031890.79134071.ce109560.ace5a5bf.41e78d71"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/com/unboundid/ldap/sdk/unboundidds/controls/GeneratePasswordRequestControl.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 87,
                            "endLine": 87,
                            "startColumn": 8,
                            "endColumn": 34
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 752,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/NonCryptoHardcodedSecret",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found hardcoded secret.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found hardcoded {0}.",
            "arguments": [
              "[secret](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/com/unboundid/ldap/sdk/unboundidds/extensions/GenerateTOTPSharedSecretExtendedRequest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 132,
                  "endLine": 132,
                  "startColumn": 8,
                  "endColumn": 34
                }
              }
            }
          ],
          "fingerprints": {
            "0": "136a78c8aa95935f13bc596810fa4ec63ebb9ab41b7deb950a2584cea849f3ae",
            "1": "3265384a.dd05ec30.34d94eb1.de031890.8b2d3351.47976d71.ace5a5bf.980365e7.3265384a.dd05ec30.34d94eb1.de031890.bb61bed7.47976d71.ace5a5bf.980365e7"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/com/unboundid/ldap/sdk/unboundidds/extensions/GenerateTOTPSharedSecretExtendedRequest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 132,
                            "endLine": 132,
                            "startColumn": 8,
                            "endColumn": 34
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 752,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/NonCryptoHardcodedSecret",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found hardcoded secret.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found hardcoded {0}.",
            "arguments": [
              "[secret](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/com/unboundid/ldap/sdk/experimental/DraftBeheraLDAPPasswordPolicy10ResponseControl.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 72,
                  "endLine": 72,
                  "startColumn": 8,
                  "endColumn": 35
                }
              }
            }
          ],
          "fingerprints": {
            "0": "cca723b05f49ef1a3eacefa6a524422a43ed404b1b1f189879d204a992f793b4",
            "1": "c228c1f4.48602545.34d94eb1.de031890.8b2d3351.ce109560.ace5a5bf.0e0a6778.c228c1f4.48602545.3bfe53d4.de031890.79134071.ce109560.ace5a5bf.0e0a6778"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/com/unboundid/ldap/sdk/experimental/DraftBeheraLDAPPasswordPolicy10ResponseControl.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 72,
                            "endLine": 72,
                            "startColumn": 8,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 752,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/NonCryptoHardcodedSecret",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found hardcoded secret.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found hardcoded {0}.",
            "arguments": [
              "[secret](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/com/unboundid/ldap/sdk/unboundidds/controls/PasswordValidationDetailsResponseControl.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 98,
                  "endLine": 98,
                  "startColumn": 7,
                  "endColumn": 33
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ae651e194ad829e7158a642114f738599b730244019f5c0ec8c963785a4242d3",
            "1": "024850cb.e7ee27bd.33f6fed3.de031890.8b2d3351.ce109560.ace5a5bf.dcd142e5.024850cb.e7ee27bd.33f6fed3.de031890.bb61bed7.ce109560.ace5a5bf.dcd142e5"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/com/unboundid/ldap/sdk/unboundidds/controls/PasswordValidationDetailsResponseControl.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 98,
                            "endLine": 98,
                            "startColumn": 7,
                            "endColumn": 33
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 752,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/NonCryptoHardcodedSecret",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found hardcoded secret.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found hardcoded {0}.",
            "arguments": [
              "[secret](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/com/unboundid/ldap/sdk/extensions/PasswordModifyExtendedRequest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 119,
                  "endLine": 119,
                  "startColumn": 8,
                  "endColumn": 33
                }
              }
            }
          ],
          "fingerprints": {
            "0": "977063901b22498240cd1aa374ea8b3837de299a2799b6177ab129d12fe89742",
            "1": "416089e6.dd05ec30.ed80f883.de031890.8b2d3351.ce109560.ace5a5bf.87dfd8cc.7656a3d1.dd05ec30.ed80f883.de031890.bb61bed7.ce109560.ace5a5bf.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/com/unboundid/ldap/sdk/extensions/PasswordModifyExtendedRequest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 119,
                            "endLine": 119,
                            "startColumn": 8,
                            "endColumn": 33
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 752,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/NonCryptoHardcodedSecret",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found hardcoded secret.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found hardcoded {0}.",
            "arguments": [
              "[secret](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/com/unboundid/ldap/sdk/unboundidds/extensions/PasswordPolicyStateExtendedRequest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 200,
                  "endLine": 200,
                  "startColumn": 8,
                  "endColumn": 33
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9333f4183a6cb162006c9ba2d3a74de18321cbc8cbab61cc19216aeeda3793a2",
            "1": "416089e6.dd05ec30.34d94eb1.de031890.8b2d3351.ce109560.ace5a5bf.ed82a8d1.7656a3d1.dd05ec30.34d94eb1.de031890.bb61bed7.ce109560.ace5a5bf.5707f529"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/com/unboundid/ldap/sdk/unboundidds/extensions/PasswordPolicyStateExtendedRequest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 200,
                            "endLine": 200,
                            "startColumn": 8,
                            "endColumn": 33
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 752,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/NonCryptoHardcodedSecret",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found hardcoded secret.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found hardcoded {0}.",
            "arguments": [
              "[secret](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/com/unboundid/ldap/sdk/unboundidds/controls/PasswordPolicyRequestControl.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 121,
                  "endLine": 121,
                  "startColumn": 8,
                  "endColumn": 35
                }
              }
            }
          ],
          "fingerprints": {
            "0": "02876d11dcfb984767c75c573c563a0a84a413b5f1a59854016595015d854013",
            "1": "416089e6.48602545.34d94eb1.de031890.8b2d3351.ce109560.ace5a5bf.87dfd8cc.7656a3d1.48602545.34d94eb1.de031890.79134071.ce109560.ace5a5bf.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/com/unboundid/ldap/sdk/unboundidds/controls/PasswordPolicyRequestControl.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 121,
                            "endLine": 121,
                            "startColumn": 8,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 752,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/NonCryptoHardcodedSecret",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found hardcoded secret.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found hardcoded {0}.",
            "arguments": [
              "[secret](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/com/unboundid/ldap/sdk/unboundidds/controls/GetPasswordPolicyStateIssuesRequestControl.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 68,
                  "endLine": 68,
                  "startColumn": 8,
                  "endColumn": 34
                }
              }
            }
          ],
          "fingerprints": {
            "0": "22b5c8f4d3e65dbf28f5b061e1d861f3247a436cb182cfa8d39398eace549c80",
            "1": "e4d31120.dd05ec30.34d94eb1.de031890.8b2d3351.ce109560.ace5a5bf.c0eeff80.08df84be.dd05ec30.34d94eb1.de031890.79134071.ce109560.ace5a5bf.c0eeff80"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/com/unboundid/ldap/sdk/unboundidds/controls/GetPasswordPolicyStateIssuesRequestControl.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 8,
                            "endColumn": 34
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 752,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/NonCryptoHardcodedSecret",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found hardcoded secret.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found hardcoded {0}.",
            "arguments": [
              "[secret](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/com/unboundid/ldap/sdk/unboundidds/extensions/GeneratePasswordExtendedResult.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 118,
                  "endLine": 118,
                  "startColumn": 8,
                  "endColumn": 34
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e63e84b3231e44465b2fd78acd0866f62709671808111546bf34c05967c7dee6",
            "1": "197da1b7.3babdbad.e075d445.de031890.8b2d3351.ce109560.2ed7aa4c.3f82c252.bbbd7c96.3babdbad.34d94eb1.bbd415de.bb61bed7.ce109560.ace5a5bf.3f82c252"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/com/unboundid/ldap/sdk/unboundidds/extensions/GeneratePasswordExtendedResult.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 118,
                            "endLine": 118,
                            "startColumn": 8,
                            "endColumn": 34
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 752,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/NonCryptoHardcodedSecret",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found hardcoded secret.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found hardcoded {0}.",
            "arguments": [
              "[secret](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/com/unboundid/ldap/sdk/unboundidds/controls/PasswordPolicyResponseControl.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 99,
                  "endLine": 99,
                  "startColumn": 8,
                  "endColumn": 35
                }
              }
            }
          ],
          "fingerprints": {
            "0": "24919c11ae5329956fc7adc5de24095c72fed812283263ad963617586c46167b",
            "1": "c228c1f4.48602545.34d94eb1.de031890.8b2d3351.ce109560.ace5a5bf.0e0a6778.c9ea4ed3.48602545.3bfe53d4.de031890.79134071.ce109560.3efdb43b.0e0a6778"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/com/unboundid/ldap/sdk/unboundidds/controls/PasswordPolicyResponseControl.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 99,
                            "endLine": 99,
                            "startColumn": 8,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 752,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/NonCryptoHardcodedSecret",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found hardcoded secret.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found hardcoded {0}.",
            "arguments": [
              "[secret](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/com/unboundid/ldap/sdk/controls/PasswordExpiringControl.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 67,
                  "endLine": 67,
                  "startColumn": 54,
                  "endColumn": 79
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fe37e4b65ad1138499076daba5b8fba1b4971a35b16f8761bd2231aa3f403acd",
            "1": "416089e6.dd05ec30.076c8207.de031890.8b2d3351.ce109560.ace5a5bf.29c650ac.41924a3d.dd05ec30.076c8207.de031890.bb61bed7.ce109560.ace5a5bf.29c650ac"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/com/unboundid/ldap/sdk/controls/PasswordExpiringControl.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 67,
                            "endLine": 67,
                            "startColumn": 54,
                            "endColumn": 79
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 752,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/NonCryptoHardcodedSecret",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found hardcoded secret.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found hardcoded {0}.",
            "arguments": [
              "[secret](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/com/unboundid/ldap/sdk/unboundidds/controls/PurgePasswordRequestControl.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 92,
                  "endLine": 92,
                  "startColumn": 8,
                  "endColumn": 34
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9695bc2aa471d03f086ae0b26d9513895449c3e0500384b80c9196663cb97164",
            "1": "b6c7666f.dd05ec30.4af9b652.de031890.8b2d3351.ce109560.ace5a5bf.a898b594.b6c7666f.dd05ec30.4af9b652.de031890.79134071.ce109560.ace5a5bf.a898b594"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/com/unboundid/ldap/sdk/unboundidds/controls/PurgePasswordRequestControl.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 92,
                            "endLine": 92,
                            "startColumn": 8,
                            "endColumn": 34
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 752,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/NonCryptoHardcodedSecret",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found hardcoded secret.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found hardcoded {0}.",
            "arguments": [
              "[secret](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/com/unboundid/ldap/sdk/unboundidds/extensions/GeneratePasswordExtendedRequest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 149,
                  "endLine": 149,
                  "startColumn": 8,
                  "endColumn": 34
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2312dedc126aa911053206a15526bbc7ab79919a1294dd3cace9adafd07affc6",
            "1": "cb724ed2.dd05ec30.34d94eb1.de031890.8b2d3351.ce109560.ace5a5bf.0b96f95e.cb724ed2.dd05ec30.34d94eb1.de031890.bb61bed7.ce109560.ace5a5bf.41e78d71"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/com/unboundid/ldap/sdk/unboundidds/extensions/GeneratePasswordExtendedRequest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 149,
                            "endLine": 149,
                            "startColumn": 8,
                            "endColumn": 34
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 752,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/NonCryptoHardcodedSecret",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found hardcoded secret.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found hardcoded {0}.",
            "arguments": [
              "[secret](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/com/unboundid/ldap/sdk/unboundidds/controls/PasswordValidationDetailsRequestControl.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 67,
                  "endLine": 67,
                  "startColumn": 7,
                  "endColumn": 33
                }
              }
            }
          ],
          "fingerprints": {
            "0": "02b0a898c0ff09f19ea5a1b966bdccebefa3a17233c6565ce3b7afcc37d22933",
            "1": "416089e6.dd05ec30.34d94eb1.de031890.8b2d3351.ce109560.ace5a5bf.8f506c50.7656a3d1.dd05ec30.34d94eb1.de031890.79134071.ce109560.ace5a5bf.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/com/unboundid/ldap/sdk/unboundidds/controls/PasswordValidationDetailsRequestControl.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 67,
                            "endLine": 67,
                            "startColumn": 7,
                            "endColumn": 33
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 752,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/NonCryptoHardcodedSecret",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found hardcoded secret.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found hardcoded {0}.",
            "arguments": [
              "[secret](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/com/unboundid/ldap/sdk/experimental/DraftBeheraLDAPPasswordPolicy10RequestControl.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 110,
                  "endLine": 110,
                  "startColumn": 8,
                  "endColumn": 35
                }
              }
            }
          ],
          "fingerprints": {
            "0": "382bcb2769bf19d8e450fd263b84f3480427c75633c352f5608811bf34a0b138",
            "1": "416089e6.48602545.34d94eb1.de031890.8b2d3351.ce109560.ace5a5bf.87dfd8cc.e13a90dc.48602545.34d94eb1.de031890.79134071.ce109560.ace5a5bf.72156452"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/com/unboundid/ldap/sdk/experimental/DraftBeheraLDAPPasswordPolicy10RequestControl.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 110,
                            "endLine": 110,
                            "startColumn": 8,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 752,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/NonCryptoHardcodedSecret",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found hardcoded secret.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found hardcoded {0}.",
            "arguments": [
              "[secret](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/com/unboundid/ldap/sdk/unboundidds/extensions/RevokeTOTPSharedSecretExtendedRequest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 134,
                  "endLine": 134,
                  "startColumn": 8,
                  "endColumn": 34
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d560bfdcb1389865fc1bc0a6dbca0d92ce4a91e68cb488083b71bdde0bd5f0e4",
            "1": "8a018e6f.70267e71.34d94eb1.de031890.8b2d3351.ce109560.ace5a5bf.84bdfa2c.8a018e6f.70267e71.92c8715a.de031890.bb61bed7.ce109560.ace5a5bf.84bdfa2c"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/com/unboundid/ldap/sdk/unboundidds/extensions/RevokeTOTPSharedSecretExtendedRequest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 134,
                            "endLine": 134,
                            "startColumn": 8,
                            "endColumn": 34
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 752,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/NonCryptoHardcodedSecret",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found hardcoded secret.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found hardcoded {0}.",
            "arguments": [
              "[secret](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/com/unboundid/ldap/sdk/unboundidds/extensions/GetPasswordQualityRequirementsExtendedRequest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 87,
                  "endLine": 87,
                  "startColumn": 8,
                  "endColumn": 34
                }
              }
            }
          ],
          "fingerprints": {
            "0": "65c807a4319d5b7dffc258e8ef2fa69d8aba04a90220d9e065356312d8e76284",
            "1": "416089e6.dd05ec30.34d94eb1.de031890.8b2d3351.ce109560.ace5a5bf.65fe7d0a.7656a3d1.dd05ec30.34d94eb1.de031890.250ba219.ce109560.a35fa5e0.65fe7d0a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/com/unboundid/ldap/sdk/unboundidds/extensions/GetPasswordQualityRequirementsExtendedRequest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 87,
                            "endLine": 87,
                            "startColumn": 8,
                            "endColumn": 34
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 752,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/NonCryptoHardcodedSecret",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found hardcoded secret.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found hardcoded {0}.",
            "arguments": [
              "[secret](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/com/unboundid/ldap/sdk/controls/PasswordExpiredControl.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 126,
                  "endLine": 126,
                  "startColumn": 53,
                  "endColumn": 78
                }
              }
            }
          ],
          "fingerprints": {
            "0": "54e667307869c657bfc36daec652f850f2de13f4503683fe87f4ad20258eccf0",
            "1": "416089e6.869576ee.4a3a3c8c.de031890.8b2d3351.ce109560.ace5a5bf.0cf8d4c2.7656a3d1.869576ee.4a3a3c8c.de031890.bb61bed7.ce109560.ace5a5bf.0cf8d4c2"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/com/unboundid/ldap/sdk/controls/PasswordExpiredControl.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 126,
                            "endLine": 126,
                            "startColumn": 53,
                            "endColumn": 78
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 752,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/NonCryptoHardcodedSecret",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found hardcoded secret.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found hardcoded {0}.",
            "arguments": [
              "[secret](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/com/unboundid/ldap/sdk/unboundidds/controls/GeneratePasswordResponseControl.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 112,
                  "endLine": 112,
                  "startColumn": 8,
                  "endColumn": 34
                }
              }
            }
          ],
          "fingerprints": {
            "0": "089424228cbeb7299fd514576830ecda9d98bec8610fe7f4fc89cdbce2f58c41",
            "1": "90185db2.dd05ec30.04dba1d8.de031890.8b2d3351.ce109560.f38ca8ed.dd0abb94.90185db2.dd05ec30.3bfe53d4.de031890.bb61bed7.ce109560.f38ca8ed.dd0abb94"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/com/unboundid/ldap/sdk/unboundidds/controls/GeneratePasswordResponseControl.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 112,
                            "endLine": 112,
                            "startColumn": 8,
                            "endColumn": 34
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 752,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/NonCryptoHardcodedSecret",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found hardcoded secret.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found hardcoded {0}.",
            "arguments": [
              "[secret](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/com/unboundid/ldap/sdk/unboundidds/controls/RetirePasswordRequestControl.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 94,
                  "endLine": 94,
                  "startColumn": 8,
                  "endColumn": 34
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9c2fa92835194d46ff65f8e67c7fcc47eb13dc8923890bec833e3d83d0019d34",
            "1": "38318258.dd05ec30.85652ddb.de031890.8b2d3351.ce109560.ace5a5bf.87dfd8cc.38318258.dd05ec30.85652ddb.de031890.79134071.ce109560.ace5a5bf.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/com/unboundid/ldap/sdk/unboundidds/controls/RetirePasswordRequestControl.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 94,
                            "endLine": 94,
                            "startColumn": 8,
                            "endColumn": 34
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 752,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureDefaultAesCipher/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Default AES/ECB algorithm (AES) used in com.unboundid.util.CryptoHelper.getCipher may be insecure, because equal messages get encrypted to equal data. Consider using Galois/Counter Mode (algorithm AES/GCM/NoPadding).",
            "markdown": "Default AES/ECB algorithm ({0}) used in {1} may be insecure, because equal messages get encrypted to equal data. Consider using Galois/Counter Mode (algorithm AES/GCM/NoPadding).",
            "arguments": [
              "[AES](0)",
              "[com.unboundid.util.CryptoHelper.getCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 233,
                  "endLine": 233,
                  "startColumn": 19,
                  "endColumn": 41
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a6b907d702e349418f0666bf3ac3e6d7958fc6edc1aac30bdd08fc0ae96323ba",
            "1": "ca9876a9.1cbd3ff4.ba832df5.c0497337.3e9eb16c.bf8c21d8.9c8c6033.54d46e25.ca9876a9.1cbd3ff4.ba832df5.c0497337.3e9eb16c.bf8c21d8.df7e59ba.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 233,
                            "endLine": 233,
                            "startColumn": 42,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 233,
                            "endLine": 233,
                            "startColumn": 19,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureDefaultAesCipher/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Default AES/ECB algorithm (AES) used in com.unboundid.util.CryptoHelper.getCipher may be insecure, because equal messages get encrypted to equal data. Consider using Galois/Counter Mode (algorithm AES/GCM/NoPadding).",
            "markdown": "Default AES/ECB algorithm ({0}) used in {1} may be insecure, because equal messages get encrypted to equal data. Consider using Galois/Counter Mode (algorithm AES/GCM/NoPadding).",
            "arguments": [
              "[AES](0)",
              "[com.unboundid.util.CryptoHelper.getCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 235,
                  "endLine": 235,
                  "startColumn": 10,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0140b30cce4fdf724d756fd6243adac4fc48b130dcacd8dad73fc1598971adcb",
            "1": "19689298.e100d401.ba832df5.692919d5.3e9eb16c.bf8c21d8.a6108c8a.bcdc083a.19689298.e100d401.ba832df5.692919d5.3e9eb16c.bf8c21d8.df7e59ba.bcdc083a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 235,
                            "endLine": 235,
                            "startColumn": 33,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 235,
                            "endLine": 235,
                            "startColumn": 10,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureDefaultAesCipher/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Default AES/ECB algorithm (AES) used in com.unboundid.util.CryptoHelper.getCipher may be insecure, because equal messages get encrypted to equal data. Consider using Galois/Counter Mode (algorithm AES/GCM/NoPadding).",
            "markdown": "Default AES/ECB algorithm ({0}) used in {1} may be insecure, because equal messages get encrypted to equal data. Consider using Galois/Counter Mode (algorithm AES/GCM/NoPadding).",
            "arguments": [
              "[AES](0)",
              "[com.unboundid.util.CryptoHelper.getCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 302,
                  "endLine": 302,
                  "startColumn": 19,
                  "endColumn": 41
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a6cdccaec011b44f9b5d19efc5a6631be0f991dcf1893b811df8e106322d0854",
            "1": "ca9876a9.1cbd3ff4.ba832df5.c0497337.45295f25.bf8c21d8.c453dcc3.54d46e25.ca9876a9.1cbd3ff4.ba832df5.c0497337.45295f25.bf8c21d8.c453dcc3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 302,
                            "endLine": 302,
                            "startColumn": 42,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 302,
                            "endLine": 302,
                            "startColumn": 19,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureDefaultAesCipher/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Default AES/ECB algorithm (AES) used in com.unboundid.util.CryptoHelper.getCipher may be insecure, because equal messages get encrypted to equal data. Consider using Galois/Counter Mode (algorithm AES/GCM/NoPadding).",
            "markdown": "Default AES/ECB algorithm ({0}) used in {1} may be insecure, because equal messages get encrypted to equal data. Consider using Galois/Counter Mode (algorithm AES/GCM/NoPadding).",
            "arguments": [
              "[AES](0)",
              "[com.unboundid.util.CryptoHelper.getCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 304,
                  "endLine": 304,
                  "startColumn": 10,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5dc99e5c92ccf6dd17547c380c1c7680e971058ab0b1b94b9941cc632cb91999",
            "1": "ca9876a9.1cbd3ff4.ba832df5.ede9cf8e.3e9eb16c.bf8c21d8.c453dcc3.bcdc083a.ca9876a9.1cbd3ff4.ba832df5.ede9cf8e.3e9eb16c.bf8c21d8.c453dcc3.bcdc083a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 304,
                            "endLine": 304,
                            "startColumn": 33,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 304,
                            "endLine": 304,
                            "startColumn": 10,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureDefaultAesCipher/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Default AES/ECB algorithm (AES) used in com.unboundid.util.CryptoHelper.getCipher may be insecure, because equal messages get encrypted to equal data. Consider using Galois/Counter Mode (algorithm AES/GCM/NoPadding).",
            "markdown": "Default AES/ECB algorithm ({0}) used in {1} may be insecure, because equal messages get encrypted to equal data. Consider using Galois/Counter Mode (algorithm AES/GCM/NoPadding).",
            "arguments": [
              "[AES](0)",
              "[com.unboundid.util.CryptoHelper.getCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 313,
                  "endLine": 313,
                  "startColumn": 19,
                  "endColumn": 41
                }
              }
            }
          ],
          "fingerprints": {
            "0": "99f2e967d41a36eb5ed5aff05c023288ba4a63301032fb8ba2b905da6dccb2b9",
            "1": "ca9876a9.e100d401.ba832df5.692919d5.3e9eb16c.bf8c21d8.9c8c6033.54d46e25.ca9876a9.e100d401.ba832df5.692919d5.3e9eb16c.bf8c21d8.df7e59ba.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 313,
                            "endLine": 313,
                            "startColumn": 42,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 313,
                            "endLine": 313,
                            "startColumn": 19,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureDefaultAesCipher/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Default AES/ECB algorithm (AES) used in com.unboundid.util.CryptoHelper.getCipher may be insecure, because equal messages get encrypted to equal data. Consider using Galois/Counter Mode (algorithm AES/GCM/NoPadding).",
            "markdown": "Default AES/ECB algorithm ({0}) used in {1} may be insecure, because equal messages get encrypted to equal data. Consider using Galois/Counter Mode (algorithm AES/GCM/NoPadding).",
            "arguments": [
              "[AES](0)",
              "[com.unboundid.util.CryptoHelper.getCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 315,
                  "endLine": 315,
                  "startColumn": 10,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "af9e766a811683e755f4f213beaf03c828d3f20ec0c4555620ce77eee49db6e3",
            "1": "ca9876a9.e100d401.ba832df5.692919d5.3e9eb16c.bf8c21d8.a6108c8a.bcdc083a.ca9876a9.e100d401.ba832df5.692919d5.3e9eb16c.bf8c21d8.df7e59ba.bcdc083a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 315,
                            "endLine": 315,
                            "startColumn": 33,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 315,
                            "endLine": 315,
                            "startColumn": 10,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureDefaultAesCipher/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Default AES/ECB algorithm (AES) used in com.unboundid.util.CryptoHelper.getCipher may be insecure, because equal messages get encrypted to equal data. Consider using Galois/Counter Mode (algorithm AES/GCM/NoPadding).",
            "markdown": "Default AES/ECB algorithm ({0}) used in {1} may be insecure, because equal messages get encrypted to equal data. Consider using Galois/Counter Mode (algorithm AES/GCM/NoPadding).",
            "arguments": [
              "[AES](0)",
              "[com.unboundid.util.CryptoHelper.getCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 349,
                  "endLine": 349,
                  "startColumn": 7,
                  "endColumn": 29
                }
              }
            }
          ],
          "fingerprints": {
            "0": "cb7d8fe23652fe34692dc944432ae232c4dc71591dbf5f828c96d92db0314e41",
            "1": "1b46a441.1cbd3ff4.ba832df5.e22980a8.d31a8364.bf8c21d8.bae646e8.54d46e25.1b46a441.1cbd3ff4.ba832df5.e22980a8.d31a8364.bf8c21d8.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 349,
                            "endLine": 349,
                            "startColumn": 30,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 349,
                            "endLine": 349,
                            "startColumn": 7,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureDefaultAesCipher/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Default AES/ECB algorithm (AES) used in com.unboundid.util.CryptoHelper.getCipher may be insecure, because equal messages get encrypted to equal data. Consider using Galois/Counter Mode (algorithm AES/GCM/NoPadding).",
            "markdown": "Default AES/ECB algorithm ({0}) used in {1} may be insecure, because equal messages get encrypted to equal data. Consider using Galois/Counter Mode (algorithm AES/GCM/NoPadding).",
            "arguments": [
              "[AES](0)",
              "[com.unboundid.util.CryptoHelper.getCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 357,
                  "endLine": 357,
                  "startColumn": 19,
                  "endColumn": 41
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d8608ce5c0106979d70896e6f02934b21a54d5cb46d14527db2cbe2e62649b67",
            "1": "6f5723f5.f6b412be.ba832df5.c0497337.3e9eb16c.bf8c21d8.00e67e3a.54d46e25.6f5723f5.f6b412be.ba832df5.c0497337.3e9eb16c.bf8c21d8.00e67e3a.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 357,
                            "endLine": 357,
                            "startColumn": 42,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 357,
                            "endLine": 357,
                            "startColumn": 19,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureDefaultAesCipher/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Default AES/ECB algorithm (AES) used in com.unboundid.util.CryptoHelper.getCipher may be insecure, because equal messages get encrypted to equal data. Consider using Galois/Counter Mode (algorithm AES/GCM/NoPadding).",
            "markdown": "Default AES/ECB algorithm ({0}) used in {1} may be insecure, because equal messages get encrypted to equal data. Consider using Galois/Counter Mode (algorithm AES/GCM/NoPadding).",
            "arguments": [
              "[AES](0)",
              "[com.unboundid.util.CryptoHelper.getCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 359,
                  "endLine": 359,
                  "startColumn": 10,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "78df56290c04d854fab0f3ffd64d01738af4b4ecd47d52bea33919b110e15447",
            "1": "6f5723f5.1cbd3ff4.ba832df5.ede9cf8e.3e9eb16c.bf8c21d8.00e67e3a.bcdc083a.6f5723f5.1cbd3ff4.ba832df5.ede9cf8e.3e9eb16c.bf8c21d8.00e67e3a.bcdc083a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 359,
                            "endLine": 359,
                            "startColumn": 33,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 359,
                            "endLine": 359,
                            "startColumn": 10,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureDefaultAesCipher/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Default AES/ECB algorithm (AES) used in com.unboundid.util.CryptoHelper.getCipher may be insecure, because equal messages get encrypted to equal data. Consider using Galois/Counter Mode (algorithm AES/GCM/NoPadding).",
            "markdown": "Default AES/ECB algorithm ({0}) used in {1} may be insecure, because equal messages get encrypted to equal data. Consider using Galois/Counter Mode (algorithm AES/GCM/NoPadding).",
            "arguments": [
              "[AES](0)",
              "[com.unboundid.util.CryptoHelper.getCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 369,
                  "endLine": 369,
                  "startColumn": 19,
                  "endColumn": 41
                }
              }
            }
          ],
          "fingerprints": {
            "0": "223ffd35905dbfbe57b9cc848f540f9be2c49fe4ddc4c6a6671888cb2fabe2d3",
            "1": "ca9876a9.e100d401.ba832df5.692919d5.3e9eb16c.bf8c21d8.9c8c6033.54d46e25.ca9876a9.e100d401.ba832df5.692919d5.3e9eb16c.bf8c21d8.df7e59ba.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 369,
                            "endLine": 369,
                            "startColumn": 42,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 369,
                            "endLine": 369,
                            "startColumn": 19,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureDefaultAesCipher/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Default AES/ECB algorithm (AES) used in com.unboundid.util.CryptoHelper.getCipher may be insecure, because equal messages get encrypted to equal data. Consider using Galois/Counter Mode (algorithm AES/GCM/NoPadding).",
            "markdown": "Default AES/ECB algorithm ({0}) used in {1} may be insecure, because equal messages get encrypted to equal data. Consider using Galois/Counter Mode (algorithm AES/GCM/NoPadding).",
            "arguments": [
              "[AES](0)",
              "[com.unboundid.util.CryptoHelper.getCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 371,
                  "endLine": 371,
                  "startColumn": 10,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "608c7cd996be86796c7f4272b70443d92c44d1de23d4d557815dcca70e8b103e",
            "1": "ca9876a9.e100d401.ba832df5.692919d5.3e9eb16c.bf8c21d8.a6108c8a.bcdc083a.ca9876a9.e100d401.ba832df5.692919d5.3e9eb16c.bf8c21d8.df7e59ba.bcdc083a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 371,
                            "endLine": 371,
                            "startColumn": 33,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 371,
                            "endLine": 371,
                            "startColumn": 10,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureHash",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "The HmacSHA1 hash (used in javax.crypto.Mac.getInstance) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The {0} hash (used in {1}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[HmacSHA1](0)",
              "[javax.crypto.Mac.getInstance](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/com/unboundid/ldap/sdk/unboundidds/OneTimePassword.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 197,
                  "endLine": 197,
                  "startColumn": 21,
                  "endColumn": 36
                }
              }
            }
          ],
          "fingerprints": {
            "0": "73f599c0b06137f24cdef2f4a933dcc59b0f645eddd35a8dccdc0854288763af",
            "1": "19689298.7797192f.c68e7067.1ea6ee73.408180c7.85ae2876.6796ed5a.54d46e25.054a6249.dd05ec30.c68e7067.de031890.408180c7.ce109560.df7e59ba.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/com/unboundid/ldap/sdk/unboundidds/OneTimePassword.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 91,
                            "endLine": 91,
                            "startColumn": 54,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/com/unboundid/ldap/sdk/unboundidds/OneTimePassword.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 197,
                            "endLine": 197,
                            "startColumn": 21,
                            "endColumn": 36
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 501,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureHash",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "The SHA-1 hash (used in java.security.MessageDigest.getInstance) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The {0} hash (used in {1}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[SHA-1](0)",
              "[java.security.MessageDigest.getInstance](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/com/unboundid/util/ssl/cert/X509Certificate.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2176,
                  "endLine": 2176,
                  "startColumn": 36,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2c0fb1ba4019f6082d9719519555ca98471d27ef393dd9959882c4d4d1950541",
            "1": "19689298.7797192f.09fc77c2.82e76c82.408180c7.c80ba7fb.6dbe2d3b.c4e81b6c.19689298.7f413d6f.09fc77c2.3519ac88.408180c7.c80ba7fb.da83a8d5.c4e81b6c"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/com/unboundid/util/ssl/cert/X509Certificate.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2137,
                            "endLine": 2137,
                            "startColumn": 27,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/com/unboundid/util/ssl/cert/X509Certificate.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2176,
                            "endLine": 2176,
                            "startColumn": 36,
                            "endColumn": 61
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 501,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureHash",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "The MD5 hash (used in java.security.MessageDigest.getInstance) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The {0} hash (used in {1}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[MD5](0)",
              "[java.security.MessageDigest.getInstance](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/com/unboundid/ldap/sdk/unboundidds/tools/SplitLDIFTranslator.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 151,
                  "endLine": 151,
                  "startColumn": 13,
                  "endColumn": 38
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a2630a60237fd2bd5e912c9189294e0909c62c3a3c67911e37ef4c501f3ec1d8",
            "1": "ca9876a9.da263459.33fa5dbe.e22980a8.f1d9f854.7fda7c5e.2a1a68a1.54d46e25.ca9876a9.da263459.33fa5dbe.e22980a8.f1d9f854.7fda7c5e.df7e59ba.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/com/unboundid/ldap/sdk/unboundidds/tools/SplitLDIFTranslator.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 151,
                            "endLine": 151,
                            "startColumn": 39,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/com/unboundid/ldap/sdk/unboundidds/tools/SplitLDIFTranslator.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 151,
                            "endLine": 151,
                            "startColumn": 13,
                            "endColumn": 38
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 501,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword",
          "ruleIndex": 3,
          "level": "warning",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/com/unboundid/util/MultiServerLDAPCommandLineTool.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 449,
                  "endLine": 449,
                  "startColumn": 11,
                  "endColumn": 22
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d8257fb1f08e8363e4f61992a16ba3b06b400a012ebc0f4aa7b2bec4841a3f40",
            "1": "81d015f8.3f280787.275bb6af.e22980a8.edaa9f28.5546edc6.122eb03e.54d46e25.81d015f8.3f280787.84e2d55b.e22980a8.edaa9f28.5546edc6.122eb03e.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/com/unboundid/util/MultiServerLDAPCommandLineTool.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 449,
                            "endLine": 449,
                            "startColumn": 23,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 501,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureHash/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "The SHA-1 hash (used in java.security.MessageDigest.getInstance) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The {0} hash (used in {1}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[SHA-1](0)",
              "[java.security.MessageDigest.getInstance](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/ldap/listener/InMemoryDirectoryServerPasswordTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 115,
                  "endLine": 115,
                  "startColumn": 38,
                  "endColumn": 63
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1a7e3cb163f5b0ac07501c53db6daba130ee8d7b4ba4d1aba2b1936b78049200",
            "1": "19689298.7797192f.e99130b3.82e76c82.408180c7.b70401ce.2a1a68a1.54d46e25.19689298.7797192f.e99130b3.82e76c82.408180c7.b70401ce.df7e59ba.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/ldap/listener/InMemoryDirectoryServerPasswordTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 64,
                            "endColumn": 71
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/ldap/listener/InMemoryDirectoryServerPasswordTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 38,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureHash/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "The SHA-1 hash (used in java.security.MessageDigest.getInstance) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The {0} hash (used in {1}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[SHA-1](0)",
              "[java.security.MessageDigest.getInstance](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/ldap/listener/InMemoryDirectoryServerPasswordTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 171,
                  "endLine": 171,
                  "startColumn": 38,
                  "endColumn": 63
                }
              }
            }
          ],
          "fingerprints": {
            "0": "57694708f6f40d639bfe41339f54f3b31b005cadd460057072e90170776d672b",
            "1": "19689298.7797192f.e99130b3.82e76c82.408180c7.b70401ce.2a1a68a1.54d46e25.19689298.7797192f.e99130b3.82e76c82.408180c7.b70401ce.df7e59ba.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/ldap/listener/InMemoryDirectoryServerPasswordTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 171,
                            "endLine": 171,
                            "startColumn": 64,
                            "endColumn": 71
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/ldap/listener/InMemoryDirectoryServerPasswordTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 171,
                            "endLine": 171,
                            "startColumn": 38,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureHash/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "The SHA-1 hash (used in java.security.MessageDigest.getInstance) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The {0} hash (used in {1}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[SHA-1](0)",
              "[java.security.MessageDigest.getInstance](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/ldap/listener/InMemoryDirectoryServerPasswordTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 229,
                  "endLine": 229,
                  "startColumn": 38,
                  "endColumn": 63
                }
              }
            }
          ],
          "fingerprints": {
            "0": "74a2461a2c0a54ef8e9cba791e70fe3ee84b66f2d072c7259231f6f847a46ae5",
            "1": "19689298.7797192f.e99130b3.82e76c82.408180c7.b70401ce.2a1a68a1.54d46e25.19689298.7797192f.e99130b3.82e76c82.408180c7.b70401ce.df7e59ba.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/ldap/listener/InMemoryDirectoryServerPasswordTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 229,
                            "endLine": 229,
                            "startColumn": 64,
                            "endColumn": 71
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/ldap/listener/InMemoryDirectoryServerPasswordTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 229,
                            "endLine": 229,
                            "startColumn": 38,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureHash/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "The SHA-1 hash (used in java.security.MessageDigest.getInstance) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The {0} hash (used in {1}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[SHA-1](0)",
              "[java.security.MessageDigest.getInstance](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/ldap/listener/SaltedMessageDigestInMemoryPasswordEncoderTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 60,
                  "endLine": 60,
                  "startColumn": 15,
                  "endColumn": 40
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a76e005921b6291e8de900222157a9857ad6708a8c5d264e0643fea1910c0769",
            "1": "ca9876a9.b2f8f321.6ac45292.6c52ae28.d58be062.85fc252d.30a05b3c.203bd690.ca9876a9.b2f8f321.6ac45292.6c52ae28.d58be062.85fc252d.30a05b3c.203bd690"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/ldap/listener/SaltedMessageDigestInMemoryPasswordEncoderTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 60,
                            "endLine": 60,
                            "startColumn": 41,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/ldap/listener/SaltedMessageDigestInMemoryPasswordEncoderTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 60,
                            "endLine": 60,
                            "startColumn": 15,
                            "endColumn": 40
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureHash/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "The SHA-1 hash (used in java.security.MessageDigest.getInstance) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The {0} hash (used in {1}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[SHA-1](0)",
              "[java.security.MessageDigest.getInstance](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/ldap/listener/SaltedMessageDigestInMemoryPasswordEncoderTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 276,
                  "endLine": 276,
                  "startColumn": 10,
                  "endColumn": 35
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1dc7f76f3cd1a52876808927cb17077523014bf0d2bbec4252ed5ddd29df4f0c",
            "1": "ca9876a9.b2f8f321.6ac45292.6c52ae28.d58be062.b70401ce.6e995112.54d46e25.ca9876a9.b2f8f321.6ac45292.6c52ae28.d58be062.b70401ce.df7e59ba.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/ldap/listener/SaltedMessageDigestInMemoryPasswordEncoderTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 276,
                            "endLine": 276,
                            "startColumn": 36,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/ldap/listener/SaltedMessageDigestInMemoryPasswordEncoderTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 276,
                            "endLine": 276,
                            "startColumn": 10,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureHash/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "The SHA-1 hash (used in java.security.MessageDigest.getInstance) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The {0} hash (used in {1}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[SHA-1](0)",
              "[java.security.MessageDigest.getInstance](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/ldap/listener/InMemoryDirectoryServerPasswordEncodingTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 67,
                  "endLine": 67,
                  "startColumn": 38,
                  "endColumn": 63
                }
              }
            }
          ],
          "fingerprints": {
            "0": "240fb6dcf6ceb9d5a69e405b2616b02620cbdf9cf2617b66753c7a15abb35f74",
            "1": "19689298.7797192f.e99130b3.82e76c82.408180c7.b70401ce.2a1a68a1.54d46e25.19689298.7797192f.e99130b3.82e76c82.408180c7.b70401ce.df7e59ba.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/ldap/listener/InMemoryDirectoryServerPasswordEncodingTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 67,
                            "endLine": 67,
                            "startColumn": 64,
                            "endColumn": 71
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/ldap/listener/InMemoryDirectoryServerPasswordEncodingTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 67,
                            "endLine": 67,
                            "startColumn": 38,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureHash/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "The SHA-1 hash (used in java.security.MessageDigest.getInstance) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The {0} hash (used in {1}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[SHA-1](0)",
              "[java.security.MessageDigest.getInstance](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/ldap/listener/InMemoryDirectoryServerPasswordEncodingTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 693,
                  "endLine": 693,
                  "startColumn": 38,
                  "endColumn": 63
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e15df8d42feb8f3aa8cec34ad3c2c3d04bcfc4c07f9e3d438ed04c78ec2d39b9",
            "1": "19689298.7797192f.e99130b3.82e76c82.408180c7.b70401ce.2a1a68a1.54d46e25.19689298.7797192f.e99130b3.82e76c82.408180c7.b70401ce.df7e59ba.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/ldap/listener/InMemoryDirectoryServerPasswordEncodingTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 693,
                            "endLine": 693,
                            "startColumn": 64,
                            "endColumn": 71
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/ldap/listener/InMemoryDirectoryServerPasswordEncodingTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 693,
                            "endLine": 693,
                            "startColumn": 38,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureHash/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "The SHA-1 hash (used in java.security.MessageDigest.getInstance) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The {0} hash (used in {1}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[SHA-1](0)",
              "[java.security.MessageDigest.getInstance](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/ldap/listener/InMemoryDirectoryServerPasswordEncodingTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 792,
                  "endLine": 792,
                  "startColumn": 38,
                  "endColumn": 63
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e54eff07d390424e08094c63787bb804121c54eba968979315844c50e1691028",
            "1": "19689298.7797192f.e99130b3.82e76c82.408180c7.b70401ce.2a1a68a1.54d46e25.19689298.7797192f.e99130b3.82e76c82.408180c7.b70401ce.df7e59ba.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/ldap/listener/InMemoryDirectoryServerPasswordEncodingTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 792,
                            "endLine": 792,
                            "startColumn": 64,
                            "endColumn": 71
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/ldap/listener/InMemoryDirectoryServerPasswordEncodingTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 792,
                            "endLine": 792,
                            "startColumn": 38,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureHash/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "The SHA-1 hash (used in java.security.MessageDigest.getInstance) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The {0} hash (used in {1}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[SHA-1](0)",
              "[java.security.MessageDigest.getInstance](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/ldap/listener/UnsaltedMessageDigestInMemoryPasswordEncoderTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 59,
                  "endLine": 59,
                  "startColumn": 15,
                  "endColumn": 40
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9c3b21252b80e59d76030f3867bac9d273f4601f361cacffcb6d1ba025e202f3",
            "1": "dfc024f4.1cbd3ff4.a535fb37.25d9cc5a.728b66f7.85fc252d.30a05b3c.203bd690.dfc024f4.1cbd3ff4.a535fb37.25d9cc5a.728b66f7.85fc252d.30a05b3c.203bd690"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/ldap/listener/UnsaltedMessageDigestInMemoryPasswordEncoderTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 41,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/ldap/listener/UnsaltedMessageDigestInMemoryPasswordEncoderTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 15,
                            "endColumn": 40
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 351,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureHash/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "The MD5 hash (used in java.security.MessageDigest.getInstance) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The {0} hash (used in {1}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[MD5](0)",
              "[java.security.MessageDigest.getInstance](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/ldap/sdk/LDAPSDKTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1872,
                  "endLine": 1872,
                  "startColumn": 33,
                  "endColumn": 58
                }
              }
            }
          ],
          "fingerprints": {
            "0": "643cbe708958c74448d8cbae221a090862aad1c748288eeff9735deb8a261623",
            "1": "19689298.7797192f.06373764.82e76c82.408180c7.c80ba7fb.2fbf4a5c.54d46e25.19689298.7797192f.06373764.82e76c82.408180c7.c80ba7fb.2fbf4a5c.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/ldap/sdk/LDAPSDKTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1872,
                            "endLine": 1872,
                            "startColumn": 59,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/ldap/sdk/LDAPSDKTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1872,
                            "endLine": 1872,
                            "startColumn": 33,
                            "endColumn": 58
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureHash/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "The MD5 hash (used in java.security.MessageDigest.getInstance) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The {0} hash (used in {1}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[MD5](0)",
              "[java.security.MessageDigest.getInstance](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/ldap/sdk/LDAPSDKTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1911,
                  "endLine": 1911,
                  "startColumn": 12,
                  "endColumn": 37
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2c5b6bcfe57022295a00c3f88640dcf1f0e1f3383ebc7affa7a16f5b72919ed3",
            "1": "ca9876a9.6437c956.09fc77c2.e22980a8.f1d9f854.c80ba7fb.5930fcbf.1d874c72.ca9876a9.6437c956.09fc77c2.e22980a8.f1d9f854.c80ba7fb.df7e59ba.1d874c72"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/ldap/sdk/LDAPSDKTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1911,
                            "endLine": 1911,
                            "startColumn": 38,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/ldap/sdk/LDAPSDKTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1911,
                            "endLine": 1911,
                            "startColumn": 12,
                            "endColumn": 37
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket",
          "ruleIndex": 5,
          "level": "warning",
          "message": {
            "text": "Writing to an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Writing to](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/com/unboundid/util/ssl/cert/ManageCertificatesServerCertificateCollector.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 209,
                  "endLine": 209,
                  "startColumn": 11,
                  "endColumn": 42
                }
              }
            }
          ],
          "fingerprints": {
            "0": "bb2790e38732799bb5dc8861f633e8d6dd274e5abb0eff44f6c5105b53743ea1",
            "1": "25bfb35c.49766a9f.33fa5dbe.e22980a8.390f960b.7fda7c5e.4a1b5213.54d46e25.25bfb35c.49766a9f.33fa5dbe.e22980a8.390f960b.7fda7c5e.4a1b5213.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/com/unboundid/util/ssl/cert/ManageCertificatesServerCertificateCollector.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 209,
                            "endLine": 209,
                            "startColumn": 11,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/com/unboundid/util/ssl/cert/ManageCertificatesServerCertificateCollector.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 209,
                            "endLine": 209,
                            "startColumn": 11,
                            "endColumn": 42
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 551,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket",
          "ruleIndex": 5,
          "level": "warning",
          "message": {
            "text": "Writing to an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Writing to](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/com/unboundid/util/ssl/cert/ManageCertificatesServerCertificateCollector.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 211,
                  "endLine": 211,
                  "startColumn": 11,
                  "endColumn": 42
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1cbe63c57f7a5639c998c9a493589740865fb2f218db105a0f22ce2a7051fcaa",
            "1": "ac4e7c8b.c6f63401.bb993ef0.e22980a8.f1d9f854.1687f668.4a1b5213.54d46e25.ac4e7c8b.c6f63401.bb993ef0.e22980a8.f1d9f854.7fda7c5e.4a1b5213.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/com/unboundid/util/ssl/cert/ManageCertificatesServerCertificateCollector.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 211,
                            "endLine": 211,
                            "startColumn": 11,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/com/unboundid/util/ssl/cert/ManageCertificatesServerCertificateCollector.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 211,
                            "endLine": 211,
                            "startColumn": 11,
                            "endColumn": 42
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 551,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket",
          "ruleIndex": 5,
          "level": "warning",
          "message": {
            "text": "Reading from an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Reading from](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/com/unboundid/util/ssl/cert/ManageCertificatesServerCertificateCollector.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 214,
                  "endLine": 214,
                  "startColumn": 16,
                  "endColumn": 46
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0fb7114ead1ee33e0260756aab0191dfe47a036220fc6b5c90ada75ed72325da",
            "1": "b314868a.784f0286.bb993ef0.6c52ae28.c41fd899.1687f668.4a1b5213.0f01a149.b314868a.784f0286.bb993ef0.6c52ae28.c41fd899.7fda7c5e.4a1b5213.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/com/unboundid/util/ssl/cert/ManageCertificatesServerCertificateCollector.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 214,
                            "endLine": 214,
                            "startColumn": 16,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/com/unboundid/util/ssl/cert/ManageCertificatesServerCertificateCollector.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 214,
                            "endLine": 214,
                            "startColumn": 16,
                            "endColumn": 46
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 551,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/cert/ManageCertificatesTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 4411,
                  "endLine": 4411,
                  "startColumn": 19,
                  "endColumn": 34
                }
              }
            }
          ],
          "fingerprints": {
            "0": "55247be362899f54593894a0aba72736cc92c14ecd75764e971e044fab71204e",
            "1": "ca9876a9.c3959464.30a36ce6.d6ab05b5.4a9c8cbc.7fda7c5e.d31f9940.54d46e25.4ae03cbe.8bdda3dd.30a36ce6.383ea08e.408180c7.7fda7c5e.d31f9940.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/cert/ManageCertificatesTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 4411,
                            "endLine": 4411,
                            "startColumn": 50,
                            "endColumn": 64
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/cert/ManageCertificatesTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 4415,
                  "endLine": 4415,
                  "startColumn": 7,
                  "endColumn": 22
                }
              }
            }
          ],
          "fingerprints": {
            "0": "38b8343d524955ec5199af01fea693ec5abc3c42895c90a1916548f46389a998",
            "1": "1b46a441.861518ae.30a36ce6.d6ab05b5.d31a8364.7fda7c5e.bae646e8.54d46e25.4ae03cbe.8bdda3dd.30a36ce6.383ea08e.408180c7.7fda7c5e.d31f9940.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/cert/ManageCertificatesTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 4415,
                            "endLine": 4415,
                            "startColumn": 38,
                            "endColumn": 48
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/cert/ManageCertificatesTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 4449,
                  "endLine": 4449,
                  "startColumn": 19,
                  "endColumn": 34
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6319e067c8cee91b2d88ec9dda8b428cb7f6b5d96a049d987daf2d60ea799974",
            "1": "ca9876a9.c3959464.30a36ce6.d6ab05b5.4a9c8cbc.7fda7c5e.d31f9940.54d46e25.4ae03cbe.8bdda3dd.30a36ce6.383ea08e.408180c7.7fda7c5e.d31f9940.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/cert/ManageCertificatesTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 4449,
                            "endLine": 4449,
                            "startColumn": 50,
                            "endColumn": 64
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/cert/ManageCertificatesTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 4453,
                  "endLine": 4453,
                  "startColumn": 7,
                  "endColumn": 22
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3a0ccd0796b3f76c81ea7cc2f4c2b98f734c64f9671956786693a328041fea56",
            "1": "1b46a441.861518ae.30a36ce6.d6ab05b5.d31a8364.7fda7c5e.bae646e8.54d46e25.4ae03cbe.8bdda3dd.30a36ce6.383ea08e.408180c7.7fda7c5e.d31f9940.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/cert/ManageCertificatesTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 4453,
                            "endLine": 4453,
                            "startColumn": 38,
                            "endColumn": 48
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/cert/ManageCertificatesTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 4488,
                  "endLine": 4488,
                  "startColumn": 19,
                  "endColumn": 34
                }
              }
            }
          ],
          "fingerprints": {
            "0": "29131f0cd33622f632e7e4831d6f55a9dd2a8020587fe456c12f0431f171b338",
            "1": "ca9876a9.c3959464.30a36ce6.d6ab05b5.4a9c8cbc.7fda7c5e.d31f9940.54d46e25.4ae03cbe.8bdda3dd.30a36ce6.383ea08e.408180c7.7fda7c5e.d31f9940.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/cert/ManageCertificatesTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 4488,
                            "endLine": 4488,
                            "startColumn": 50,
                            "endColumn": 64
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/cert/ManageCertificatesTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 4492,
                  "endLine": 4492,
                  "startColumn": 7,
                  "endColumn": 22
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7c02b39ba36ed22b9558180c2133bf845ec71d641a1c924a38c506c3f0ea456b",
            "1": "1b46a441.861518ae.30a36ce6.d6ab05b5.d31a8364.7fda7c5e.bae646e8.54d46e25.4ae03cbe.8bdda3dd.30a36ce6.383ea08e.408180c7.7fda7c5e.d31f9940.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/cert/ManageCertificatesTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 4492,
                            "endLine": 4492,
                            "startColumn": 38,
                            "endColumn": 48
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/cert/ManageCertificatesTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 4537,
                  "endLine": 4537,
                  "startColumn": 19,
                  "endColumn": 34
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8d753f72079da56692472937ed3a0b20240f2e70a98ad9d8dd84973f9fbb1c9c",
            "1": "ca9876a9.c3959464.30a36ce6.d6ab05b5.4a9c8cbc.7fda7c5e.d31f9940.54d46e25.4ae03cbe.8bdda3dd.30a36ce6.383ea08e.408180c7.7fda7c5e.d31f9940.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/cert/ManageCertificatesTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 4537,
                            "endLine": 4537,
                            "startColumn": 50,
                            "endColumn": 64
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/cert/ManageCertificatesTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 4541,
                  "endLine": 4541,
                  "startColumn": 7,
                  "endColumn": 22
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d5c4ca1003e8101dcdc7fd2d50d26a1106c44437883c0922454028fbd600ba73",
            "1": "1b46a441.861518ae.30a36ce6.d6ab05b5.d31a8364.7fda7c5e.bae646e8.54d46e25.4ae03cbe.8bdda3dd.30a36ce6.383ea08e.408180c7.7fda7c5e.d31f9940.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/cert/ManageCertificatesTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 4541,
                            "endLine": 4541,
                            "startColumn": 38,
                            "endColumn": 48
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/cert/ManageCertificatesTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 5279,
                  "endLine": 5279,
                  "startColumn": 5,
                  "endColumn": 25
                }
              }
            }
          ],
          "fingerprints": {
            "0": "62dc5e5f70d77217911cb2a1f6f0d60d2a2d217d389e48e13e9513289128c7c7",
            "1": "ad2a9de6.ef11819f.30a36ce6.383ea08e.73357342.0d476878.6a222d4e.54d46e25.4ae03cbe.062227d8.30a36ce6.383ea08e.385289dd.3d8e95a7.57fc8460.487f9a42"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/cert/ManageCertificatesTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 5280,
                            "endLine": 5280,
                            "startColumn": 10,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/cert/ManageCertificatesTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7940,
                  "endLine": 7940,
                  "startColumn": 7,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2ef65b8db3633d2ec351407c2192d55a3eabf2c20d4ab3ee0f4ed0fd9372bf23",
            "1": "19689298.c3959464.71a71d19.383ea08e.d31a8364.7fda7c5e.d31f9940.54d46e25.19689298.7797192f.71a71d19.383ea08e.408180c7.7fda7c5e.d31f9940.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/cert/ManageCertificatesTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 4148,
                            "endLine": 4148,
                            "startColumn": 61,
                            "endColumn": 75
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/cert/ManageCertificatesTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8061,
                  "endLine": 8061,
                  "startColumn": 21,
                  "endColumn": 36
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1e012373c89262b36befcd648380027c0fe9686a3e2fcec708a9927d61a579fc",
            "1": "bbbd7c96.ef11819f.9f117aa1.383ea08e.408180c7.caefa017.57fc8460.54d46e25.bbbd7c96.062227d8.30a36ce6.383ea08e.408180c7.3d8e95a7.57fc8460.487f9a42"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/cert/ManageCertificatesTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 8061,
                            "endLine": 8061,
                            "startColumn": 44,
                            "endColumn": 54
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/HostNameSSLSocketVerifierTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 727,
                  "endLine": 727,
                  "startColumn": 7,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c58cdc32ce2d30f2c9ac704242138a673d02050b6048f3f623e885283d9efc15",
            "1": "a7824ac5.7a95cf5d.d33e0c13.383ea08e.d31a8364.8f875032.bae646e8.54d46e25.4d9dffb9.2329d1ab.d33e0c13.383ea08e.408180c7.ce109560.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/HostNameSSLSocketVerifierTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 44,
                            "endColumn": 54
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/HostNameSSLSocketVerifierTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 731,
                  "endLine": 731,
                  "startColumn": 39,
                  "endColumn": 66
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6a0b8e5d5d84bcfce0d3e98e79cc538d48616e35a625ad95bd5d7a0323b8bf4b",
            "1": "962f9bc2.7a95cf5d.75cd79df.d6ab05b5.ade640d7.e2f0b62f.15cd3466.3d402e85.4d9dffb9.dd05ec30.622565c7.de031890.ade640d7.ce109560.59ca8af1.3d402e85"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/HostNameSSLSocketVerifierTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 44,
                            "endColumn": 54
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/cert/X509CertificateTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1672,
                  "endLine": 1672,
                  "startColumn": 7,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4d0f6042fe66a78c2036c903df311f2e7d3731034ceea6c9033de6213f4dd23b",
            "1": "19689298.95d88bc4.075f7928.383ea08e.d31a8364.8f875032.bae646e8.54d46e25.19689298.a7b887a2.075f7928.383ea08e.408180c7.8f875032.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/cert/X509CertificateTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1672,
                            "endLine": 1672,
                            "startColumn": 34,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/cert/X509CertificateTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1781,
                  "endLine": 1781,
                  "startColumn": 7,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5bf4b1787408768f2f794476b5fa22746dff8d4e91b9f694faa1202a5da95317",
            "1": "19689298.95d88bc4.075f7928.383ea08e.d31a8364.8f875032.bae646e8.54d46e25.19689298.a7b887a2.075f7928.383ea08e.408180c7.8f875032.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/cert/X509CertificateTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1781,
                            "endLine": 1781,
                            "startColumn": 34,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/cert/PKCS8PrivateKeyTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 565,
                  "endLine": 565,
                  "startColumn": 7,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4937bf8a6fa1607583b7a17be8c42cdd8ea6cf090c80fe6fce132b2a5fe0f337",
            "1": "19689298.95d88bc4.075f7928.383ea08e.d31a8364.8f875032.bae646e8.54d46e25.19689298.7797192f.075f7928.383ea08e.408180c7.8f875032.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/cert/PKCS8PrivateKeyTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 565,
                            "endLine": 565,
                            "startColumn": 34,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/cert/PKCS8PrivateKeyTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 569,
                  "endLine": 569,
                  "startColumn": 23,
                  "endColumn": 38
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b7d257602e3556743a9cea79e2a2faea3d078782c739e361c7d06b4740caf110",
            "1": "1d6fe040.c9cacf15.7797c686.d6ab05b5.408180c7.e2f0b62f.7221b28e.54d46e25.1d6fe040.c9cacf15.075f7928.383ea08e.408180c7.e2f0b62f.6d877eaa.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/cert/PKCS8PrivateKeyTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 569,
                            "endLine": 569,
                            "startColumn": 51,
                            "endColumn": 61
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/cert/PKCS8PrivateKeyTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 613,
                  "endLine": 613,
                  "startColumn": 7,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1a12465c2e5ab598bc2cbce839a53a555ad643b327d75d334c0998f7be529f4c",
            "1": "19689298.95d88bc4.075f7928.383ea08e.d31a8364.8f875032.bae646e8.54d46e25.19689298.7797192f.075f7928.383ea08e.408180c7.8f875032.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/cert/PKCS8PrivateKeyTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 613,
                            "endLine": 613,
                            "startColumn": 34,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/cert/PKCS8PrivateKeyTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 617,
                  "endLine": 617,
                  "startColumn": 23,
                  "endColumn": 38
                }
              }
            }
          ],
          "fingerprints": {
            "0": "01a0f62bf33a1db18e57e8dc50b077cddda2e35d61e817613f1c066f56df899b",
            "1": "1d6fe040.7797192f.7797c686.d6ab05b5.408180c7.e2f0b62f.7221b28e.54d46e25.1d6fe040.7797192f.075f7928.383ea08e.408180c7.e2f0b62f.6d877eaa.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/cert/PKCS8PrivateKeyTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 617,
                            "endLine": 617,
                            "startColumn": 50,
                            "endColumn": 60
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/ldap/sdk/DIGESTMD5BindRequestPropertiesTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 217,
                  "endLine": 217,
                  "startColumn": 5,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "631eee4be5c6b24dc0d2ce8f419e477cc9e9aa0f6f8bafe00c6b8efe95bf63a0",
            "1": "232625c2.e8c02a15.fc7d5400.e22980a8.80deda05.935029da.1e36e3b5.fde7589e.232625c2.e8c02a15.fc7d5400.e22980a8.80deda05.935029da.1e36e3b5.fde7589e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/ldap/sdk/DIGESTMD5BindRequestPropertiesTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 217,
                            "endLine": 217,
                            "startColumn": 28,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/ldap/sdk/DIGESTMD5BindRequestPropertiesTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 225,
                  "endLine": 225,
                  "startColumn": 5,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8557e1bdce3220987b698e8eb488e316de3ba5a6c97b9fcaa90a303ea188ed0b",
            "1": "5387ee68.e8c02a15.fc7d5400.44ab356c.80deda05.935029da.1e36e3b5.fde7589e.5387ee68.601f8825.fc7d5400.44ab356c.80deda05.935029da.1e36e3b5.fde7589e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/ldap/sdk/DIGESTMD5BindRequestPropertiesTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 225,
                            "endLine": 225,
                            "startColumn": 28,
                            "endColumn": 43
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/ldap/sdk/LDAPConnectionTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 363,
                  "endLine": 363,
                  "startColumn": 9,
                  "endColumn": 37
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b09336879a4b2dc53118b022a08291f03b510c3b9e3fc9645b409960ac9d997d",
            "1": "54cca492.05dce3bd.fc7d5400.e22980a8.f1d9f854.31ccdec6.12f9b890.54d46e25.54cca492.05dce3bd.fc7d5400.e22980a8.f1d9f854.31ccdec6.12f9b890.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/ldap/sdk/LDAPConnectionTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 363,
                            "endLine": 363,
                            "startColumn": 38,
                            "endColumn": 45
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/ldap/sdk/LDAPConnectionTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 443,
                  "endLine": 443,
                  "startColumn": 9,
                  "endColumn": 37
                }
              }
            }
          ],
          "fingerprints": {
            "0": "50ea0c2e991ecc1da00072b2d7ee0befa5a2dd49d5794c41458155eeced2f9d3",
            "1": "443e3663.c8c8034f.fc7d5400.e22980a8.f1d9f854.31ccdec6.12f9b890.54d46e25.443e3663.c8c8034f.fc7d5400.e22980a8.f1d9f854.31ccdec6.12f9b890.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/ldap/sdk/LDAPConnectionTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 443,
                            "endLine": 443,
                            "startColumn": 38,
                            "endColumn": 45
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/ldap/sdk/LDAPConnectionTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1576,
                  "endLine": 1576,
                  "startColumn": 9,
                  "endColumn": 37
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2b239282eb0bedd97079399c06c4fcb63dafbdf3106367e56098a484ba868570",
            "1": "54cca492.c8c8034f.fc7d5400.e22980a8.f1d9f854.31ccdec6.6f0f5327.54d46e25.54cca492.c8c8034f.fc7d5400.e22980a8.f1d9f854.31ccdec6.6f0f5327.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/ldap/sdk/LDAPConnectionTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1576,
                            "endLine": 1576,
                            "startColumn": 38,
                            "endColumn": 45
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/ldap/sdk/LDAPConnectionTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1672,
                  "endLine": 1672,
                  "startColumn": 9,
                  "endColumn": 37
                }
              }
            }
          ],
          "fingerprints": {
            "0": "346b3aea9ded00c515498618c793571726a5b54b4f89d4c2cde2c1225b4f2546",
            "1": "54cca492.c8c8034f.fc7d5400.e22980a8.1956a12c.31ccdec6.12f9b890.54d46e25.54cca492.c8c8034f.fc7d5400.e22980a8.1956a12c.31ccdec6.12f9b890.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/ldap/sdk/LDAPConnectionTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1672,
                            "endLine": 1672,
                            "startColumn": 38,
                            "endColumn": 45
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 168,
                  "endLine": 168,
                  "startColumn": 7,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b3be97466c94466af0e0ec65ff1ca7124c161efff0870f20681ef038778afaab",
            "1": "19689298.95d88bc4.075f7928.383ea08e.d31a8364.3d8e95a7.bae646e8.54d46e25.19689298.7797192f.075f7928.383ea08e.408180c7.3d8e95a7.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 168,
                            "endLine": 168,
                            "startColumn": 34,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 298,
                  "endLine": 298,
                  "startColumn": 7,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d8fe5478d3f90fd78c071bb24d61bc53612119c3ffdf6b9efdab6d4eedb531e0",
            "1": "19689298.95d88bc4.075f7928.383ea08e.d31a8364.3d8e95a7.bae646e8.54d46e25.19689298.7797192f.075f7928.383ea08e.408180c7.3d8e95a7.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 298,
                            "endLine": 298,
                            "startColumn": 34,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 445,
                  "endLine": 445,
                  "startColumn": 7,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5c0dd41c8447193af4da396aee1b86ba1547e366d057c89e9c6a3dc63463d1ba",
            "1": "19689298.95d88bc4.075f7928.383ea08e.d31a8364.3d8e95a7.bae646e8.54d46e25.19689298.7797192f.075f7928.383ea08e.408180c7.3d8e95a7.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 445,
                            "endLine": 445,
                            "startColumn": 34,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 574,
                  "endLine": 574,
                  "startColumn": 7,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d97e031725b539cb5b8e55440d1898c93964de273ce0efcdfe27cef1134eab19",
            "1": "19689298.95d88bc4.075f7928.383ea08e.d31a8364.3d8e95a7.bae646e8.54d46e25.19689298.7797192f.075f7928.383ea08e.408180c7.3d8e95a7.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 574,
                            "endLine": 574,
                            "startColumn": 34,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 719,
                  "endLine": 719,
                  "startColumn": 7,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fae27ba8e8f93c3d9ef7528cb91a7b243d5b6af170435e8a66f09b9f5be47524",
            "1": "19689298.95d88bc4.075f7928.383ea08e.d31a8364.3d8e95a7.bae646e8.54d46e25.19689298.7797192f.075f7928.383ea08e.408180c7.3d8e95a7.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 719,
                            "endLine": 719,
                            "startColumn": 34,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 849,
                  "endLine": 849,
                  "startColumn": 7,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "eae96bebbc0f6a397970e6b45f502d2422adfae65fb8a13a1a73e64cf886c79d",
            "1": "19689298.95d88bc4.075f7928.383ea08e.d31a8364.3d8e95a7.bae646e8.54d46e25.19689298.7797192f.075f7928.383ea08e.408180c7.3d8e95a7.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 849,
                            "endLine": 849,
                            "startColumn": 34,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 980,
                  "endLine": 980,
                  "startColumn": 7,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3174c9bcba3d43ac757d918b2d2ae561df02f1c75068198fb3cc1cdb90dca14e",
            "1": "19689298.95d88bc4.075f7928.383ea08e.d31a8364.3d8e95a7.bae646e8.54d46e25.19689298.7797192f.075f7928.383ea08e.408180c7.3d8e95a7.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 980,
                            "endLine": 980,
                            "startColumn": 34,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1109,
                  "endLine": 1109,
                  "startColumn": 7,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0947dd930d4d4b512be5e740c09f7e653abb44a376e4ff0a1c16c0bbf2bbbcfa",
            "1": "19689298.95d88bc4.075f7928.383ea08e.d31a8364.3d8e95a7.bae646e8.54d46e25.19689298.7797192f.075f7928.383ea08e.408180c7.3d8e95a7.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1109,
                            "endLine": 1109,
                            "startColumn": 34,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1184,
                  "endLine": 1184,
                  "startColumn": 7,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d3290e5a1bf731eef6c524d2b31f81fe0a7b3b0ac54ed18ae394a8b88301ba89",
            "1": "19689298.95d88bc4.075f7928.383ea08e.d31a8364.3d8e95a7.bae646e8.54d46e25.19689298.7797192f.075f7928.383ea08e.408180c7.3d8e95a7.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1184,
                            "endLine": 1184,
                            "startColumn": 34,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1362,
                  "endLine": 1362,
                  "startColumn": 7,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2906a2e95d5e59ab21551e51a5062bd4501ee55a764fce5a30c866a91a306edb",
            "1": "19689298.95d88bc4.075f7928.383ea08e.d31a8364.3d8e95a7.bae646e8.54d46e25.19689298.7797192f.075f7928.383ea08e.408180c7.3d8e95a7.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1362,
                            "endLine": 1362,
                            "startColumn": 34,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1493,
                  "endLine": 1493,
                  "startColumn": 7,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9943852beb3cf4a6e7c42a6b8b804a39a539376aa1130d0463a56a2905193d1c",
            "1": "19689298.95d88bc4.075f7928.383ea08e.d31a8364.3d8e95a7.bae646e8.54d46e25.19689298.7797192f.075f7928.383ea08e.408180c7.3d8e95a7.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1493,
                            "endLine": 1493,
                            "startColumn": 34,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1649,
                  "endLine": 1649,
                  "startColumn": 7,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b2fa3a76049c9eeda4f9747052ff58f56cfe7bcd6c23a4df5b850e5cced524ed",
            "1": "19689298.95d88bc4.075f7928.383ea08e.d31a8364.3d8e95a7.bae646e8.54d46e25.19689298.7797192f.075f7928.383ea08e.408180c7.3d8e95a7.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1649,
                            "endLine": 1649,
                            "startColumn": 34,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1791,
                  "endLine": 1791,
                  "startColumn": 7,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0f9a089d5a6faaf1380549133ad193599f1c4a280d8eceb6729f646eb114a9d7",
            "1": "19689298.95d88bc4.075f7928.383ea08e.d31a8364.3d8e95a7.bae646e8.54d46e25.19689298.7797192f.075f7928.383ea08e.408180c7.3d8e95a7.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1791,
                            "endLine": 1791,
                            "startColumn": 34,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1985,
                  "endLine": 1985,
                  "startColumn": 7,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "61face018431bede73e6062f7d73f09ba63f2a896336b499d93c681222a38f22",
            "1": "19689298.95d88bc4.075f7928.383ea08e.d31a8364.3d8e95a7.bae646e8.54d46e25.19689298.7797192f.075f7928.383ea08e.408180c7.3d8e95a7.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1985,
                            "endLine": 1985,
                            "startColumn": 34,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2114,
                  "endLine": 2114,
                  "startColumn": 7,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "514c7f41113c76c53a58e48f7cf9103ae5a09fc04334a0d819039291950e47db",
            "1": "19689298.95d88bc4.075f7928.383ea08e.d31a8364.3d8e95a7.bae646e8.54d46e25.19689298.7797192f.075f7928.383ea08e.408180c7.3d8e95a7.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2114,
                            "endLine": 2114,
                            "startColumn": 34,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2237,
                  "endLine": 2237,
                  "startColumn": 7,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4862d8e5d8edae89e08d55c6437237c49db947b9e7887389fd6d5d36fefb5682",
            "1": "19689298.95d88bc4.075f7928.383ea08e.d31a8364.3d8e95a7.bae646e8.54d46e25.19689298.7797192f.075f7928.383ea08e.408180c7.3d8e95a7.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2237,
                            "endLine": 2237,
                            "startColumn": 34,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2360,
                  "endLine": 2360,
                  "startColumn": 7,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "52ef9d59e0aa7e364eb6709eea5a257ad09d6dfb09cb8cf5e7c77534ca82512a",
            "1": "19689298.95d88bc4.075f7928.383ea08e.d31a8364.3d8e95a7.bae646e8.54d46e25.19689298.7797192f.075f7928.383ea08e.408180c7.3d8e95a7.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2360,
                            "endLine": 2360,
                            "startColumn": 34,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2483,
                  "endLine": 2483,
                  "startColumn": 7,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b135c2e53a9b99dec6ebb50c2ee71a7936c7e504bec4fc8ad823dde9fc36ea8a",
            "1": "19689298.95d88bc4.075f7928.383ea08e.d31a8364.3d8e95a7.bae646e8.54d46e25.19689298.7797192f.075f7928.383ea08e.408180c7.3d8e95a7.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2483,
                            "endLine": 2483,
                            "startColumn": 34,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2607,
                  "endLine": 2607,
                  "startColumn": 7,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "68481af3a369c476fd2b14abf2e06b7da2d593c89dd531c1f86dba786e6299fd",
            "1": "19689298.95d88bc4.075f7928.383ea08e.d31a8364.3d8e95a7.bae646e8.54d46e25.19689298.7797192f.075f7928.383ea08e.408180c7.3d8e95a7.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2607,
                            "endLine": 2607,
                            "startColumn": 34,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2732,
                  "endLine": 2732,
                  "startColumn": 7,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "38a078ff48173c186bbd774a5fff04058317eeb094ec591ddeecb08c301ac5a4",
            "1": "19689298.95d88bc4.075f7928.383ea08e.d31a8364.3d8e95a7.bae646e8.54d46e25.19689298.7797192f.075f7928.383ea08e.408180c7.3d8e95a7.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2732,
                            "endLine": 2732,
                            "startColumn": 34,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2855,
                  "endLine": 2855,
                  "startColumn": 7,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ff336d8673c47be21940a185a52c052a5c38028667fbd255fac00f879aae65a4",
            "1": "19689298.95d88bc4.075f7928.383ea08e.d31a8364.3d8e95a7.bae646e8.54d46e25.19689298.7797192f.075f7928.383ea08e.408180c7.3d8e95a7.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2855,
                            "endLine": 2855,
                            "startColumn": 34,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2986,
                  "endLine": 2986,
                  "startColumn": 7,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "08ee0c479b877292a301db13c7c62a69831260b0b1d29c0da674482b91428f90",
            "1": "19689298.95d88bc4.075f7928.383ea08e.d31a8364.3d8e95a7.bae646e8.54d46e25.19689298.7797192f.075f7928.383ea08e.408180c7.3d8e95a7.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2986,
                            "endLine": 2986,
                            "startColumn": 34,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 3117,
                  "endLine": 3117,
                  "startColumn": 7,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "af5fb9a2d99ef06fc519e49ced06c19905a5a7d062f32318c595c854e38f3f40",
            "1": "19689298.95d88bc4.075f7928.383ea08e.d31a8364.3d8e95a7.bae646e8.54d46e25.19689298.7797192f.075f7928.383ea08e.408180c7.3d8e95a7.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 3117,
                            "endLine": 3117,
                            "startColumn": 34,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 3248,
                  "endLine": 3248,
                  "startColumn": 7,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "aa4c42d5c5d4f48f5ad77c9cda8f1ced0eb61b8cc5b597f6357ea1fb84830e1d",
            "1": "19689298.95d88bc4.075f7928.383ea08e.d31a8364.3d8e95a7.bae646e8.54d46e25.19689298.7797192f.075f7928.383ea08e.408180c7.3d8e95a7.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 3248,
                            "endLine": 3248,
                            "startColumn": 34,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 3377,
                  "endLine": 3377,
                  "startColumn": 7,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d5b0577323c2b81852998563e7896e16e14c8b47f498a07e48210e92556e6091",
            "1": "19689298.95d88bc4.075f7928.383ea08e.d31a8364.3d8e95a7.bae646e8.54d46e25.19689298.7797192f.075f7928.383ea08e.408180c7.3d8e95a7.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 3377,
                            "endLine": 3377,
                            "startColumn": 34,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 3514,
                  "endLine": 3514,
                  "startColumn": 7,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c4cda9f5047f66714ef6f28ea9d8483907c506641a20ef33709ec1fed00f0b96",
            "1": "19689298.95d88bc4.075f7928.383ea08e.d31a8364.3d8e95a7.bae646e8.54d46e25.19689298.7797192f.075f7928.383ea08e.408180c7.3d8e95a7.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 3514,
                            "endLine": 3514,
                            "startColumn": 34,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 3652,
                  "endLine": 3652,
                  "startColumn": 7,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6ddc985a63ef0091f401c6511c16ae94c36012848f0714a7bca34458ab971977",
            "1": "19689298.95d88bc4.075f7928.383ea08e.d31a8364.3d8e95a7.bae646e8.54d46e25.19689298.7797192f.075f7928.383ea08e.408180c7.3d8e95a7.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/PromptTrustManagerProcessorTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 3652,
                            "endLine": 3652,
                            "startColumn": 34,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/ldap/sdk/GSSAPIBindRequestPropertiesTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 126,
                  "endLine": 126,
                  "startColumn": 5,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "786e599fd586340e540ae5cc97fd61b5692f287aa761693f0ee4c8bd79af8fe9",
            "1": "232625c2.e8c02a15.fc7d5400.e22980a8.80deda05.935029da.1e36e3b5.fde7589e.232625c2.e8c02a15.fc7d5400.e22980a8.80deda05.935029da.1e36e3b5.fde7589e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/ldap/sdk/GSSAPIBindRequestPropertiesTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 126,
                            "endLine": 126,
                            "startColumn": 28,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/ldap/sdk/GSSAPIBindRequestPropertiesTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 133,
                  "endLine": 133,
                  "startColumn": 5,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "38ad0355b6ae9e296b9217a7f77939ff170070ff6e7036a75dc35fa7706ab7dc",
            "1": "63c12074.e8c02a15.fc7d5400.44ab356c.80deda05.935029da.1e36e3b5.fde7589e.63c12074.601f8825.fc7d5400.44ab356c.80deda05.935029da.1e36e3b5.fde7589e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/ldap/sdk/GSSAPIBindRequestPropertiesTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 133,
                            "endLine": 133,
                            "startColumn": 28,
                            "endColumn": 43
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/ldap/sdk/transformations/ScrambleAttributeTransformationTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 560,
                  "endLine": 560,
                  "startColumn": 17,
                  "endColumn": 69
                }
              }
            }
          ],
          "fingerprints": {
            "0": "bfcade10fae065bbd5342c3a42862961e94b9ab83a525f389844815c7762bd99",
            "1": "38a700a5.1cbd3ff4.d308627b.ede9cf8e.fe747a3f.31ccdec6.d4ceb819.54d46e25.38a700a5.1cbd3ff4.d308627b.ede9cf8e.fe747a3f.31ccdec6.d4ceb819.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/ldap/sdk/transformations/ScrambleAttributeTransformationTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 561,
                            "endLine": 561,
                            "startColumn": 10,
                            "endColumn": 28
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/ldap/sdk/transformations/ScrambleAttributeTransformationTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 565,
                  "endLine": 565,
                  "startColumn": 17,
                  "endColumn": 67
                }
              }
            }
          ],
          "fingerprints": {
            "0": "46badf7e2b3851e0b0039a33b42ef3d6633d56bed82fd73b6993b8b74b5d6030",
            "1": "38a700a5.1cbd3ff4.d308627b.ede9cf8e.4a9c8cbc.31ccdec6.0079fad6.54d46e25.38a700a5.1cbd3ff4.d308627b.ede9cf8e.4a9c8cbc.31ccdec6.0079fad6.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/ldap/sdk/transformations/ScrambleAttributeTransformationTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 566,
                            "endLine": 566,
                            "startColumn": 10,
                            "endColumn": 26
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/JVMDefaultTrustManagerTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 500,
                  "endLine": 500,
                  "startColumn": 7,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1995b6ce28624d3a8910aa165a5587ba3d05ebec46ed6e715f70dfdbd84d64c6",
            "1": "19689298.95d88bc4.075f7928.383ea08e.d31a8364.3d8e95a7.bae646e8.54d46e25.19689298.7797192f.075f7928.383ea08e.408180c7.3d8e95a7.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/JVMDefaultTrustManagerTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 500,
                            "endLine": 500,
                            "startColumn": 34,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/JVMDefaultTrustManagerTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 549,
                  "endLine": 549,
                  "startColumn": 7,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fee5f585779465036d4e508d25a0a97755ce3a30cb6a42cc18aa7a8657da439f",
            "1": "19689298.95d88bc4.075f7928.383ea08e.d31a8364.3d8e95a7.bae646e8.54d46e25.19689298.7797192f.075f7928.383ea08e.408180c7.3d8e95a7.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/JVMDefaultTrustManagerTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 549,
                            "endLine": 549,
                            "startColumn": 34,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/JVMDefaultTrustManagerTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 599,
                  "endLine": 599,
                  "startColumn": 7,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d6b1b7abd313b722e0b8d56440884a8bd0a91aecb98a73d0aa837e67b9068b2e",
            "1": "19689298.95d88bc4.075f7928.383ea08e.d31a8364.3d8e95a7.bae646e8.54d46e25.19689298.7797192f.075f7928.383ea08e.408180c7.3d8e95a7.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/JVMDefaultTrustManagerTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 599,
                            "endLine": 599,
                            "startColumn": 34,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/ldap/sdk/unboundidds/TopologyRegistryTrustManagerTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1736,
                  "endLine": 1736,
                  "startColumn": 7,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2d603bfb64d07a91960ab37210799ad1f4a809881e16f02665e232715637ae4b",
            "1": "362af7fe.7a95cf5d.fc7d5400.383ea08e.d31a8364.3d8e95a7.bae646e8.54d46e25.362af7fe.7797192f.fc7d5400.383ea08e.408180c7.3d8e95a7.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/ldap/sdk/unboundidds/TopologyRegistryTrustManagerTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1736,
                            "endLine": 1736,
                            "startColumn": 19,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/ldap/sdk/unboundidds/TopologyRegistryTrustManagerTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1806,
                  "endLine": 1806,
                  "startColumn": 7,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d7978c2f18ee9c63cb60b7f22ac3006ce576c294a91b7c3c205156e7031527c6",
            "1": "362af7fe.7a95cf5d.fc7d5400.383ea08e.d31a8364.3d8e95a7.bae646e8.54d46e25.362af7fe.7797192f.fc7d5400.383ea08e.408180c7.3d8e95a7.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/ldap/sdk/unboundidds/TopologyRegistryTrustManagerTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1806,
                            "endLine": 1806,
                            "startColumn": 19,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 405,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/ldap/sdk/SimpleBindRequestTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1373,
                  "endLine": 1373,
                  "startColumn": 9,
                  "endColumn": 37
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a369bec62a48f2e86d3dd72fd0437df3c93e49ce9ecd7169ecc6516d85ec4905",
            "1": "54cca492.c8c8034f.fc7d5400.e22980a8.f1d9f854.b49c4230.12f9b890.54d46e25.54cca492.c8c8034f.fc7d5400.e22980a8.f1d9f854.b49c4230.12f9b890.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/ldap/sdk/SimpleBindRequestTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1373,
                            "endLine": 1373,
                            "startColumn": 38,
                            "endColumn": 45
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 355,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureAesWithBadPaddingCipher/test",
          "ruleIndex": 7,
          "level": "note",
          "message": {
            "text": "AES with CBC mode and PKCS5Padding (AES/CBC/PKCS5Padding) used in com.unboundid.util.CryptoHelper.getCipher is vulnerable to padding oracle attacks. Consider using Galois/Counter Mode (algorithm AES/GCM/NoPadding).",
            "markdown": "AES with CBC mode and PKCS5Padding ({0}) used in {1} is vulnerable to padding oracle attacks. Consider using Galois/Counter Mode (algorithm AES/GCM/NoPadding).",
            "arguments": [
              "[AES/CBC/PKCS5Padding](0)",
              "[com.unboundid.util.CryptoHelper.getCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 237,
                  "endLine": 237,
                  "startColumn": 19,
                  "endColumn": 41
                }
              }
            }
          ],
          "fingerprints": {
            "0": "bb209534dcfa576eea03561232c18addb82e4a088721510667e67cca3abd3775",
            "1": "ca9876a9.1cbd3ff4.8c418446.c0497337.4a9c8cbc.42d324ee.9c8c6033.54d46e25.ca9876a9.1cbd3ff4.8c418446.c0497337.4a9c8cbc.42d324ee.df7e59ba.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 237,
                            "endLine": 237,
                            "startColumn": 42,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 237,
                            "endLine": 237,
                            "startColumn": 19,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureAesWithBadPaddingCipher/test",
          "ruleIndex": 7,
          "level": "note",
          "message": {
            "text": "AES with CBC mode and PKCS5Padding (AES/CBC/PKCS5Padding) used in com.unboundid.util.CryptoHelper.getCipher is vulnerable to padding oracle attacks. Consider using Galois/Counter Mode (algorithm AES/GCM/NoPadding).",
            "markdown": "AES with CBC mode and PKCS5Padding ({0}) used in {1} is vulnerable to padding oracle attacks. Consider using Galois/Counter Mode (algorithm AES/GCM/NoPadding).",
            "arguments": [
              "[AES/CBC/PKCS5Padding](0)",
              "[com.unboundid.util.CryptoHelper.getCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 239,
                  "endLine": 239,
                  "startColumn": 10,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "95e5367b20e696204facddbf220ce01a3e40cae92e5b96ede83b25f82aef6235",
            "1": "ca9876a9.1cbd3ff4.c97c77ee.606d04d5.6bacdef5.42d324ee.a6108c8a.bcdc083a.ca9876a9.1cbd3ff4.c97c77ee.606d04d5.6bacdef5.42d324ee.df7e59ba.bcdc083a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 239,
                            "endLine": 239,
                            "startColumn": 33,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 239,
                            "endLine": 239,
                            "startColumn": 10,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureAesWithBadPaddingCipher/test",
          "ruleIndex": 7,
          "level": "note",
          "message": {
            "text": "AES with CBC mode and PKCS5Padding (AES/CBC/PKCS5Padding) used in com.unboundid.util.CryptoHelper.getCipher is vulnerable to padding oracle attacks. Consider using Galois/Counter Mode (algorithm AES/GCM/NoPadding).",
            "markdown": "AES with CBC mode and PKCS5Padding ({0}) used in {1} is vulnerable to padding oracle attacks. Consider using Galois/Counter Mode (algorithm AES/GCM/NoPadding).",
            "arguments": [
              "[AES/CBC/PKCS5Padding](0)",
              "[com.unboundid.util.CryptoHelper.getCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 242,
                  "endLine": 242,
                  "startColumn": 10,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b0f7e4f81b9c43e74a41f66aa65b46cc1494d9f8dbdb4fca68f909f11acd9dfc",
            "1": "ca9876a9.19d25089.0de70b61.0c53b9af.f25d727a.42d324ee.9c8c6033.bcdc083a.ca9876a9.19d25089.0de70b61.0c53b9af.f25d727a.42d324ee.df7e59ba.bcdc083a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 242,
                            "endLine": 242,
                            "startColumn": 33,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 242,
                            "endLine": 242,
                            "startColumn": 10,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureAesWithBadPaddingCipher/test",
          "ruleIndex": 7,
          "level": "note",
          "message": {
            "text": "AES with CBC mode and PKCS5Padding (AES/CBC/PKCS5Padding) used in com.unboundid.util.CryptoHelper.getCipher is vulnerable to padding oracle attacks. Consider using Galois/Counter Mode (algorithm AES/GCM/NoPadding).",
            "markdown": "AES with CBC mode and PKCS5Padding ({0}) used in {1} is vulnerable to padding oracle attacks. Consider using Galois/Counter Mode (algorithm AES/GCM/NoPadding).",
            "arguments": [
              "[AES/CBC/PKCS5Padding](0)",
              "[com.unboundid.util.CryptoHelper.getCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 307,
                  "endLine": 307,
                  "startColumn": 19,
                  "endColumn": 41
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1ce078749fc7ed782dd34efbddd39c35e1b826db862e83b55831d3ffe32249ca",
            "1": "ca9876a9.1cbd3ff4.956632fb.c0497337.4a9c8cbc.42d324ee.c453dcc3.54d46e25.ca9876a9.1cbd3ff4.956632fb.c0497337.4a9c8cbc.42d324ee.c453dcc3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 307,
                            "endLine": 307,
                            "startColumn": 42,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 307,
                            "endLine": 307,
                            "startColumn": 19,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureAesWithBadPaddingCipher/test",
          "ruleIndex": 7,
          "level": "note",
          "message": {
            "text": "AES with CBC mode and PKCS5Padding (AES/CBC/PKCS5Padding) used in com.unboundid.util.CryptoHelper.getCipher is vulnerable to padding oracle attacks. Consider using Galois/Counter Mode (algorithm AES/GCM/NoPadding).",
            "markdown": "AES with CBC mode and PKCS5Padding ({0}) used in {1} is vulnerable to padding oracle attacks. Consider using Galois/Counter Mode (algorithm AES/GCM/NoPadding).",
            "arguments": [
              "[AES/CBC/PKCS5Padding](0)",
              "[com.unboundid.util.CryptoHelper.getCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 309,
                  "endLine": 309,
                  "startColumn": 10,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3be9a2cbd9370527b3877414d57363f4ccc1e3702d80d3f75131862f9ad5f5cf",
            "1": "ca9876a9.1cbd3ff4.956632fb.606d04d5.6bacdef5.42d324ee.c453dcc3.bcdc083a.ca9876a9.1cbd3ff4.956632fb.606d04d5.6bacdef5.42d324ee.c453dcc3.bcdc083a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 309,
                            "endLine": 309,
                            "startColumn": 33,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 309,
                            "endLine": 309,
                            "startColumn": 10,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureAesWithBadPaddingCipher/test",
          "ruleIndex": 7,
          "level": "note",
          "message": {
            "text": "AES with CBC mode and PKCS5Padding (AES/CBC/PKCS5Padding) used in com.unboundid.util.CryptoHelper.getCipher is vulnerable to padding oracle attacks. Consider using Galois/Counter Mode (algorithm AES/GCM/NoPadding).",
            "markdown": "AES with CBC mode and PKCS5Padding ({0}) used in {1} is vulnerable to padding oracle attacks. Consider using Galois/Counter Mode (algorithm AES/GCM/NoPadding).",
            "arguments": [
              "[AES/CBC/PKCS5Padding](0)",
              "[com.unboundid.util.CryptoHelper.getCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 320,
                  "endLine": 320,
                  "startColumn": 10,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d041cdc87d47993c350520b4438aeff69f9b221d6174da93812ea0cc83e39a9f",
            "1": "ca9876a9.e100d401.67172085.692919d5.4a9c8cbc.42d324ee.9c8c6033.54d46e25.ca9876a9.e100d401.67172085.692919d5.4a9c8cbc.42d324ee.df7e59ba.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 320,
                            "endLine": 320,
                            "startColumn": 33,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 320,
                            "endLine": 320,
                            "startColumn": 10,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureAesWithBadPaddingCipher/test",
          "ruleIndex": 7,
          "level": "note",
          "message": {
            "text": "AES with CBC mode and PKCS5Padding (AES/CBC/PKCS5Padding) used in com.unboundid.util.CryptoHelper.getCipher is vulnerable to padding oracle attacks. Consider using Galois/Counter Mode (algorithm AES/GCM/NoPadding).",
            "markdown": "AES with CBC mode and PKCS5Padding ({0}) used in {1} is vulnerable to padding oracle attacks. Consider using Galois/Counter Mode (algorithm AES/GCM/NoPadding).",
            "arguments": [
              "[AES/CBC/PKCS5Padding](0)",
              "[com.unboundid.util.CryptoHelper.getCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 323,
                  "endLine": 323,
                  "startColumn": 10,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f37de713e5c60d9edbbbac41ade28b0b4fbe4792a309aade4636f74e41350926",
            "1": "ca9876a9.e100d401.c97c77ee.692919d5.6bacdef5.42d324ee.a6108c8a.bcdc083a.ca9876a9.e100d401.c97c77ee.692919d5.6bacdef5.42d324ee.df7e59ba.bcdc083a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 323,
                            "endLine": 323,
                            "startColumn": 33,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 323,
                            "endLine": 323,
                            "startColumn": 10,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureAesWithBadPaddingCipher/test",
          "ruleIndex": 7,
          "level": "note",
          "message": {
            "text": "AES with CBC mode and PKCS5Padding (AES/CBC/PKCS5Padding) used in com.unboundid.util.CryptoHelper.getCipher is vulnerable to padding oracle attacks. Consider using Galois/Counter Mode (algorithm AES/GCM/NoPadding).",
            "markdown": "AES with CBC mode and PKCS5Padding ({0}) used in {1} is vulnerable to padding oracle attacks. Consider using Galois/Counter Mode (algorithm AES/GCM/NoPadding).",
            "arguments": [
              "[AES/CBC/PKCS5Padding](0)",
              "[com.unboundid.util.CryptoHelper.getCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 363,
                  "endLine": 363,
                  "startColumn": 10,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "18203f451d7445f1376c4b0df3cbb0bd3d5cf7094f58d3f42ac97fcf8bd6d5a9",
            "1": "6f5723f5.1cbd3ff4.8c418446.c0497337.359d1a69.42d324ee.00e67e3a.54d46e25.6f5723f5.1cbd3ff4.8c418446.c0497337.359d1a69.42d324ee.00e67e3a.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 363,
                            "endLine": 363,
                            "startColumn": 33,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 363,
                            "endLine": 363,
                            "startColumn": 10,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureAesWithBadPaddingCipher/test",
          "ruleIndex": 7,
          "level": "note",
          "message": {
            "text": "AES with CBC mode and PKCS5Padding (AES/CBC/PKCS5Padding) used in com.unboundid.util.CryptoHelper.getCipher is vulnerable to padding oracle attacks. Consider using Galois/Counter Mode (algorithm AES/GCM/NoPadding).",
            "markdown": "AES with CBC mode and PKCS5Padding ({0}) used in {1} is vulnerable to padding oracle attacks. Consider using Galois/Counter Mode (algorithm AES/GCM/NoPadding).",
            "arguments": [
              "[AES/CBC/PKCS5Padding](0)",
              "[com.unboundid.util.CryptoHelper.getCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 365,
                  "endLine": 365,
                  "startColumn": 10,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b75019e9b7f4702a7a85666b7353c9e324273abc23e783b65787e1d3dbe205f1",
            "1": "6f5723f5.1cbd3ff4.c97c77ee.606d04d5.359d1a69.42d324ee.00e67e3a.bcdc083a.6f5723f5.1cbd3ff4.c97c77ee.606d04d5.359d1a69.42d324ee.00e67e3a.bcdc083a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 365,
                            "endLine": 365,
                            "startColumn": 33,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 365,
                            "endLine": 365,
                            "startColumn": 10,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureAesWithBadPaddingCipher/test",
          "ruleIndex": 7,
          "level": "note",
          "message": {
            "text": "AES with CBC mode and PKCS5Padding (AES/CBC/PKCS5Padding) used in com.unboundid.util.CryptoHelper.getCipher is vulnerable to padding oracle attacks. Consider using Galois/Counter Mode (algorithm AES/GCM/NoPadding).",
            "markdown": "AES with CBC mode and PKCS5Padding ({0}) used in {1} is vulnerable to padding oracle attacks. Consider using Galois/Counter Mode (algorithm AES/GCM/NoPadding).",
            "arguments": [
              "[AES/CBC/PKCS5Padding](0)",
              "[com.unboundid.util.CryptoHelper.getCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 375,
                  "endLine": 375,
                  "startColumn": 10,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "695d2e732f78b332f0970e1f9c4713cd1c9181671ffcd51ceadc41ad95e358ac",
            "1": "ca9876a9.e100d401.67172085.692919d5.4a9c8cbc.42d324ee.9c8c6033.54d46e25.ca9876a9.e100d401.67172085.692919d5.4a9c8cbc.42d324ee.df7e59ba.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 375,
                            "endLine": 375,
                            "startColumn": 33,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 375,
                            "endLine": 375,
                            "startColumn": 10,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureAesWithBadPaddingCipher/test",
          "ruleIndex": 7,
          "level": "note",
          "message": {
            "text": "AES with CBC mode and PKCS5Padding (AES/CBC/PKCS5Padding) used in com.unboundid.util.CryptoHelper.getCipher is vulnerable to padding oracle attacks. Consider using Galois/Counter Mode (algorithm AES/GCM/NoPadding).",
            "markdown": "AES with CBC mode and PKCS5Padding ({0}) used in {1} is vulnerable to padding oracle attacks. Consider using Galois/Counter Mode (algorithm AES/GCM/NoPadding).",
            "arguments": [
              "[AES/CBC/PKCS5Padding](0)",
              "[com.unboundid.util.CryptoHelper.getCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 377,
                  "endLine": 377,
                  "startColumn": 10,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "61437a2c1be59b1c5fd6898e7ea5966cf1b4ccedd85a54b0d54c1a3a5a4de1c5",
            "1": "ca9876a9.e100d401.c97c77ee.692919d5.6bacdef5.42d324ee.a6108c8a.bcdc083a.ca9876a9.e100d401.c97c77ee.692919d5.6bacdef5.42d324ee.df7e59ba.bcdc083a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 377,
                            "endLine": 377,
                            "startColumn": 33,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 377,
                            "endLine": 377,
                            "startColumn": 10,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/TooPermissiveTrustManager",
          "ruleIndex": 8,
          "level": "warning",
          "message": {
            "text": "TrustManager might be too permissive: all clients are trusted.",
            "markdown": "TrustManager might be too permissive: {0}.",
            "arguments": [
              "[all clients are trusted](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/com/unboundid/util/ssl/cert/ManageCertificatesServerCertificateCollector.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 388,
                  "endLine": 388,
                  "startColumn": 15,
                  "endColumn": 33
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9d7e21f64dc4483b2743035956c9ef30ecaecd90aeb3126fb0d885ac1703d850",
            "1": "d3279c65.dd05ec30.b1ce14cf.de031890.946eeb51.ce109560.7011a60a.96f2b075.d3279c65.dd05ec30.b1ce14cf.de031890.946eeb51.ce109560.7011a60a.96f2b075"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/com/unboundid/util/ssl/cert/ManageCertificatesServerCertificateCollector.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 388,
                            "endLine": 388,
                            "startColumn": 15,
                            "endColumn": 33
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 551,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/TLS/test",
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "Implement secure HTTPS communication. Consider using latest TLSv1.2 instead of javax.net.ssl.SSLContext.getInstance.",
            "markdown": "Implement secure HTTPS communication. Consider using latest TLSv1.2 instead of {0}.",
            "arguments": [
              "[javax.net.ssl.SSLContext.getInstance](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/SSLUtilTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 126,
                  "endLine": 126,
                  "startColumn": 20,
                  "endColumn": 42
                }
              }
            }
          ],
          "fingerprints": {
            "0": "267e4289b69eca1ae4d9eb85b03b026b763693f73fc15aba5d2d55b82e9eefab",
            "1": "19689298.98dbaec4.011b8e79.ede9cf8e.60644571.afca3b91.533894bc.54d46e25.19689298.98dbaec4.011b8e79.ede9cf8e.60644571.afca3b91.df7e59ba.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/SSLUtilTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 126,
                            "endLine": 126,
                            "startColumn": 20,
                            "endColumn": 42
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/TLS/test",
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "Implement secure HTTPS communication. Consider using latest TLSv1.2 instead of javax.net.ssl.SSLContext.getInstance.",
            "markdown": "Implement secure HTTPS communication. Consider using latest TLSv1.2 instead of {0}.",
            "arguments": [
              "[javax.net.ssl.SSLContext.getInstance](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/SSLUtilTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 139,
                  "endLine": 139,
                  "startColumn": 11,
                  "endColumn": 33
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1f7e8e6be7f4439256fa35a16eb69f8f80f24db4ba851bdde8f721a8fcd32489",
            "1": "d298ca26.98dbaec4.33fa5dbe.e22980a8.f1d9f854.7fda7c5e.a6108c8a.54d46e25.d298ca26.98dbaec4.33fa5dbe.e22980a8.f1d9f854.7fda7c5e.df7e59ba.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/SSLUtilTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 139,
                            "endLine": 139,
                            "startColumn": 11,
                            "endColumn": 33
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/TLS/test",
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "Implement secure HTTPS communication. Consider using latest TLSv1.2 instead of javax.net.ssl.SSLContext.getInstance.",
            "markdown": "Implement secure HTTPS communication. Consider using latest TLSv1.2 instead of {0}.",
            "arguments": [
              "[javax.net.ssl.SSLContext.getInstance](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/SSLUtilTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 189,
                  "endLine": 189,
                  "startColumn": 20,
                  "endColumn": 42
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e26e17aa147b2d7a24d3c0c90903f4274c8ec36dcaa99fb76518d5ff0074a870",
            "1": "19689298.98dbaec4.011b8e79.ede9cf8e.60644571.afca3b91.533894bc.54d46e25.19689298.98dbaec4.011b8e79.ede9cf8e.60644571.afca3b91.df7e59ba.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/SSLUtilTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 189,
                            "endLine": 189,
                            "startColumn": 20,
                            "endColumn": 42
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/TLS/test",
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "Implement secure HTTPS communication. Consider using latest TLSv1.2 instead of javax.net.ssl.SSLContext.getInstance.",
            "markdown": "Implement secure HTTPS communication. Consider using latest TLSv1.2 instead of {0}.",
            "arguments": [
              "[javax.net.ssl.SSLContext.getInstance](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/SSLUtilTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 222,
                  "endLine": 222,
                  "startColumn": 20,
                  "endColumn": 42
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b20979b0db9f6c3d3c3cc89658ec29cf07819288bb5226e7e22f20998c15793c",
            "1": "19689298.98dbaec4.011b8e79.ede9cf8e.60644571.afca3b91.533894bc.54d46e25.19689298.98dbaec4.011b8e79.ede9cf8e.60644571.afca3b91.df7e59ba.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/SSLUtilTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 222,
                            "endLine": 222,
                            "startColumn": 20,
                            "endColumn": 42
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/TLS/test",
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "Implement secure HTTPS communication. Consider using latest TLSv1.2 instead of javax.net.ssl.SSLContext.getInstance.",
            "markdown": "Implement secure HTTPS communication. Consider using latest TLSv1.2 instead of {0}.",
            "arguments": [
              "[javax.net.ssl.SSLContext.getInstance](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/SSLUtilTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 255,
                  "endLine": 255,
                  "startColumn": 20,
                  "endColumn": 42
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7828210c880306fbe93616fbb89914dcdb00ac5d9c67dfe69db83094093da6dd",
            "1": "19689298.98dbaec4.011b8e79.ede9cf8e.60644571.afca3b91.533894bc.54d46e25.19689298.98dbaec4.011b8e79.ede9cf8e.60644571.afca3b91.df7e59ba.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/SSLUtilTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 255,
                            "endLine": 255,
                            "startColumn": 20,
                            "endColumn": 42
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/TLS/test",
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "Implement secure HTTPS communication. Consider using latest TLSv1.2 instead of javax.net.ssl.SSLContext.getInstance.",
            "markdown": "Implement secure HTTPS communication. Consider using latest TLSv1.2 instead of {0}.",
            "arguments": [
              "[javax.net.ssl.SSLContext.getInstance](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/SSLUtilTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 288,
                  "endLine": 288,
                  "startColumn": 20,
                  "endColumn": 42
                }
              }
            }
          ],
          "fingerprints": {
            "0": "00e604789927863d73f849c30c50a830545f896756fb28c1410e2af3c5cc35c1",
            "1": "19689298.98dbaec4.011b8e79.ede9cf8e.60644571.afca3b91.533894bc.54d46e25.19689298.98dbaec4.011b8e79.ede9cf8e.60644571.afca3b91.df7e59ba.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/SSLUtilTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 288,
                            "endLine": 288,
                            "startColumn": 20,
                            "endColumn": 42
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/TLS/test",
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "Implement secure HTTPS communication. Consider using latest TLSv1.2 instead of javax.net.ssl.SSLContext.getInstance.",
            "markdown": "Implement secure HTTPS communication. Consider using latest TLSv1.2 instead of {0}.",
            "arguments": [
              "[javax.net.ssl.SSLContext.getInstance](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/SSLUtilTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 322,
                  "endLine": 322,
                  "startColumn": 20,
                  "endColumn": 42
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0e90c32f152bc3c0b30e5af035c36165f8c893a0b43bc86505af174a0b147eae",
            "1": "19689298.98dbaec4.011b8e79.ede9cf8e.60644571.afca3b91.533894bc.54d46e25.19689298.98dbaec4.011b8e79.ede9cf8e.60644571.afca3b91.df7e59ba.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/SSLUtilTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 322,
                            "endLine": 322,
                            "startColumn": 20,
                            "endColumn": 42
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/TLS/test",
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "Implement secure HTTPS communication. Consider using latest TLSv1.2 instead of javax.net.ssl.SSLContext.getInstance.",
            "markdown": "Implement secure HTTPS communication. Consider using latest TLSv1.2 instead of {0}.",
            "arguments": [
              "[javax.net.ssl.SSLContext.getInstance](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/SSLUtilTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 355,
                  "endLine": 355,
                  "startColumn": 20,
                  "endColumn": 42
                }
              }
            }
          ],
          "fingerprints": {
            "0": "112b93d98e983f83d9d3f37c9a190f587167b26829ed8c679162282547ab8b0a",
            "1": "19689298.98dbaec4.011b8e79.ede9cf8e.60644571.afca3b91.533894bc.54d46e25.19689298.98dbaec4.011b8e79.ede9cf8e.60644571.afca3b91.df7e59ba.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/SSLUtilTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 355,
                            "endLine": 355,
                            "startColumn": 20,
                            "endColumn": 42
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/TLS/test",
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "Implement secure HTTPS communication. Consider using latest TLSv1.2 instead of javax.net.ssl.SSLContext.getInstance.",
            "markdown": "Implement secure HTTPS communication. Consider using latest TLSv1.2 instead of {0}.",
            "arguments": [
              "[javax.net.ssl.SSLContext.getInstance](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/SSLUtilTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 390,
                  "endLine": 390,
                  "startColumn": 20,
                  "endColumn": 42
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3fe30318ed4fb078b678a56fe93812d575d77274cafa8508813b8f6c528b7a53",
            "1": "19689298.98dbaec4.011b8e79.ede9cf8e.60644571.afca3b91.533894bc.54d46e25.19689298.98dbaec4.011b8e79.ede9cf8e.60644571.afca3b91.df7e59ba.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/SSLUtilTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 390,
                            "endLine": 390,
                            "startColumn": 20,
                            "endColumn": 42
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/TLS/test",
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "Implement secure HTTPS communication. Consider using latest TLSv1.2 instead of javax.net.ssl.SSLContext.getInstance.",
            "markdown": "Implement secure HTTPS communication. Consider using latest TLSv1.2 instead of {0}.",
            "arguments": [
              "[javax.net.ssl.SSLContext.getInstance](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/SSLUtilTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 429,
                  "endLine": 429,
                  "startColumn": 20,
                  "endColumn": 42
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e46cd05e1b4cac10379e8c08ef8099a8edf4c4564d769f0efcdd07e47f648b4a",
            "1": "19689298.98dbaec4.011b8e79.ede9cf8e.60644571.afca3b91.533894bc.54d46e25.19689298.98dbaec4.011b8e79.ede9cf8e.60644571.afca3b91.df7e59ba.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/SSLUtilTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 429,
                            "endLine": 429,
                            "startColumn": 20,
                            "endColumn": 42
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/TLS/test",
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "Implement secure HTTPS communication. Consider using latest TLSv1.2 instead of javax.net.ssl.SSLContext.getInstance.",
            "markdown": "Implement secure HTTPS communication. Consider using latest TLSv1.2 instead of {0}.",
            "arguments": [
              "[javax.net.ssl.SSLContext.getInstance](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/SSLUtilTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 462,
                  "endLine": 462,
                  "startColumn": 20,
                  "endColumn": 42
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f51aa11cc6507399e3218095627feba1a31ce38bdcc08f6660aab7345233fca0",
            "1": "19689298.98dbaec4.011b8e79.ede9cf8e.60644571.afca3b91.533894bc.54d46e25.19689298.98dbaec4.011b8e79.ede9cf8e.60644571.afca3b91.df7e59ba.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/SSLUtilTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 462,
                            "endLine": 462,
                            "startColumn": 20,
                            "endColumn": 42
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/TLS/test",
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "Implement secure HTTPS communication. Consider using latest TLSv1.2 instead of javax.net.ssl.SSLContext.getInstance.",
            "markdown": "Implement secure HTTPS communication. Consider using latest TLSv1.2 instead of {0}.",
            "arguments": [
              "[javax.net.ssl.SSLContext.getInstance](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/SSLUtilTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 498,
                  "endLine": 498,
                  "startColumn": 20,
                  "endColumn": 42
                }
              }
            }
          ],
          "fingerprints": {
            "0": "67471894037117c3185533c8916757f5d6f137c41a49ee23d447a5cbf908a504",
            "1": "19689298.98dbaec4.011b8e79.ede9cf8e.60644571.afca3b91.533894bc.54d46e25.19689298.98dbaec4.011b8e79.ede9cf8e.60644571.afca3b91.df7e59ba.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/SSLUtilTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 498,
                            "endLine": 498,
                            "startColumn": 20,
                            "endColumn": 42
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/TimingAttack",
          "ruleIndex": 10,
          "level": "warning",
          "message": {
            "text": "An attacker can guess the secret value of doFinal because it is compared using java.util.Arrays.equals, which is vulnerable to timing attacks. Use java.security.MessageDigest.isEqual to compare values securely.",
            "markdown": "An attacker can guess the secret value of {0} because it is compared using {1}, which is vulnerable to timing attacks. Use java.security.MessageDigest.isEqual to compare values securely.",
            "arguments": [
              "[doFinal](0)",
              "[java.util.Arrays.equals](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/com/unboundid/util/PassphraseEncryptedStreamHeader.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 773,
                  "endLine": 773,
                  "startColumn": 15,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "afc68215afd0dff95fab8c84d9a2cadc81b736cf8eb9b7093a9887665f7d90f9",
            "1": "8c037dea.8ba1272f.54350824.b8440f76.5ce79164.0bdcf4c7.fa1cb7c0.e8ad4388.8c037dea.8ba1272f.54350824.b8440f76.5ce79164.0bdcf4c7.fa1cb7c0.e8ad4388"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/com/unboundid/util/PassphraseEncryptedStreamHeader.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 772,
                            "endLine": 772,
                            "startColumn": 41,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/com/unboundid/util/PassphraseEncryptedStreamHeader.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 773,
                            "endLine": 773,
                            "startColumn": 15,
                            "endColumn": 28
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 301,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ]
          }
        },
        {
          "ruleId": "java/TimingAttack",
          "ruleIndex": 10,
          "level": "warning",
          "message": {
            "text": "An attacker can guess the secret value of digest because it is compared using java.util.Arrays.equals, which is vulnerable to timing attacks. Use java.security.MessageDigest.isEqual to compare values securely.",
            "markdown": "An attacker can guess the secret value of {0} because it is compared using {1}, which is vulnerable to timing attacks. Use java.security.MessageDigest.isEqual to compare values securely.",
            "arguments": [
              "[digest](0)",
              "[java.util.Arrays.equals](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/com/unboundid/ldap/listener/SaltedMessageDigestInMemoryPasswordEncoder.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 350,
                  "endLine": 350,
                  "startColumn": 12,
                  "endColumn": 25
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fcd72d53c50710eb033cc7fe643e373425af436a12a5e34b0ffedc308b40c2d1",
            "1": "05517f54.8ba1272f.54350824.c0a07c24.bec5399b.c80ba7fb.fa1cb7c0.b0525dd6.05517f54.8ba1272f.54350824.c0a07c24.bec5399b.c80ba7fb.fa1cb7c0.b0525dd6"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/com/unboundid/ldap/listener/SaltedMessageDigestInMemoryPasswordEncoder.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 349,
                            "endLine": 349,
                            "startColumn": 35,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/com/unboundid/ldap/listener/SaltedMessageDigestInMemoryPasswordEncoder.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 350,
                            "endLine": 350,
                            "startColumn": 12,
                            "endColumn": 25
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 301,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureCipherNoIntegrity/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "The ECB mode used in com.unboundid.util.CryptoHelper.getCipher does not provide integrity. Consided using Galois/Counter Mode.",
            "markdown": "The {0} mode used in {1} does not provide integrity. Consided using Galois/Counter Mode.",
            "arguments": [
              "[ECB](0)",
              "[com.unboundid.util.CryptoHelper.getCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 233,
                  "endLine": 233,
                  "startColumn": 19,
                  "endColumn": 41
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9607b1f4771ccb16518f9d52cf3c46433f0db302feda13985b70c6bf2c5ab964",
            "1": "ca9876a9.1cbd3ff4.ba832df5.c0497337.3e9eb16c.bf8c21d8.9c8c6033.54d46e25.ca9876a9.1cbd3ff4.ba832df5.c0497337.3e9eb16c.bf8c21d8.9c8c6033.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 233,
                            "endLine": 233,
                            "startColumn": 42,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 233,
                            "endLine": 233,
                            "startColumn": 19,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 402,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureCipherNoIntegrity/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "The ECB mode used in com.unboundid.util.CryptoHelper.getCipher does not provide integrity. Consided using Galois/Counter Mode.",
            "markdown": "The {0} mode used in {1} does not provide integrity. Consided using Galois/Counter Mode.",
            "arguments": [
              "[ECB](0)",
              "[com.unboundid.util.CryptoHelper.getCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 235,
                  "endLine": 235,
                  "startColumn": 10,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6a33c30776e7f3e9c2c2cac77a0908d90df39f0c717031b9573cfa15eccb557d",
            "1": "19689298.e100d401.ba832df5.692919d5.3e9eb16c.bf8c21d8.a6108c8a.bcdc083a.19689298.e100d401.ba832df5.692919d5.3e9eb16c.bf8c21d8.a6108c8a.bcdc083a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 235,
                            "endLine": 235,
                            "startColumn": 33,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 235,
                            "endLine": 235,
                            "startColumn": 10,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 402,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureCipherNoIntegrity/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "The ECB mode used in com.unboundid.util.CryptoHelper.getCipher does not provide integrity. Consided using Galois/Counter Mode.",
            "markdown": "The {0} mode used in {1} does not provide integrity. Consided using Galois/Counter Mode.",
            "arguments": [
              "[ECB](0)",
              "[com.unboundid.util.CryptoHelper.getCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 302,
                  "endLine": 302,
                  "startColumn": 19,
                  "endColumn": 41
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3e5b063569703f44a8be51b12ad0f5a5429aa6b6b6d48e7b6a1cef69aab9806d",
            "1": "ca9876a9.1cbd3ff4.ba832df5.c0497337.45295f25.bf8c21d8.c453dcc3.54d46e25.ca9876a9.1cbd3ff4.ba832df5.c0497337.45295f25.bf8c21d8.c453dcc3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 302,
                            "endLine": 302,
                            "startColumn": 42,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 302,
                            "endLine": 302,
                            "startColumn": 19,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 402,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureCipherNoIntegrity/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "The ECB mode used in com.unboundid.util.CryptoHelper.getCipher does not provide integrity. Consided using Galois/Counter Mode.",
            "markdown": "The {0} mode used in {1} does not provide integrity. Consided using Galois/Counter Mode.",
            "arguments": [
              "[ECB](0)",
              "[com.unboundid.util.CryptoHelper.getCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 304,
                  "endLine": 304,
                  "startColumn": 10,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b61521ea8ab41e7022b949dc4f028681bbd8f34ab9f6fd367926d144002c31e5",
            "1": "ca9876a9.1cbd3ff4.ba832df5.ede9cf8e.3e9eb16c.bf8c21d8.c453dcc3.bcdc083a.ca9876a9.1cbd3ff4.ba832df5.ede9cf8e.3e9eb16c.bf8c21d8.c453dcc3.bcdc083a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 304,
                            "endLine": 304,
                            "startColumn": 33,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 304,
                            "endLine": 304,
                            "startColumn": 10,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 402,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureCipherNoIntegrity/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "The ECB mode used in com.unboundid.util.CryptoHelper.getCipher does not provide integrity. Consided using Galois/Counter Mode.",
            "markdown": "The {0} mode used in {1} does not provide integrity. Consided using Galois/Counter Mode.",
            "arguments": [
              "[ECB](0)",
              "[com.unboundid.util.CryptoHelper.getCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 313,
                  "endLine": 313,
                  "startColumn": 19,
                  "endColumn": 41
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8039e6a2d677bc51a7c339f25b38e2e58cb15e5718c968487890fd55de780fac",
            "1": "ca9876a9.e100d401.ba832df5.692919d5.3e9eb16c.bf8c21d8.9c8c6033.54d46e25.ca9876a9.e100d401.ba832df5.692919d5.3e9eb16c.bf8c21d8.9c8c6033.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 313,
                            "endLine": 313,
                            "startColumn": 42,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 313,
                            "endLine": 313,
                            "startColumn": 19,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 402,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureCipherNoIntegrity/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "The ECB mode used in com.unboundid.util.CryptoHelper.getCipher does not provide integrity. Consided using Galois/Counter Mode.",
            "markdown": "The {0} mode used in {1} does not provide integrity. Consided using Galois/Counter Mode.",
            "arguments": [
              "[ECB](0)",
              "[com.unboundid.util.CryptoHelper.getCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 315,
                  "endLine": 315,
                  "startColumn": 10,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d9f0661a2c81edd2b7e2fe34f4d9af88881b525d2ad1f073870c5e2225d901be",
            "1": "ca9876a9.e100d401.ba832df5.692919d5.3e9eb16c.bf8c21d8.a6108c8a.bcdc083a.ca9876a9.e100d401.ba832df5.692919d5.3e9eb16c.bf8c21d8.a6108c8a.bcdc083a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 315,
                            "endLine": 315,
                            "startColumn": 33,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 315,
                            "endLine": 315,
                            "startColumn": 10,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 402,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureCipherNoIntegrity/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "The ECB mode used in com.unboundid.util.CryptoHelper.getCipher does not provide integrity. Consided using Galois/Counter Mode.",
            "markdown": "The {0} mode used in {1} does not provide integrity. Consided using Galois/Counter Mode.",
            "arguments": [
              "[ECB](0)",
              "[com.unboundid.util.CryptoHelper.getCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 349,
                  "endLine": 349,
                  "startColumn": 7,
                  "endColumn": 29
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7f11269d1f27647f1fdcc7fbf54b69fc6f9a01dd547b8137dfe5a842c0e73c01",
            "1": "1b46a441.1cbd3ff4.ba832df5.e22980a8.d31a8364.bf8c21d8.bae646e8.54d46e25.1b46a441.1cbd3ff4.ba832df5.e22980a8.d31a8364.bf8c21d8.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 349,
                            "endLine": 349,
                            "startColumn": 30,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 349,
                            "endLine": 349,
                            "startColumn": 7,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 402,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureCipherNoIntegrity/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "The ECB mode used in com.unboundid.util.CryptoHelper.getCipher does not provide integrity. Consided using Galois/Counter Mode.",
            "markdown": "The {0} mode used in {1} does not provide integrity. Consided using Galois/Counter Mode.",
            "arguments": [
              "[ECB](0)",
              "[com.unboundid.util.CryptoHelper.getCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 357,
                  "endLine": 357,
                  "startColumn": 19,
                  "endColumn": 41
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6949efe1c477b22fef5c99b0ee87f85a30a9af61f846fa4793073fe20fd19212",
            "1": "6f5723f5.f6b412be.ba832df5.c0497337.3e9eb16c.bf8c21d8.00e67e3a.54d46e25.6f5723f5.f6b412be.ba832df5.c0497337.3e9eb16c.bf8c21d8.00e67e3a.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 357,
                            "endLine": 357,
                            "startColumn": 42,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 357,
                            "endLine": 357,
                            "startColumn": 19,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 402,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureCipherNoIntegrity/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "The ECB mode used in com.unboundid.util.CryptoHelper.getCipher does not provide integrity. Consided using Galois/Counter Mode.",
            "markdown": "The {0} mode used in {1} does not provide integrity. Consided using Galois/Counter Mode.",
            "arguments": [
              "[ECB](0)",
              "[com.unboundid.util.CryptoHelper.getCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 359,
                  "endLine": 359,
                  "startColumn": 10,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e5469c17026a2b903df4ca76976e9ce5fd4f58f454b72addd2ca3e0fa4a858f6",
            "1": "6f5723f5.1cbd3ff4.ba832df5.ede9cf8e.3e9eb16c.bf8c21d8.00e67e3a.bcdc083a.6f5723f5.1cbd3ff4.ba832df5.ede9cf8e.3e9eb16c.bf8c21d8.00e67e3a.bcdc083a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 359,
                            "endLine": 359,
                            "startColumn": 33,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 359,
                            "endLine": 359,
                            "startColumn": 10,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 402,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureCipherNoIntegrity/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "The ECB mode used in com.unboundid.util.CryptoHelper.getCipher does not provide integrity. Consided using Galois/Counter Mode.",
            "markdown": "The {0} mode used in {1} does not provide integrity. Consided using Galois/Counter Mode.",
            "arguments": [
              "[ECB](0)",
              "[com.unboundid.util.CryptoHelper.getCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 369,
                  "endLine": 369,
                  "startColumn": 19,
                  "endColumn": 41
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5ea1e92f66673b36a47f51012a3cd402e2d67455cad50e9dbfbb6733ebdb72f5",
            "1": "ca9876a9.e100d401.ba832df5.692919d5.3e9eb16c.bf8c21d8.9c8c6033.54d46e25.ca9876a9.e100d401.ba832df5.692919d5.3e9eb16c.bf8c21d8.9c8c6033.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 369,
                            "endLine": 369,
                            "startColumn": 42,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 369,
                            "endLine": 369,
                            "startColumn": 19,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 402,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureCipherNoIntegrity/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "The ECB mode used in com.unboundid.util.CryptoHelper.getCipher does not provide integrity. Consided using Galois/Counter Mode.",
            "markdown": "The {0} mode used in {1} does not provide integrity. Consided using Galois/Counter Mode.",
            "arguments": [
              "[ECB](0)",
              "[com.unboundid.util.CryptoHelper.getCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 371,
                  "endLine": 371,
                  "startColumn": 10,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7a98f5476e9440a1ae4e61719688e32586191a47611a54227fce70c9d1858dc4",
            "1": "ca9876a9.e100d401.ba832df5.692919d5.3e9eb16c.bf8c21d8.a6108c8a.bcdc083a.ca9876a9.e100d401.ba832df5.692919d5.3e9eb16c.bf8c21d8.a6108c8a.bcdc083a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 371,
                            "endLine": 371,
                            "startColumn": 33,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 371,
                            "endLine": 371,
                            "startColumn": 10,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 402,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureCipherNoIntegrity/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "The CBC mode used in com.unboundid.util.CryptoHelper.getCipher does not provide integrity. Consided using Galois/Counter Mode.",
            "markdown": "The {0} mode used in {1} does not provide integrity. Consided using Galois/Counter Mode.",
            "arguments": [
              "[CBC](0)",
              "[com.unboundid.util.CryptoHelper.getCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 237,
                  "endLine": 237,
                  "startColumn": 19,
                  "endColumn": 41
                }
              }
            }
          ],
          "fingerprints": {
            "0": "de0afe381344cd3f7ca8360f52be718782d9485ca6816bde02d23419dd6501f8",
            "1": "ca9876a9.1cbd3ff4.8c418446.c0497337.4a9c8cbc.42d324ee.9c8c6033.54d46e25.ca9876a9.1cbd3ff4.8c418446.c0497337.4a9c8cbc.42d324ee.9c8c6033.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 237,
                            "endLine": 237,
                            "startColumn": 42,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 237,
                            "endLine": 237,
                            "startColumn": 19,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 402,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureCipherNoIntegrity/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "The CBC mode used in com.unboundid.util.CryptoHelper.getCipher does not provide integrity. Consided using Galois/Counter Mode.",
            "markdown": "The {0} mode used in {1} does not provide integrity. Consided using Galois/Counter Mode.",
            "arguments": [
              "[CBC](0)",
              "[com.unboundid.util.CryptoHelper.getCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 239,
                  "endLine": 239,
                  "startColumn": 10,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5dd81aec4b6abc88b575c24c82ec129d8ed875e869e51cdc49e8b243ed4deb49",
            "1": "ca9876a9.1cbd3ff4.c97c77ee.606d04d5.6bacdef5.42d324ee.a6108c8a.bcdc083a.ca9876a9.1cbd3ff4.c97c77ee.606d04d5.6bacdef5.42d324ee.a6108c8a.bcdc083a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 239,
                            "endLine": 239,
                            "startColumn": 33,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 239,
                            "endLine": 239,
                            "startColumn": 10,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 402,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureCipherNoIntegrity/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "The CBC mode used in com.unboundid.util.CryptoHelper.getCipher does not provide integrity. Consided using Galois/Counter Mode.",
            "markdown": "The {0} mode used in {1} does not provide integrity. Consided using Galois/Counter Mode.",
            "arguments": [
              "[CBC](0)",
              "[com.unboundid.util.CryptoHelper.getCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 242,
                  "endLine": 242,
                  "startColumn": 10,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "cd9f6783b8222ea4ba05d36cf1eae9cdf002abf39092b57818c94d426784d953",
            "1": "ca9876a9.19d25089.0de70b61.0c53b9af.f25d727a.42d324ee.9c8c6033.bcdc083a.ca9876a9.19d25089.0de70b61.0c53b9af.f25d727a.42d324ee.9c8c6033.bcdc083a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 242,
                            "endLine": 242,
                            "startColumn": 33,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 242,
                            "endLine": 242,
                            "startColumn": 10,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 402,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureCipherNoIntegrity/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "The CBC mode used in com.unboundid.util.CryptoHelper.getCipher does not provide integrity. Consided using Galois/Counter Mode.",
            "markdown": "The {0} mode used in {1} does not provide integrity. Consided using Galois/Counter Mode.",
            "arguments": [
              "[CBC](0)",
              "[com.unboundid.util.CryptoHelper.getCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 307,
                  "endLine": 307,
                  "startColumn": 19,
                  "endColumn": 41
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b66039d3904883f5bec91d9f2a3219f0be1d5b156dc3871d2a01dad5f0a7f532",
            "1": "ca9876a9.1cbd3ff4.956632fb.c0497337.4a9c8cbc.42d324ee.c453dcc3.54d46e25.ca9876a9.1cbd3ff4.956632fb.c0497337.4a9c8cbc.42d324ee.c453dcc3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 307,
                            "endLine": 307,
                            "startColumn": 42,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 307,
                            "endLine": 307,
                            "startColumn": 19,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 402,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureCipherNoIntegrity/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "The CBC mode used in com.unboundid.util.CryptoHelper.getCipher does not provide integrity. Consided using Galois/Counter Mode.",
            "markdown": "The {0} mode used in {1} does not provide integrity. Consided using Galois/Counter Mode.",
            "arguments": [
              "[CBC](0)",
              "[com.unboundid.util.CryptoHelper.getCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 309,
                  "endLine": 309,
                  "startColumn": 10,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f51c2fb5b9eb7b4605d6595e84f66dcc6ef100fac281ea6afc989914fcd38792",
            "1": "ca9876a9.1cbd3ff4.956632fb.606d04d5.6bacdef5.42d324ee.c453dcc3.bcdc083a.ca9876a9.1cbd3ff4.956632fb.606d04d5.6bacdef5.42d324ee.c453dcc3.bcdc083a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 309,
                            "endLine": 309,
                            "startColumn": 33,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 309,
                            "endLine": 309,
                            "startColumn": 10,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 402,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureCipherNoIntegrity/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "The CBC mode used in com.unboundid.util.CryptoHelper.getCipher does not provide integrity. Consided using Galois/Counter Mode.",
            "markdown": "The {0} mode used in {1} does not provide integrity. Consided using Galois/Counter Mode.",
            "arguments": [
              "[CBC](0)",
              "[com.unboundid.util.CryptoHelper.getCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 320,
                  "endLine": 320,
                  "startColumn": 10,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0057580f9277812a8313a4ac6ad2f2b1ccccb8c1b3abe2b94db9664d6bf2c6de",
            "1": "ca9876a9.e100d401.67172085.692919d5.4a9c8cbc.42d324ee.9c8c6033.54d46e25.ca9876a9.e100d401.67172085.692919d5.4a9c8cbc.42d324ee.9c8c6033.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 320,
                            "endLine": 320,
                            "startColumn": 33,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 320,
                            "endLine": 320,
                            "startColumn": 10,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 402,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureCipherNoIntegrity/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "The CBC mode used in com.unboundid.util.CryptoHelper.getCipher does not provide integrity. Consided using Galois/Counter Mode.",
            "markdown": "The {0} mode used in {1} does not provide integrity. Consided using Galois/Counter Mode.",
            "arguments": [
              "[CBC](0)",
              "[com.unboundid.util.CryptoHelper.getCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 323,
                  "endLine": 323,
                  "startColumn": 10,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2e19190853d1fb293ef3f0e94e61d51edcd11d7db73ca1b92e80394f32110710",
            "1": "ca9876a9.e100d401.c97c77ee.692919d5.6bacdef5.42d324ee.a6108c8a.bcdc083a.ca9876a9.e100d401.c97c77ee.692919d5.6bacdef5.42d324ee.a6108c8a.bcdc083a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 323,
                            "endLine": 323,
                            "startColumn": 33,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 323,
                            "endLine": 323,
                            "startColumn": 10,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 402,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureCipherNoIntegrity/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "The CBC mode used in com.unboundid.util.CryptoHelper.getCipher does not provide integrity. Consided using Galois/Counter Mode.",
            "markdown": "The {0} mode used in {1} does not provide integrity. Consided using Galois/Counter Mode.",
            "arguments": [
              "[CBC](0)",
              "[com.unboundid.util.CryptoHelper.getCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 363,
                  "endLine": 363,
                  "startColumn": 10,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c42e7d86a4e4b43f2e1bf11e858df08b153ef2e814b491dd48fd51273e69bd11",
            "1": "6f5723f5.1cbd3ff4.8c418446.c0497337.359d1a69.42d324ee.00e67e3a.54d46e25.6f5723f5.1cbd3ff4.8c418446.c0497337.359d1a69.42d324ee.00e67e3a.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 363,
                            "endLine": 363,
                            "startColumn": 33,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 363,
                            "endLine": 363,
                            "startColumn": 10,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 402,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureCipherNoIntegrity/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "The CBC mode used in com.unboundid.util.CryptoHelper.getCipher does not provide integrity. Consided using Galois/Counter Mode.",
            "markdown": "The {0} mode used in {1} does not provide integrity. Consided using Galois/Counter Mode.",
            "arguments": [
              "[CBC](0)",
              "[com.unboundid.util.CryptoHelper.getCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 365,
                  "endLine": 365,
                  "startColumn": 10,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9ca4d648166541b14fc8ccaa0c8930e2920120467201a844e8c79e30f2735c3e",
            "1": "6f5723f5.1cbd3ff4.c97c77ee.606d04d5.359d1a69.42d324ee.00e67e3a.bcdc083a.6f5723f5.1cbd3ff4.c97c77ee.606d04d5.359d1a69.42d324ee.00e67e3a.bcdc083a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 365,
                            "endLine": 365,
                            "startColumn": 33,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 365,
                            "endLine": 365,
                            "startColumn": 10,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 402,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureCipherNoIntegrity/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "The CBC mode used in com.unboundid.util.CryptoHelper.getCipher does not provide integrity. Consided using Galois/Counter Mode.",
            "markdown": "The {0} mode used in {1} does not provide integrity. Consided using Galois/Counter Mode.",
            "arguments": [
              "[CBC](0)",
              "[com.unboundid.util.CryptoHelper.getCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 375,
                  "endLine": 375,
                  "startColumn": 10,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ad395ed6ec29313ddd795889ce2f90bc8945da2bf3b96098a6fd761f8aa42b4b",
            "1": "ca9876a9.e100d401.67172085.692919d5.4a9c8cbc.42d324ee.9c8c6033.54d46e25.ca9876a9.e100d401.67172085.692919d5.4a9c8cbc.42d324ee.9c8c6033.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 375,
                            "endLine": 375,
                            "startColumn": 33,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 375,
                            "endLine": 375,
                            "startColumn": 10,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 402,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureCipherNoIntegrity/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "The CBC mode used in com.unboundid.util.CryptoHelper.getCipher does not provide integrity. Consided using Galois/Counter Mode.",
            "markdown": "The {0} mode used in {1} does not provide integrity. Consided using Galois/Counter Mode.",
            "arguments": [
              "[CBC](0)",
              "[com.unboundid.util.CryptoHelper.getCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 377,
                  "endLine": 377,
                  "startColumn": 10,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a1eadfb62c990768905cf9d97b2dacf5534ac28bef21f00df8b3fe148bef67ad",
            "1": "ca9876a9.e100d401.c97c77ee.692919d5.6bacdef5.42d324ee.a6108c8a.bcdc083a.ca9876a9.e100d401.c97c77ee.692919d5.6bacdef5.42d324ee.a6108c8a.bcdc083a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 377,
                            "endLine": 377,
                            "startColumn": 33,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/CryptoHelperTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 377,
                            "endLine": 377,
                            "startColumn": 10,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 402,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "python/CommandInjection",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "Unsanitized input from a command line argument flows into os.system, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19)",
              "[os.system](20)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ext/ant/bin/runant.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 105,
                  "endLine": 105,
                  "startColumn": 1,
                  "endColumn": 10
                }
              }
            }
          ],
          "fingerprints": {
            "0": "517b664f8eac63f4a490ba624ac58a1344867613ab54c2c787c4346e39a93f91",
            "1": "800eb1b9.6a0e600c.79e62dc9.139c59a8.8a207be7.ba14daf2.698a3c7f.6aac30d8.895587cd.348ddf12.a4b2942e.b23a8049.197552d4.73cfdf26.18614a65.6aac30d8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ext/ant/bin/runant.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 64,
                            "endColumn": 72
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ext/ant/bin/runant.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 64,
                            "endColumn": 72
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ext/ant/bin/runant.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 48,
                            "endColumn": 63
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ext/ant/bin/runant.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 32,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ext/ant/bin/runant.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 16,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ext/ant/bin/runant.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 5,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ext/ant/bin/runant.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 24,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ext/ant/bin/runant.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 11,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ext/ant/bin/runant.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 1,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ext/ant/bin/runant.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 65,
                            "endLine": 65,
                            "startColumn": 29,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ext/ant/bin/runant.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 65,
                            "endLine": 65,
                            "startColumn": 16,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ext/ant/bin/runant.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 65,
                            "endLine": 65,
                            "startColumn": 1,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ext/ant/bin/runant.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 66,
                            "endLine": 66,
                            "startColumn": 23,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ext/ant/bin/runant.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 71,
                            "endLine": 71,
                            "startColumn": 18,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ext/ant/bin/runant.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 71,
                            "endLine": 71,
                            "startColumn": 1,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ext/ant/bin/runant.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 97,
                            "endLine": 97,
                            "startColumn": 28,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ext/ant/bin/runant.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 97,
                            "endLine": 97,
                            "startColumn": 9,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ext/ant/bin/runant.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 95,
                            "endLine": 95,
                            "startColumn": 11,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ext/ant/bin/runant.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 95,
                            "endLine": 95,
                            "startColumn": 1,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ext/ant/bin/runant.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 105,
                            "endLine": 105,
                            "startColumn": 11,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ext/ant/bin/runant.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 105,
                            "endLine": 105,
                            "startColumn": 1,
                            "endColumn": 10
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 751,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket/test",
          "ruleIndex": 13,
          "level": "note",
          "message": {
            "text": "Writing to an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Writing to](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/SSLUtilTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 852,
                  "endLine": 852,
                  "startColumn": 5,
                  "endColumn": 22
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2d1b9c358ed5364dabd1309ce7e87c840f5eb41a739fd980cad2f5ce52285140",
            "1": "3cbfac07.49766a9f.8f415be7.e22980a8.e27b77c0.10c2e262.ec290f27.54d46e25.19689298.49766a9f.8f415be7.e22980a8.e27b77c0.85d83993.ec290f27.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/SSLUtilTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 852,
                            "endLine": 852,
                            "startColumn": 5,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/SSLUtilTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 852,
                            "endLine": 852,
                            "startColumn": 5,
                            "endColumn": 22
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket/test",
          "ruleIndex": 13,
          "level": "note",
          "message": {
            "text": "Writing to an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Writing to](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tests/unit/src/com/unboundid/util/ssl/SSLUtilTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 854,
                  "endLine": 854,
                  "startColumn": 5,
                  "endColumn": 22
                }
              }
            }
          ],
          "fingerprints": {
            "0": "193e6ec0e23972948f9f148e89e2d0d64b49b309ea9d26bdf5dced37638b1c14",
            "1": "ac4e7c8b.c6f63401.fc7d5400.e22980a8.c41fd899.a5becf45.978780b8.54d46e25.19689298.c6436c56.fc7d5400.e22980a8.c41fd899.85d83993.8c5f03ec.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/SSLUtilTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 854,
                            "endLine": 854,
                            "startColumn": 5,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "tests/unit/src/com/unboundid/util/ssl/SSLUtilTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 854,
                            "endLine": 854,
                            "startColumn": 5,
                            "endColumn": 22
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        }
      ],
      "properties": {
        "coverage": [
          {
            "files": 74,
            "isSupported": true,
            "lang": "XML"
          },
          {
            "files": 2708,
            "isSupported": true,
            "lang": "Java"
          },
          {
            "files": 1593,
            "isSupported": true,
            "lang": "HTML"
          },
          {
            "files": 1,
            "isSupported": true,
            "lang": "Python"
          }
        ]
      }
    }
  ]
}
