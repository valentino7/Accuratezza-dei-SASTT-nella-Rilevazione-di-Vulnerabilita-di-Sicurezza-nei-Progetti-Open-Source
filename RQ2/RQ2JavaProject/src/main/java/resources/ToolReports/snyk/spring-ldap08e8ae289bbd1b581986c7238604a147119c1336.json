{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SnykCode",
          "semanticVersion": "1.0.0",
          "version": "1.0.0",
          "rules": [
            {
              "id": "java/LdapEntryPoisoning",
              "name": "LdapEntryPoisoning",
              "shortDescription": {
                "text": "LDAP Injection"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\nLDAP servers offer simple storage for a range of information types, including systems, services, emails, and users. One of the most common applications of LDAP servers is to orchestrate user sessions, making it easier for users to access multiple services through a single sign-on. An LDAP injection attack occurs when an attacker gains unauthorized access to these centralized stores of user data. If an attacker succeeds in injecting arbitrary, unsanitized information into an LDAP query, the attacker can gain access to credentials or content and/or perform unauthorized actions. This could include adding or modifying records within the centralized data store itself, such as erasing or altering records.\nAs with other injection-type attacks, like SQL injection, LDAP injection attacks are highly preventable through safer web application design and coding practices.\n\n### Best practices for prevention\n* Never pass user input directly to the LDAP query.\n* Sanitize all input prior to processing as appropriate for the particular input type.\n* Escape all LDAP specific characters, such as, `#,\",+, ;, <, >, \\` and null, replacing with ASCII hex values. However, do not rely solely on denylists or escaped characters for defense against LDAP injection attacks.\n* For tighter security, consider validating input against an allowlist (\"accept known good\") to ensure that only certain parameters can be passed.\n* Assume all user input is potentially malicious.\n* Adopt development frameworks that specifically provide protection against LDAP injection attacks.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/tl-its-umich-edu/canvas_course_manager/commit/95ff0cf46441915da164bf200b98fad73c8453b0?diff=split#diff-02ee7374fba23d2b4601c9c2cd773fa0L226",
                    "lines": [
                      {
                        "line": "dirContext = new InitialDirContext(env);",
                        "lineNumber": 223,
                        "lineChange": "none"
                      },
                      {
                        "line": "String[] attrIDs = {\"member\"};",
                        "lineNumber": 224,
                        "lineChange": "none"
                      },
                      {
                        "line": "SearchControls searchControls = new SearchControls();",
                        "lineNumber": 225,
                        "lineChange": "none"
                      },
                      {
                        "line": "searchControls.setReturningAttributes(attrIDs);",
                        "lineNumber": 226,
                        "lineChange": "none"
                      },
                      {
                        "line": "searchControls.setReturningObjFlag(true);",
                        "lineNumber": 227,
                        "lineChange": "none"
                      },
                      {
                        "line": "searchControls.setSearchScope(SearchControls.SUBTREE_SCOPE);",
                        "lineNumber": 228,
                        "lineChange": "none"
                      },
                      {
                        "line": "String searchBase = OU_GROUPS;",
                        "lineNumber": 229,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/apache/directory-server/blob/74c227734b0422f322c2a5d09ad7f9ebd5002dd2/core/src/main/java/org/apache/directory/server/core/referral/ReferralInterceptor.java#L792-L794",
                    "lines": [
                      {
                        "line": "static SearchControls getControls()",
                        "lineNumber": 791,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 792,
                        "lineChange": "none"
                      },
                      {
                        "line": "    SearchControls controls = new SearchControls();",
                        "lineNumber": 793,
                        "lineChange": "none"
                      },
                      {
                        "line": "    controls.setReturningObjFlag( false );",
                        "lineNumber": 794,
                        "lineChange": "none"
                      },
                      {
                        "line": "    controls.setSearchScope( SearchControls.SUBTREE_SCOPE );",
                        "lineNumber": 795,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return controls;",
                        "lineNumber": 796,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/rhq-project/rhq/blob/0517e453381aec1d30b6aaa62bec63a322dfa350/etc/dev-utils/TestLdapSettings.java#L660-L662",
                    "lines": [
                      {
                        "line": "long countLimit = 0;",
                        "lineNumber": 659,
                        "lineChange": "none"
                      },
                      {
                        "line": "String[] returnedAttributes = null;",
                        "lineNumber": 660,
                        "lineChange": "none"
                      },
                      {
                        "line": "boolean returnObject = false;",
                        "lineNumber": 661,
                        "lineChange": "none"
                      },
                      {
                        "line": "boolean deference = false;",
                        "lineNumber": 662,
                        "lineChange": "none"
                      },
                      {
                        "line": "SearchControls constraints = new SearchControls(scope, countLimit,",
                        "lineNumber": 663,
                        "lineChange": "none"
                      },
                      {
                        "line": "    timeLimit, returnedAttributes, returnObject, deference);",
                        "lineNumber": 664,
                        "lineChange": "none"
                      },
                      {
                        "line": "return constraints;",
                        "lineNumber": 665,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "CCM3-100 Pointing to new API manager in WAPI ()"
                ],
                "precision": "very-high",
                "repoDatasetSize": 13,
                "cwe": [
                  "CWE-90"
                ]
              }
            },
            {
              "id": "java/HardcodedPassword/test",
              "name": "HardcodedPassword/test",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n### Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/utluiz/spring-examples/commit/56e44932a3a004c3ac96ce1caa3e6d8817230f6e?diff=split#diff-19d771f687bc8ca37d378c39d20ed425L26",
                    "lines": [
                      {
                        "line": "  ds.setUrl(\"jdbc:mysql://localhost:3311/agenda\");",
                        "lineNumber": 23,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  ds.setUrl(\"jdbc:mysql://localhost/agenda\");",
                        "lineNumber": 20,
                        "lineChange": "added"
                      },
                      {
                        "line": "  ds.setUser(\"root\");",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "  ds.setPassword(\"root\");",
                        "lineNumber": 25,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  ds.setPassword(\"\");",
                        "lineNumber": 22,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return ds;",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 27,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Evolveum/midpoint/commit/9ce1d7ff1e78ca65d6b614c52035e1971d1187cd?diff=split#diff-0003b3a408395a5640011d7c8422d19bL43",
                    "lines": [
                      {
                        "line": "      // set the password for our message.",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "      pc.setPassword(\"5ecr3t\");",
                        "lineNumber": 42,
                        "lineChange": "removed"
                      },
                      {
                        "line": "      pc.setPassword(Main.ADM_PASSWORD);",
                        "lineNumber": 42,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 43,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/theonedev/onedev/commit/ee60c786981347fc5ab6685656f3de2ea67045f7?diff=split#diff-7f6f95fdc3f39c216b4bd099d0ca65b6L60",
                    "lines": [
                      {
                        "line": "  System.exit(1);",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "root.setPassword(\"12345\");",
                        "lineNumber": 59,
                        "lineChange": "removed"
                      },
                      {
                        "line": "String password = Bootstrap.command.getArgs()[0];",
                        "lineNumber": 63,
                        "lineChange": "added"
                      },
                      {
                        "line": "root.setPassword(password);",
                        "lineNumber": 64,
                        "lineChange": "added"
                      },
                      {
                        "line": "accountManager.save(root);",
                        "lineNumber": 65,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Added user/password configuration from YML file.",
                  "Added ability to configure databases to run tests against."
                ],
                "precision": "very-high",
                "repoDatasetSize": 383,
                "cwe": [
                  "CWE-798",
                  "CWE-259"
                ]
              }
            },
            {
              "id": "java/LdapEntryPoisoning/test",
              "name": "LdapEntryPoisoning/test",
              "shortDescription": {
                "text": "LDAP Injection"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\nLDAP servers offer simple storage for a range of information types, including systems, services, emails, and users. One of the most common applications of LDAP servers is to orchestrate user sessions, making it easier for users to access multiple services through a single sign-on. An LDAP injection attack occurs when an attacker gains unauthorized access to these centralized stores of user data. If an attacker succeeds in injecting arbitrary, unsanitized information into an LDAP query, the attacker can gain access to credentials or content and/or perform unauthorized actions. This could include adding or modifying records within the centralized data store itself, such as erasing or altering records.\nAs with other injection-type attacks, like SQL injection, LDAP injection attacks are highly preventable through safer web application design and coding practices.\n\n### Best practices for prevention\n* Never pass user input directly to the LDAP query.\n* Sanitize all input prior to processing as appropriate for the particular input type.\n* Escape all LDAP specific characters, such as, `#,\",+, ;, <, >, \\` and null, replacing with ASCII hex values. However, do not rely solely on denylists or escaped characters for defense against LDAP injection attacks.\n* For tighter security, consider validating input against an allowlist (\"accept known good\") to ensure that only certain parameters can be passed.\n* Assume all user input is potentially malicious.\n* Adopt development frameworks that specifically provide protection against LDAP injection attacks.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/tl-its-umich-edu/canvas_course_manager/commit/95ff0cf46441915da164bf200b98fad73c8453b0?diff=split#diff-02ee7374fba23d2b4601c9c2cd773fa0L226",
                    "lines": [
                      {
                        "line": "dirContext = new InitialDirContext(env);",
                        "lineNumber": 223,
                        "lineChange": "none"
                      },
                      {
                        "line": "String[] attrIDs = {\"member\"};",
                        "lineNumber": 224,
                        "lineChange": "none"
                      },
                      {
                        "line": "SearchControls searchControls = new SearchControls();",
                        "lineNumber": 225,
                        "lineChange": "none"
                      },
                      {
                        "line": "searchControls.setReturningAttributes(attrIDs);",
                        "lineNumber": 226,
                        "lineChange": "none"
                      },
                      {
                        "line": "searchControls.setReturningObjFlag(true);",
                        "lineNumber": 227,
                        "lineChange": "none"
                      },
                      {
                        "line": "searchControls.setSearchScope(SearchControls.SUBTREE_SCOPE);",
                        "lineNumber": 228,
                        "lineChange": "none"
                      },
                      {
                        "line": "String searchBase = OU_GROUPS;",
                        "lineNumber": 229,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/apache/directory-server/blob/74c227734b0422f322c2a5d09ad7f9ebd5002dd2/core/src/main/java/org/apache/directory/server/core/referral/ReferralInterceptor.java#L792-L794",
                    "lines": [
                      {
                        "line": "static SearchControls getControls()",
                        "lineNumber": 791,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 792,
                        "lineChange": "none"
                      },
                      {
                        "line": "    SearchControls controls = new SearchControls();",
                        "lineNumber": 793,
                        "lineChange": "none"
                      },
                      {
                        "line": "    controls.setReturningObjFlag( false );",
                        "lineNumber": 794,
                        "lineChange": "none"
                      },
                      {
                        "line": "    controls.setSearchScope( SearchControls.SUBTREE_SCOPE );",
                        "lineNumber": 795,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return controls;",
                        "lineNumber": 796,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/rhq-project/rhq/blob/0517e453381aec1d30b6aaa62bec63a322dfa350/etc/dev-utils/TestLdapSettings.java#L660-L662",
                    "lines": [
                      {
                        "line": "long countLimit = 0;",
                        "lineNumber": 659,
                        "lineChange": "none"
                      },
                      {
                        "line": "String[] returnedAttributes = null;",
                        "lineNumber": 660,
                        "lineChange": "none"
                      },
                      {
                        "line": "boolean returnObject = false;",
                        "lineNumber": 661,
                        "lineChange": "none"
                      },
                      {
                        "line": "boolean deference = false;",
                        "lineNumber": 662,
                        "lineChange": "none"
                      },
                      {
                        "line": "SearchControls constraints = new SearchControls(scope, countLimit,",
                        "lineNumber": 663,
                        "lineChange": "none"
                      },
                      {
                        "line": "    timeLimit, returnedAttributes, returnObject, deference);",
                        "lineNumber": 664,
                        "lineChange": "none"
                      },
                      {
                        "line": "return constraints;",
                        "lineNumber": 665,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "CCM3-100 Pointing to new API manager in WAPI ()"
                ],
                "precision": "very-high",
                "repoDatasetSize": 13,
                "cwe": [
                  "CWE-90"
                ]
              }
            },
            {
              "id": "java/LdapInjection",
              "name": "LdapInjection",
              "shortDescription": {
                "text": "LDAP Injection"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "\n## Details\nLDAP servers offer simple storage for a range of information types, including systems, services, emails, and users. One of the most common applications of LDAP servers is to orchestrate user sessions, making it easier for users to access multiple services through a single sign-on. An LDAP injection attack occurs when an attacker gains unauthorized access to these centralized stores of user data. If an attacker succeeds in injecting arbitrary, unsanitized information into an LDAP query, the attacker can gain access to credentials or content and/or perform unauthorized actions. This could include adding or modifying records within the centralized data store itself, such as erasing or altering records.\nAs with other injection-type attacks, like SQL injection, LDAP injection attacks are highly preventable through safer web application design and coding practices.\n\n### Best practices for prevention\n* Never pass user input directly to the LDAP query.\n* Sanitize all input prior to processing as appropriate for the particular input type.\n* Escape all LDAP specific characters, such as, `#,\",+, ;, <, >, \\` and null, replacing with ASCII hex values. However, do not rely solely on denylists or escaped characters for defense against LDAP injection attacks.\n* For tighter security, consider validating input against an allowlist (\"accept known good\") to ensure that only certain parameters can be passed.\n* Assume all user input is potentially malicious.\n* Adopt development frameworks that specifically provide protection against LDAP injection attacks.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/prestosql/presto/commit/629cc84dcbcfa52fe20992028163ab092b3fb47e?diff=split#diff-8572d1a5d8ecdb804a066cc869842e48L126",
                    "lines": [
                      {
                        "line": "@Override",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain nextFilter)",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throws IOException, ServletException",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // skip auth for http",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!servletRequest.isSecure()) {",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "        nextFilter.doFilter(servletRequest, servletResponse);",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return;",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "    HttpServletRequest request = (HttpServletRequest) servletRequest;",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "    HttpServletResponse response = (HttpServletResponse) servletResponse;",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "        String header = request.getHeader(AUTHORIZATION);",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "        List<String> credentials = getCredentials(header);",
                        "lineNumber": 139,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        Principal principal = authenticate(credentials.get(0), credentials.get(1));",
                        "lineNumber": 140,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        Credentials credentials = getCredentials(header);",
                        "lineNumber": 159,
                        "lineChange": "added"
                      },
                      {
                        "line": "        Principal principal = getPrincipal(credentials);",
                        "lineNumber": 160,
                        "lineChange": "added"
                      },
                      {
                        "line": "        // ldap authentication ok, continue",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "private static List<String> getCredentials(String header)",
                        "lineNumber": 167,
                        "lineChange": "removed"
                      },
                      {
                        "line": "private static Credentials getCredentials(String header)",
                        "lineNumber": 200,
                        "lineChange": "added"
                      },
                      {
                        "line": "        throws AuthenticationException",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (header == null) {",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throw new AuthenticationException(UNAUTHORIZED, \"Unauthorized\");",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!header.startsWith(BASIC_AUTHENTICATION_PREFIX)) {",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throw new AuthenticationException(BAD_REQUEST, \"Basic authentication is expected\");",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String base64EncodedCredentials = header.substring(BASIC_AUTHENTICATION_PREFIX.length());",
                        "lineNumber": 209,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String credentials = decodeCredentials(base64EncodedCredentials);",
                        "lineNumber": 210,
                        "lineChange": "none"
                      },
                      {
                        "line": "    List<String> parts = Splitter.on(':').limit(2).splitToList(credentials);",
                        "lineNumber": 211,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (parts.size() != 2 || parts.stream().anyMatch(String::isEmpty)) {",
                        "lineNumber": 212,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throw new AuthenticationException(BAD_REQUEST, \"Malformed decoded credentials\");",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return parts;",
                        "lineNumber": 182,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    return new Credentials(parts.get(0), parts.get(1));",
                        "lineNumber": 215,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "private static String decodeCredentials(String base64EncodedCredentials)",
                        "lineNumber": 218,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throws AuthenticationException",
                        "lineNumber": 219,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 220,
                        "lineChange": "none"
                      },
                      {
                        "line": "    byte[] bytes;",
                        "lineNumber": 221,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {",
                        "lineNumber": 222,
                        "lineChange": "none"
                      },
                      {
                        "line": "        bytes = Base64.getDecoder().decode(base64EncodedCredentials);",
                        "lineNumber": 223,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 224,
                        "lineChange": "none"
                      },
                      {
                        "line": "    catch (IllegalArgumentException e) {",
                        "lineNumber": 225,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throw new AuthenticationException(BAD_REQUEST, \"Invalid base64 encoded credentials\");",
                        "lineNumber": 226,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 227,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return new String(bytes, UTF_8);",
                        "lineNumber": 228,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 229,
                        "lineChange": "none"
                      },
                      {
                        "line": "private Principal authenticate(String user, String password)",
                        "lineNumber": 231,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throws AuthenticationException",
                        "lineNumber": 232,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 233,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Map<String, String> environment = createEnvironment(user, password);",
                        "lineNumber": 234,
                        "lineChange": "none"
                      },
                      {
                        "line": "    InitialDirContext context = null;",
                        "lineNumber": 235,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {",
                        "lineNumber": 236,
                        "lineChange": "none"
                      },
                      {
                        "line": "        context = createDirContext(environment);",
                        "lineNumber": 237,
                        "lineChange": "none"
                      },
                      {
                        "line": "        checkForGroupMembership(user, context);",
                        "lineNumber": 238,
                        "lineChange": "none"
                      },
                      {
                        "line": "        log.debug(\"Authentication successful for user %s\", user);",
                        "lineNumber": 240,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 255,
                        "lineChange": "none"
                      },
                      {
                        "line": "private Map<String, String> createEnvironment(String user, String password)",
                        "lineNumber": 257,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 258,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return ImmutableMap.<String, String>builder()",
                        "lineNumber": 259,
                        "lineChange": "none"
                      },
                      {
                        "line": "            .putAll(basicEnvironment)",
                        "lineNumber": 260,
                        "lineChange": "none"
                      },
                      {
                        "line": "            .put(SECURITY_AUTHENTICATION, \"simple\")",
                        "lineNumber": 261,
                        "lineChange": "none"
                      },
                      {
                        "line": "            .put(SECURITY_PRINCIPAL, createPrincipal(user))",
                        "lineNumber": 262,
                        "lineChange": "none"
                      },
                      {
                        "line": "            .put(SECURITY_CREDENTIALS, password)",
                        "lineNumber": 263,
                        "lineChange": "none"
                      },
                      {
                        "line": "            .build();",
                        "lineNumber": 264,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 265,
                        "lineChange": "none"
                      },
                      {
                        "line": "private String createPrincipal(String user)",
                        "lineNumber": 267,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 268,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return replaceUser(userBindSearchPattern, user);",
                        "lineNumber": 269,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 270,
                        "lineChange": "none"
                      },
                      {
                        "line": "private String replaceUser(String pattern, String user)",
                        "lineNumber": 272,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 273,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return pattern.replaceAll(\"\\\\$\\\\{USER\\\\}\", user);",
                        "lineNumber": 274,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 275,
                        "lineChange": "none"
                      },
                      {
                        "line": "private void checkForGroupMembership(String user, DirContext context)",
                        "lineNumber": 277,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throws AuthenticationException",
                        "lineNumber": 278,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 279,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 282,
                        "lineChange": "none"
                      },
                      {
                        "line": "String searchFilter = replaceUser(groupAuthorizationSearchPattern.get(), user);",
                        "lineNumber": 284,
                        "lineChange": "none"
                      },
                      {
                        "line": "SearchControls searchControls = new SearchControls();",
                        "lineNumber": 285,
                        "lineChange": "none"
                      },
                      {
                        "line": "searchControls.setSearchScope(SearchControls.SUBTREE_SCOPE);",
                        "lineNumber": 286,
                        "lineChange": "none"
                      },
                      {
                        "line": "NamingEnumeration<SearchResult> search = null;",
                        "lineNumber": 289,
                        "lineChange": "none"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 290,
                        "lineChange": "none"
                      },
                      {
                        "line": "    search = context.search(userBaseDistinguishedName.get(), searchFilter, searchControls);",
                        "lineNumber": 291,
                        "lineChange": "none"
                      },
                      {
                        "line": "    authorized = search.hasMoreElements();",
                        "lineNumber": 292,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 293,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/apache/tomcat/commit/527baba1736d3111596fb19dba367460fdb2808c?diff=split#diff-29108cbea09c507a81a1fba2d274bdb8L233",
                    "lines": [
                      {
                        "line": " * the lock-null resource.",
                        "lineNumber": 230,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 231,
                        "lineChange": "none"
                      },
                      {
                        "line": "private final Hashtable<String,Vector<String>> lockNullResources =",
                        "lineNumber": 232,
                        "lineChange": "none"
                      },
                      {
                        "line": "    new Hashtable<>();",
                        "lineNumber": 233,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 325,
                        "lineChange": "none"
                      },
                      {
                        "line": "@Override",
                        "lineNumber": 326,
                        "lineChange": "none"
                      },
                      {
                        "line": "protected void service(HttpServletRequest req, HttpServletResponse resp)",
                        "lineNumber": 327,
                        "lineChange": "none"
                      },
                      {
                        "line": "    throws ServletException, IOException {",
                        "lineNumber": 328,
                        "lineChange": "none"
                      },
                      {
                        "line": "    final String path = getRelativePath(req);",
                        "lineNumber": 330,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Block access to special subdirectories.",
                        "lineNumber": 332,
                        "lineChange": "none"
                      },
                      {
                        "line": "// WebdavServlet remounts the webapp under a new path, so this check is",
                        "lineNumber": 335,
                        "lineChange": "none"
                      },
                      {
                        "line": "// necessary on all methods (including GET).",
                        "lineNumber": 336,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (isSpecialPath(path)) {",
                        "lineNumber": 337,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resp.sendError(WebdavStatus.SC_NOT_FOUND);",
                        "lineNumber": 338,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return;",
                        "lineNumber": 339,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 340,
                        "lineChange": "none"
                      },
                      {
                        "line": "final String method = req.getMethod();",
                        "lineNumber": 342,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (debug > 0) {",
                        "lineNumber": 344,
                        "lineChange": "none"
                      },
                      {
                        "line": "    log(\"[\" + method + \"] \" + path);",
                        "lineNumber": 345,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 346,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (method.equals(METHOD_PROPFIND)) {",
                        "lineNumber": 348,
                        "lineChange": "none"
                      },
                      {
                        "line": "    doPropfind(req, resp);",
                        "lineNumber": 349,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else if (method.equals(METHOD_PROPPATCH)) {",
                        "lineNumber": 350,
                        "lineChange": "none"
                      },
                      {
                        "line": "    doProppatch(req, resp);",
                        "lineNumber": 351,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else if (method.equals(METHOD_MKCOL)) {",
                        "lineNumber": 352,
                        "lineChange": "none"
                      },
                      {
                        "line": "    doMkcol(req, resp);",
                        "lineNumber": 353,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else if (method.equals(METHOD_COPY)) {",
                        "lineNumber": 354,
                        "lineChange": "none"
                      },
                      {
                        "line": "    doCopy(req, resp);",
                        "lineNumber": 355,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else if (method.equals(METHOD_MOVE)) {",
                        "lineNumber": 356,
                        "lineChange": "none"
                      },
                      {
                        "line": "    doMove(req, resp);",
                        "lineNumber": 357,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else if (method.equals(METHOD_LOCK)) {",
                        "lineNumber": 358,
                        "lineChange": "none"
                      },
                      {
                        "line": "    doLock(req, resp);",
                        "lineNumber": 359,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else if (method.equals(METHOD_UNLOCK)) {",
                        "lineNumber": 360,
                        "lineChange": "none"
                      },
                      {
                        "line": "    doUnlock(req, resp);",
                        "lineNumber": 361,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 362,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // DefaultServlet processing",
                        "lineNumber": 363,
                        "lineChange": "none"
                      },
                      {
                        "line": " * @return <code>true</code> if the resource specified is under a special path",
                        "lineNumber": 374,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 375,
                        "lineChange": "none"
                      },
                      {
                        "line": "private final boolean isSpecialPath(final String path) {",
                        "lineNumber": 376,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return !allowSpecialPaths && (",
                        "lineNumber": 377,
                        "lineChange": "none"
                      },
                      {
                        "line": "            path.toUpperCase(Locale.ENGLISH).startsWith(\"/WEB-INF\") ||",
                        "lineNumber": 378,
                        "lineChange": "none"
                      },
                      {
                        "line": "            path.toUpperCase(Locale.ENGLISH).startsWith(\"/META-INF\"));",
                        "lineNumber": 379,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 380,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 416,
                        "lineChange": "none"
                      },
                      {
                        "line": "@Override",
                        "lineNumber": 417,
                        "lineChange": "none"
                      },
                      {
                        "line": "protected String getRelativePath(HttpServletRequest request) {",
                        "lineNumber": 418,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Are we being processed by a RequestDispatcher.include()?",
                        "lineNumber": 419,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (request.getAttribute(",
                        "lineNumber": 420,
                        "lineChange": "none"
                      },
                      {
                        "line": "            RequestDispatcher.INCLUDE_REQUEST_URI) != null) {",
                        "lineNumber": 421,
                        "lineChange": "none"
                      },
                      {
                        "line": "        String result = (String) request.getAttribute(",
                        "lineNumber": 422,
                        "lineChange": "none"
                      },
                      {
                        "line": "                RequestDispatcher.INCLUDE_PATH_INFO);",
                        "lineNumber": 423,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if ((result == null) || (result.equals(\"\")))",
                        "lineNumber": 424,
                        "lineChange": "none"
                      },
                      {
                        "line": "            result = \"/\";",
                        "lineNumber": 425,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return (result);",
                        "lineNumber": 426,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 427,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // No, extract the desired path directly from the request",
                        "lineNumber": 429,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String result = request.getPathInfo();",
                        "lineNumber": 430,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if ((result == null) || (result.equals(\"\"))) {",
                        "lineNumber": 431,
                        "lineChange": "none"
                      },
                      {
                        "line": "        result = \"/\";",
                        "lineNumber": 432,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 433,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return (result);",
                        "lineNumber": 434,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 436,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 460,
                        "lineChange": "none"
                      },
                      {
                        "line": "@Override",
                        "lineNumber": 461,
                        "lineChange": "none"
                      },
                      {
                        "line": "protected void doOptions(HttpServletRequest req, HttpServletResponse resp)",
                        "lineNumber": 462,
                        "lineChange": "none"
                      },
                      {
                        "line": "    throws ServletException, IOException {",
                        "lineNumber": 463,
                        "lineChange": "none"
                      },
                      {
                        "line": "     resp.addHeader(\"DAV\", \"1,2\");",
                        "lineNumber": 465,
                        "lineChange": "none"
                      },
                      {
                        "line": "    StringBuilder methodsAllowed = determineMethodsAllowed(resources,",
                        "lineNumber": 467,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                                                          req);",
                        "lineNumber": 468,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    StringBuilder methodsAllowed = determineMethodsAllowed(req);",
                        "lineNumber": 443,
                        "lineChange": "added"
                      },
                      {
                        "line": "    resp.addHeader(\"Allow\", methodsAllowed.toString());",
                        "lineNumber": 470,
                        "lineChange": "none"
                      },
                      {
                        "line": " * PROPFIND Method.",
                        "lineNumber": 477,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 478,
                        "lineChange": "none"
                      },
                      {
                        "line": "protected void doPropfind(HttpServletRequest req, HttpServletResponse resp)",
                        "lineNumber": 479,
                        "lineChange": "none"
                      },
                      {
                        "line": "    throws ServletException, IOException {",
                        "lineNumber": 480,
                        "lineChange": "none"
                      },
                      {
                        "line": "     if (!listings) {",
                        "lineNumber": 482,
                        "lineChange": "none"
                      },
                      {
                        "line": "        // Get allowed methods",
                        "lineNumber": 483,
                        "lineChange": "none"
                      },
                      {
                        "line": "        StringBuilder methodsAllowed = determineMethodsAllowed(resources,",
                        "lineNumber": 484,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                                                              req);",
                        "lineNumber": 485,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        StringBuilder methodsAllowed = determineMethodsAllowed(req);",
                        "lineNumber": 458,
                        "lineChange": "added"
                      },
                      {
                        "line": "        resp.addHeader(\"Allow\", methodsAllowed.toString());",
                        "lineNumber": 487,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 490,
                        "lineChange": "none"
                      },
                      {
                        "line": "String path = getRelativePath(req);",
                        "lineNumber": 492,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (path.endsWith(\"/\"))",
                        "lineNumber": 493,
                        "lineChange": "none"
                      },
                      {
                        "line": "    path = path.substring(0, path.length() - 1);",
                        "lineNumber": 494,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Properties which are to be displayed.",
                        "lineNumber": 496,
                        "lineChange": "none"
                      },
                      {
                        "line": "int type = FIND_ALL_PROP;",
                        "lineNumber": 501,
                        "lineChange": "none"
                      },
                      {
                        "line": "String depthStr = req.getHeader(\"Depth\");",
                        "lineNumber": 503,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (depthStr == null) {",
                        "lineNumber": 505,
                        "lineChange": "none"
                      },
                      {
                        "line": "Node propNode = null;",
                        "lineNumber": 517,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (req.getContentLength() > 0) {",
                        "lineNumber": 519,
                        "lineChange": "none"
                      },
                      {
                        "line": "    DocumentBuilder documentBuilder = getDocumentBuilder();",
                        "lineNumber": 520,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {",
                        "lineNumber": 522,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Document document = documentBuilder.parse",
                        "lineNumber": 523,
                        "lineChange": "none"
                      },
                      {
                        "line": "            (new InputSource(req.getInputStream()));",
                        "lineNumber": 524,
                        "lineChange": "none"
                      },
                      {
                        "line": "        // Get the root element of the document",
                        "lineNumber": 526,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 584,
                        "lineChange": "none"
                      },
                      {
                        "line": "Object object = null;",
                        "lineNumber": 587,
                        "lineChange": "removed"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 588,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    object = resources.lookup(path);",
                        "lineNumber": 589,
                        "lineChange": "removed"
                      },
                      {
                        "line": "} catch (NamingException e) {",
                        "lineNumber": 590,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    exists = false;",
                        "lineNumber": 591,
                        "lineChange": "removed"
                      },
                      {
                        "line": "WebResource resource = resources.getResource(path);",
                        "lineNumber": 559,
                        "lineChange": "added"
                      },
                      {
                        "line": "if (!resource.exists()) {",
                        "lineNumber": 561,
                        "lineChange": "added"
                      },
                      {
                        "line": "    int slash = path.lastIndexOf('/');",
                        "lineNumber": 592,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (slash != -1) {",
                        "lineNumber": 593,
                        "lineChange": "none"
                      },
                      {
                        "line": "        String parentPath = path.substring(0, slash);",
                        "lineNumber": 594,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Vector<String> currentLockNullResources =",
                        "lineNumber": 595,
                        "lineChange": "none"
                      },
                      {
                        "line": "            lockNullResources.get(parentPath);",
                        "lineNumber": 596,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (currentLockNullResources != null) {",
                        "lineNumber": 597,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Enumeration<String> lockNullResourcesList =",
                        "lineNumber": 598,
                        "lineChange": "none"
                      },
                      {
                        "line": "                currentLockNullResources.elements();",
                        "lineNumber": 599,
                        "lineChange": "none"
                      },
                      {
                        "line": "            while (lockNullResourcesList.hasMoreElements()) {",
                        "lineNumber": 600,
                        "lineChange": "none"
                      },
                      {
                        "line": "                String lockNullPath =",
                        "lineNumber": 601,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    lockNullResourcesList.nextElement();",
                        "lineNumber": 602,
                        "lineChange": "none"
                      },
                      {
                        "line": "                if (lockNullPath.equals(path)) {",
                        "lineNumber": 603,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    resp.setStatus(WebdavStatus.SC_MULTI_STATUS);",
                        "lineNumber": 604,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    resp.setContentType(\"text/xml; charset=UTF-8\");",
                        "lineNumber": 605,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"multistatus\", XMLWriter.OPENING);",
                        "lineNumber": 611,
                        "lineChange": "none"
                      },
                      {
                        "line": "parseLockNullProperties",
                        "lineNumber": 612,
                        "lineChange": "none"
                      },
                      {
                        "line": "    (req, generatedXML, lockNullPath, type,",
                        "lineNumber": 613,
                        "lineChange": "none"
                      },
                      {
                        "line": "     properties);",
                        "lineNumber": 614,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeElement(\"D\", \"multistatus\",",
                        "lineNumber": 615,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (!exists) {",
                        "lineNumber": 625,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if (!resource.exists()) {",
                        "lineNumber": 595,
                        "lineChange": "added"
                      },
                      {
                        "line": "    resp.sendError(HttpServletResponse.SC_NOT_FOUND, path);",
                        "lineNumber": 626,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return;",
                        "lineNumber": 627,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 628,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (depth == 0) {",
                        "lineNumber": 641,
                        "lineChange": "none"
                      },
                      {
                        "line": "    parseProperties(req, generatedXML, path, type,",
                        "lineNumber": 642,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    properties);",
                        "lineNumber": 643,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 644,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // The stack always contains the object of the current level",
                        "lineNumber": 645,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Stack<String> stack = new Stack<>();",
                        "lineNumber": 646,
                        "lineChange": "none"
                      },
                      {
                        "line": "    stack.push(path);",
                        "lineNumber": 647,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Stack of the objects one level below",
                        "lineNumber": 649,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Stack<String> stackBelow = new Stack<>();",
                        "lineNumber": 650,
                        "lineChange": "none"
                      },
                      {
                        "line": "    while ((!stack.isEmpty()) && (depth >= 0)) {",
                        "lineNumber": 652,
                        "lineChange": "none"
                      },
                      {
                        "line": "        String currentPath = stack.pop();",
                        "lineNumber": 654,
                        "lineChange": "none"
                      },
                      {
                        "line": "        parseProperties(req, generatedXML, currentPath,",
                        "lineNumber": 655,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        type, properties);",
                        "lineNumber": 656,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try {",
                        "lineNumber": 658,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            object = resources.lookup(currentPath);",
                        "lineNumber": 659,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        } catch (NamingException e) {",
                        "lineNumber": 660,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            continue;",
                        "lineNumber": 661,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        resource = resources.getResource(currentPath);",
                        "lineNumber": 628,
                        "lineChange": "added"
                      },
                      {
                        "line": "if (resource.isDirectory() && (depth > 0)) {",
                        "lineNumber": 630,
                        "lineChange": "added"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 666,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    NamingEnumeration<NameClassPair> enumeration =",
                        "lineNumber": 667,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        resources.list(currentPath);",
                        "lineNumber": 668,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    while (enumeration.hasMoreElements()) {",
                        "lineNumber": 669,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        NameClassPair ncPair = enumeration.nextElement();",
                        "lineNumber": 670,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        String newPath = currentPath;",
                        "lineNumber": 671,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        if (!(newPath.endsWith(\"/\")))",
                        "lineNumber": 672,
                        "lineChange": "removed"
                      },
                      {
                        "line": "String[] entries = resources.list(currentPath);",
                        "lineNumber": 632,
                        "lineChange": "added"
                      },
                      {
                        "line": "for (String entry : entries) {",
                        "lineNumber": 633,
                        "lineChange": "added"
                      },
                      {
                        "line": "    String newPath = currentPath;",
                        "lineNumber": 634,
                        "lineChange": "added"
                      },
                      {
                        "line": "    if (!(newPath.endsWith(\"/\")))",
                        "lineNumber": 635,
                        "lineChange": "added"
                      },
                      {
                        "line": "            newPath += \"/\";",
                        "lineNumber": 673,
                        "lineChange": "none"
                      },
                      {
                        "line": "        newPath += ncPair.getName();",
                        "lineNumber": 674,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        stackBelow.push(newPath);",
                        "lineNumber": 675,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 676,
                        "lineChange": "removed"
                      },
                      {
                        "line": "} catch (NamingException e) {",
                        "lineNumber": 677,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    resp.sendError",
                        "lineNumber": 678,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        (HttpServletResponse.SC_INTERNAL_SERVER_ERROR,",
                        "lineNumber": 679,
                        "lineChange": "removed"
                      },
                      {
                        "line": "         path);",
                        "lineNumber": 680,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    return;",
                        "lineNumber": 681,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    newPath += entry;",
                        "lineNumber": 637,
                        "lineChange": "added"
                      },
                      {
                        "line": "    stackBelow.push(newPath);",
                        "lineNumber": 638,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 682,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Displaying the lock-null resources present in that",
                        "lineNumber": 684,
                        "lineChange": "none"
                      },
                      {
                        "line": "// collection",
                        "lineNumber": 685,
                        "lineChange": "none"
                      },
                      {
                        "line": "String lockPath = currentPath;",
                        "lineNumber": 686,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (lockPath.endsWith(\"/\"))",
                        "lineNumber": 687,
                        "lineChange": "none"
                      },
                      {
                        "line": "    lockPath =",
                        "lineNumber": 688,
                        "lineChange": "none"
                      },
                      {
                        "line": "        lockPath.substring(0, lockPath.length() - 1);",
                        "lineNumber": 689,
                        "lineChange": "none"
                      },
                      {
                        "line": "Vector<String> currentLockNullResources =",
                        "lineNumber": 690,
                        "lineChange": "none"
                      },
                      {
                        "line": "    lockNullResources.get(lockPath);",
                        "lineNumber": 691,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (currentLockNullResources != null) {",
                        "lineNumber": 692,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Enumeration<String> lockNullResourcesList =",
                        "lineNumber": 693,
                        "lineChange": "none"
                      },
                      {
                        "line": "        currentLockNullResources.elements();",
                        "lineNumber": 694,
                        "lineChange": "none"
                      },
                      {
                        "line": "    while (lockNullResourcesList.hasMoreElements()) {",
                        "lineNumber": 695,
                        "lineChange": "none"
                      },
                      {
                        "line": "        String lockNullPath =",
                        "lineNumber": 696,
                        "lineChange": "none"
                      },
                      {
                        "line": "            lockNullResourcesList.nextElement();",
                        "lineNumber": 697,
                        "lineChange": "none"
                      },
                      {
                        "line": "        parseLockNullProperties",
                        "lineNumber": 698,
                        "lineChange": "none"
                      },
                      {
                        "line": "            (req, generatedXML, lockNullPath, type,",
                        "lineNumber": 699,
                        "lineChange": "none"
                      },
                      {
                        "line": "             properties);",
                        "lineNumber": 700,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 701,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 704,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (stack.isEmpty()) {",
                        "lineNumber": 706,
                        "lineChange": "none"
                      },
                      {
                        "line": "    depth--;",
                        "lineNumber": 707,
                        "lineChange": "none"
                      },
                      {
                        "line": "    stack = stackBelow;",
                        "lineNumber": 708,
                        "lineChange": "none"
                      },
                      {
                        "line": "    stackBelow = new Stack<>();",
                        "lineNumber": 709,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 710,
                        "lineChange": "none"
                      },
                      {
                        "line": " * PROPPATCH Method.",
                        "lineNumber": 725,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 726,
                        "lineChange": "none"
                      },
                      {
                        "line": "protected void doProppatch(HttpServletRequest req, HttpServletResponse resp)",
                        "lineNumber": 727,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throws IOException {",
                        "lineNumber": 728,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 733,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (isLocked(req)) {",
                        "lineNumber": 735,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resp.sendError(WebdavStatus.SC_LOCKED);",
                        "lineNumber": 736,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return;",
                        "lineNumber": 737,
                        "lineChange": "none"
                      },
                      {
                        "line": " * MKCOL Method.",
                        "lineNumber": 746,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 747,
                        "lineChange": "none"
                      },
                      {
                        "line": "protected void doMkcol(HttpServletRequest req, HttpServletResponse resp)",
                        "lineNumber": 748,
                        "lineChange": "none"
                      },
                      {
                        "line": "    throws ServletException, IOException {",
                        "lineNumber": 749,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 754,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (isLocked(req)) {",
                        "lineNumber": 756,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resp.sendError(WebdavStatus.SC_LOCKED);",
                        "lineNumber": 757,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return;",
                        "lineNumber": 758,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 759,
                        "lineChange": "none"
                      },
                      {
                        "line": "String path = getRelativePath(req);",
                        "lineNumber": 761,
                        "lineChange": "none"
                      },
                      {
                        "line": "boolean exists = true;",
                        "lineNumber": 763,
                        "lineChange": "removed"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 764,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    resources.lookup(path);",
                        "lineNumber": 765,
                        "lineChange": "removed"
                      },
                      {
                        "line": "} catch (NamingException e) {",
                        "lineNumber": 766,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    exists = false;",
                        "lineNumber": 767,
                        "lineChange": "removed"
                      },
                      {
                        "line": "WebResource resource = resources.getResource(path);",
                        "lineNumber": 720,
                        "lineChange": "added"
                      },
                      {
                        "line": "// Can't create a collection if a resource already exists at the given",
                        "lineNumber": 770,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (exists) {",
                        "lineNumber": 772,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if (resource.exists()) {",
                        "lineNumber": 724,
                        "lineChange": "added"
                      },
                      {
                        "line": "    // Get allowed methods",
                        "lineNumber": 773,
                        "lineChange": "none"
                      },
                      {
                        "line": "    StringBuilder methodsAllowed = determineMethodsAllowed(resources,",
                        "lineNumber": 774,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                                                          req);",
                        "lineNumber": 775,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    StringBuilder methodsAllowed = determineMethodsAllowed(req);",
                        "lineNumber": 726,
                        "lineChange": "added"
                      },
                      {
                        "line": "    resp.addHeader(\"Allow\", methodsAllowed.toString());",
                        "lineNumber": 777,
                        "lineChange": "none"
                      },
                      {
                        "line": " }",
                        "lineNumber": 797,
                        "lineChange": "none"
                      },
                      {
                        "line": "boolean result = true;",
                        "lineNumber": 799,
                        "lineChange": "removed"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 800,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    resources.createSubcontext(path);",
                        "lineNumber": 801,
                        "lineChange": "removed"
                      },
                      {
                        "line": "} catch (NamingException e) {",
                        "lineNumber": 802,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    result = false;",
                        "lineNumber": 803,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if (resources.mkdir(path)) {",
                        "lineNumber": 750,
                        "lineChange": "added"
                      },
                      {
                        "line": "    resp.setStatus(WebdavStatus.SC_CREATED);",
                        "lineNumber": 811,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Removing any lock-null resource which would be present",
                        "lineNumber": 812,
                        "lineChange": "none"
                      },
                      {
                        "line": "    lockNullResources.remove(path);",
                        "lineNumber": 813,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 754,
                        "lineChange": "added"
                      },
                      {
                        "line": "    resp.sendError(WebdavStatus.SC_CONFLICT,",
                        "lineNumber": 755,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 814,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 821,
                        "lineChange": "none"
                      },
                      {
                        "line": "@Override",
                        "lineNumber": 822,
                        "lineChange": "none"
                      },
                      {
                        "line": "protected void doDelete(HttpServletRequest req, HttpServletResponse resp)",
                        "lineNumber": 823,
                        "lineChange": "none"
                      },
                      {
                        "line": "    throws ServletException, IOException {",
                        "lineNumber": 824,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 829,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (isLocked(req)) {",
                        "lineNumber": 831,
                        "lineChange": "none"
                      },
                      {
                        "line": "        resp.sendError(WebdavStatus.SC_LOCKED);",
                        "lineNumber": 832,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return;",
                        "lineNumber": 833,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 834,
                        "lineChange": "none"
                      },
                      {
                        "line": "    deleteResource(req, resp);",
                        "lineNumber": 836,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 838,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 849,
                        "lineChange": "none"
                      },
                      {
                        "line": "@Override",
                        "lineNumber": 850,
                        "lineChange": "none"
                      },
                      {
                        "line": "protected void doPut(HttpServletRequest req, HttpServletResponse resp)",
                        "lineNumber": 851,
                        "lineChange": "none"
                      },
                      {
                        "line": "    throws ServletException, IOException {",
                        "lineNumber": 852,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (isLocked(req)) {",
                        "lineNumber": 854,
                        "lineChange": "none"
                      },
                      {
                        "line": "        resp.sendError(WebdavStatus.SC_LOCKED);",
                        "lineNumber": 855,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return;",
                        "lineNumber": 856,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 857,
                        "lineChange": "none"
                      },
                      {
                        "line": "    super.doPut(req, resp);",
                        "lineNumber": 859,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String path = getRelativePath(req);",
                        "lineNumber": 861,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Removing any lock-null resource which would be present",
                        "lineNumber": 863,
                        "lineChange": "none"
                      },
                      {
                        "line": "    lockNullResources.remove(path);",
                        "lineNumber": 864,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 866,
                        "lineChange": "none"
                      },
                      {
                        "line": " * COPY Method.",
                        "lineNumber": 869,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 870,
                        "lineChange": "none"
                      },
                      {
                        "line": "protected void doCopy(HttpServletRequest req, HttpServletResponse resp)",
                        "lineNumber": 871,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throws IOException {",
                        "lineNumber": 872,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 877,
                        "lineChange": "none"
                      },
                      {
                        "line": "    copyResource(req, resp);",
                        "lineNumber": 879,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 881,
                        "lineChange": "none"
                      },
                      {
                        "line": " * MOVE Method.",
                        "lineNumber": 885,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 886,
                        "lineChange": "none"
                      },
                      {
                        "line": "protected void doMove(HttpServletRequest req, HttpServletResponse resp)",
                        "lineNumber": 887,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throws IOException {",
                        "lineNumber": 888,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 893,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (isLocked(req)) {",
                        "lineNumber": 895,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resp.sendError(WebdavStatus.SC_LOCKED);",
                        "lineNumber": 896,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return;",
                        "lineNumber": 897,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 898,
                        "lineChange": "none"
                      },
                      {
                        "line": "String path = getRelativePath(req);",
                        "lineNumber": 900,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (copyResource(req, resp)) {",
                        "lineNumber": 902,
                        "lineChange": "none"
                      },
                      {
                        "line": "    deleteResource(path, req, resp, false);",
                        "lineNumber": 903,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 904,
                        "lineChange": "none"
                      },
                      {
                        "line": " * LOCK Method.",
                        "lineNumber": 910,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 911,
                        "lineChange": "none"
                      },
                      {
                        "line": "protected void doLock(HttpServletRequest req, HttpServletResponse resp)",
                        "lineNumber": 912,
                        "lineChange": "none"
                      },
                      {
                        "line": "    throws ServletException, IOException {",
                        "lineNumber": 913,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 918,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (isLocked(req)) {",
                        "lineNumber": 920,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resp.sendError(WebdavStatus.SC_LOCKED);",
                        "lineNumber": 921,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return;",
                        "lineNumber": 922,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Parsing depth header",
                        "lineNumber": 929,
                        "lineChange": "none"
                      },
                      {
                        "line": "String depthStr = req.getHeader(\"Depth\");",
                        "lineNumber": 931,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (depthStr == null) {",
                        "lineNumber": 933,
                        "lineChange": "none"
                      },
                      {
                        "line": "int lockDuration = DEFAULT_TIMEOUT;",
                        "lineNumber": 945,
                        "lineChange": "none"
                      },
                      {
                        "line": "String lockDurationStr = req.getHeader(\"Timeout\");",
                        "lineNumber": 946,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (lockDurationStr == null) {",
                        "lineNumber": 947,
                        "lineChange": "none"
                      },
                      {
                        "line": "    lockDuration = DEFAULT_TIMEOUT;",
                        "lineNumber": 948,
                        "lineChange": "none"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 985,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Document document = documentBuilder.parse(new InputSource",
                        "lineNumber": 986,
                        "lineChange": "none"
                      },
                      {
                        "line": "        (req.getInputStream()));",
                        "lineNumber": 987,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Get the root element of the document",
                        "lineNumber": 989,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1117,
                        "lineChange": "none"
                      },
                      {
                        "line": "String path = getRelativePath(req);",
                        "lineNumber": 1119,
                        "lineChange": "none"
                      },
                      {
                        "line": "lock.path = path;",
                        "lineNumber": 1121,
                        "lineChange": "none"
                      },
                      {
                        "line": "Object object = null;",
                        "lineNumber": 1124,
                        "lineChange": "removed"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 1125,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    object = resources.lookup(path);",
                        "lineNumber": 1126,
                        "lineChange": "removed"
                      },
                      {
                        "line": "} catch (NamingException e) {",
                        "lineNumber": 1127,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    exists = false;",
                        "lineNumber": 1128,
                        "lineChange": "removed"
                      },
                      {
                        "line": "WebResource resource = resources.getResource(path);",
                        "lineNumber": 1066,
                        "lineChange": "added"
                      },
                      {
                        "line": "Enumeration<LockInfo> locksList = null;",
                        "lineNumber": 1131,
                        "lineChange": "none"
                      },
                      {
                        "line": "    continue;",
                        "lineNumber": 1157,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1158,
                        "lineChange": "none"
                      },
                      {
                        "line": "if ( (currentLock.path.startsWith(lock.path)) &&",
                        "lineNumber": 1159,
                        "lineChange": "none"
                      },
                      {
                        "line": "     ((currentLock.isExclusive()) ||",
                        "lineNumber": 1160,
                        "lineChange": "none"
                      },
                      {
                        "line": "      (lock.isExclusive())) ) {",
                        "lineNumber": 1161,
                        "lineChange": "none"
                      },
                      {
                        "line": "    continue;",
                        "lineNumber": 1171,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1172,
                        "lineChange": "none"
                      },
                      {
                        "line": "if ( (currentLock.path.startsWith(lock.path)) &&",
                        "lineNumber": 1173,
                        "lineChange": "none"
                      },
                      {
                        "line": "     ((currentLock.isExclusive()) ||",
                        "lineNumber": 1174,
                        "lineChange": "none"
                      },
                      {
                        "line": "      (lock.isExclusive())) ) {",
                        "lineNumber": 1175,
                        "lineChange": "none"
                      },
                      {
                        "line": "LockInfo currentLock = locksList.nextElement();",
                        "lineNumber": 1234,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (currentLock.path.equals(lock.path)) {",
                        "lineNumber": 1235,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (currentLock.isExclusive()) {",
                        "lineNumber": 1237,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Retrieving an already existing lock on that resource",
                        "lineNumber": 1264,
                        "lineChange": "none"
                      },
                      {
                        "line": "LockInfo presentLock = resourceLocks.get(lock.path);",
                        "lineNumber": 1265,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (presentLock != null) {",
                        "lineNumber": 1266,
                        "lineChange": "none"
                      },
                      {
                        "line": "lock.tokens.addElement(lockToken);",
                        "lineNumber": 1280,
                        "lineChange": "none"
                      },
                      {
                        "line": "resourceLocks.put(lock.path, lock);",
                        "lineNumber": 1281,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Checking if a resource exists at this path",
                        "lineNumber": 1283,
                        "lineChange": "none"
                      },
                      {
                        "line": "exists = true;",
                        "lineNumber": 1284,
                        "lineChange": "removed"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 1285,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    object = resources.lookup(path);",
                        "lineNumber": 1286,
                        "lineChange": "removed"
                      },
                      {
                        "line": "} catch (NamingException e) {",
                        "lineNumber": 1287,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    exists = false;",
                        "lineNumber": 1288,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    // \"Creating\" a lock-null resource",
                        "lineNumber": 1292,
                        "lineChange": "none"
                      },
                      {
                        "line": "    int slash = lock.path.lastIndexOf('/');",
                        "lineNumber": 1293,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String parentPath = lock.path.substring(0, slash);",
                        "lineNumber": 1294,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Vector<String> lockNulls =",
                        "lineNumber": 1296,
                        "lineChange": "none"
                      },
                      {
                        "line": "        lockNullResources.get(parentPath);",
                        "lineNumber": 1297,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (lockNulls == null) {",
                        "lineNumber": 1298,
                        "lineChange": "none"
                      },
                      {
                        "line": "        lockNulls = new Vector<>();",
                        "lineNumber": 1299,
                        "lineChange": "none"
                      },
                      {
                        "line": "        lockNullResources.put(parentPath, lockNulls);",
                        "lineNumber": 1300,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 1301,
                        "lineChange": "none"
                      },
                      {
                        "line": "    lockNulls.addElement(lock.path);",
                        "lineNumber": 1303,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1305,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Checking resource locks",
                        "lineNumber": 1322,
                        "lineChange": "none"
                      },
                      {
                        "line": "LockInfo toRenew = resourceLocks.get(path);",
                        "lineNumber": 1324,
                        "lineChange": "none"
                      },
                      {
                        "line": "Enumeration<String> tokenList = null;",
                        "lineNumber": 1325,
                        "lineChange": "none"
                      },
                      {
                        "line": "while (collectionLocksList.hasMoreElements()) {",
                        "lineNumber": 1343,
                        "lineChange": "none"
                      },
                      {
                        "line": "    toRenew = collectionLocksList.nextElement();",
                        "lineNumber": 1344,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (path.equals(toRenew.path)) {",
                        "lineNumber": 1345,
                        "lineChange": "none"
                      },
                      {
                        "line": "        tokenList = toRenew.tokens.elements();",
                        "lineNumber": 1347,
                        "lineChange": "none"
                      },
                      {
                        "line": " * UNLOCK Method.",
                        "lineNumber": 1386,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 1387,
                        "lineChange": "none"
                      },
                      {
                        "line": "protected void doUnlock(HttpServletRequest req, HttpServletResponse resp)",
                        "lineNumber": 1388,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throws IOException {",
                        "lineNumber": 1389,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1394,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (isLocked(req)) {",
                        "lineNumber": 1396,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resp.sendError(WebdavStatus.SC_LOCKED);",
                        "lineNumber": 1397,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return;",
                        "lineNumber": 1398,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1399,
                        "lineChange": "none"
                      },
                      {
                        "line": "String path = getRelativePath(req);",
                        "lineNumber": 1401,
                        "lineChange": "none"
                      },
                      {
                        "line": "String lockTokenHeader = req.getHeader(\"Lock-Token\");",
                        "lineNumber": 1403,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Checking resource locks",
                        "lineNumber": 1407,
                        "lineChange": "none"
                      },
                      {
                        "line": "LockInfo lock = resourceLocks.get(path);",
                        "lineNumber": 1409,
                        "lineChange": "none"
                      },
                      {
                        "line": "Enumeration<String> tokenList = null;",
                        "lineNumber": 1410,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (lock != null) {",
                        "lineNumber": 1411,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (lock.tokens.isEmpty()) {",
                        "lineNumber": 1423,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resourceLocks.remove(path);",
                        "lineNumber": 1424,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Removing any lock-null resource which would be present",
                        "lineNumber": 1425,
                        "lineChange": "none"
                      },
                      {
                        "line": "    lockNullResources.remove(path);",
                        "lineNumber": 1426,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1427,
                        "lineChange": "none"
                      },
                      {
                        "line": "while (collectionLocksList.hasMoreElements()) {",
                        "lineNumber": 1434,
                        "lineChange": "none"
                      },
                      {
                        "line": "    lock = collectionLocksList.nextElement();",
                        "lineNumber": 1435,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (path.equals(lock.path)) {",
                        "lineNumber": 1436,
                        "lineChange": "none"
                      },
                      {
                        "line": "        tokenList = lock.tokens.elements();",
                        "lineNumber": 1438,
                        "lineChange": "none"
                      },
                      {
                        "line": "    collectionLocks.removeElement(lock);",
                        "lineNumber": 1448,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Removing any lock-null resource which would be present",
                        "lineNumber": 1449,
                        "lineChange": "none"
                      },
                      {
                        "line": "    lockNullResources.remove(path);",
                        "lineNumber": 1450,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1451,
                        "lineChange": "none"
                      },
                      {
                        "line": " * are present on the resource).",
                        "lineNumber": 1470,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 1471,
                        "lineChange": "none"
                      },
                      {
                        "line": "private boolean isLocked(HttpServletRequest req) {",
                        "lineNumber": 1472,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String path = getRelativePath(req);",
                        "lineNumber": 1474,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String ifHeader = req.getHeader(\"If\");",
                        "lineNumber": 1476,
                        "lineChange": "none"
                      },
                      {
                        "line": "        lockTokenHeader = \"\";",
                        "lineNumber": 1482,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return isLocked(path, ifHeader + lockTokenHeader);",
                        "lineNumber": 1484,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1486,
                        "lineChange": "none"
                      },
                      {
                        "line": " * are present on the resource).",
                        "lineNumber": 1496,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 1497,
                        "lineChange": "none"
                      },
                      {
                        "line": "private boolean isLocked(String path, String ifHeader) {",
                        "lineNumber": 1498,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Checking resource locks",
                        "lineNumber": 1500,
                        "lineChange": "none"
                      },
                      {
                        "line": "    LockInfo lock = resourceLocks.get(path);",
                        "lineNumber": 1502,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Enumeration<String> tokenList = null;",
                        "lineNumber": 1503,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if ((lock != null) && (lock.hasExpired())) {",
                        "lineNumber": 1504,
                        "lineChange": "none"
                      },
                      {
                        "line": "        resourceLocks.remove(path);",
                        "lineNumber": 1505,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else if (lock != null) {",
                        "lineNumber": 1506,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (lock.hasExpired()) {",
                        "lineNumber": 1527,
                        "lineChange": "none"
                      },
                      {
                        "line": "    collectionLocks.removeElement(lock);",
                        "lineNumber": 1528,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else if (path.startsWith(lock.path)) {",
                        "lineNumber": 1529,
                        "lineChange": "none"
                      },
                      {
                        "line": "    tokenList = lock.tokens.elements();",
                        "lineNumber": 1531,
                        "lineChange": "none"
                      },
                      {
                        "line": " * @return boolean true if the copy is successful",
                        "lineNumber": 1554,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 1555,
                        "lineChange": "none"
                      },
                      {
                        "line": "private boolean copyResource(HttpServletRequest req,",
                        "lineNumber": 1556,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             HttpServletResponse resp)",
                        "lineNumber": 1557,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throws IOException {",
                        "lineNumber": 1558,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Parsing destination header",
                        "lineNumber": 1560,
                        "lineChange": "none"
                      },
                      {
                        "line": "String destinationPath = req.getHeader(\"Destination\");",
                        "lineNumber": 1562,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (destinationPath == null) {",
                        "lineNumber": 1564,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resp.sendError(WebdavStatus.SC_BAD_REQUEST);",
                        "lineNumber": 1565,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return false;",
                        "lineNumber": 1566,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Remove url encoding from destination",
                        "lineNumber": 1569,
                        "lineChange": "none"
                      },
                      {
                        "line": "destinationPath = org.apache.catalina.util.RequestUtil.URLDecode(",
                        "lineNumber": 1570,
                        "lineChange": "none"
                      },
                      {
                        "line": "        destinationPath, \"UTF8\");",
                        "lineNumber": 1571,
                        "lineChange": "none"
                      },
                      {
                        "line": "int protocolIndex = destinationPath.indexOf(\"://\");",
                        "lineNumber": 1573,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (protocolIndex >= 0) {",
                        "lineNumber": 1574,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // if the Destination URL contains the protocol, we can safely",
                        "lineNumber": 1575,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // trim everything upto the first \"/\" character after \"://\"",
                        "lineNumber": 1576,
                        "lineChange": "none"
                      },
                      {
                        "line": "    int firstSeparator =",
                        "lineNumber": 1577,
                        "lineChange": "none"
                      },
                      {
                        "line": "        destinationPath.indexOf(\"/\", protocolIndex + 4);",
                        "lineNumber": 1578,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (firstSeparator < 0) {",
                        "lineNumber": 1579,
                        "lineChange": "none"
                      },
                      {
                        "line": "        destinationPath = \"/\";",
                        "lineNumber": 1580,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {",
                        "lineNumber": 1581,
                        "lineChange": "none"
                      },
                      {
                        "line": "        destinationPath = destinationPath.substring(firstSeparator);",
                        "lineNumber": 1582,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 1583,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 1584,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String hostName = req.getServerName();",
                        "lineNumber": 1585,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if ((hostName != null) && (destinationPath.startsWith(hostName))) {",
                        "lineNumber": 1586,
                        "lineChange": "none"
                      },
                      {
                        "line": "        destinationPath = destinationPath.substring(hostName.length());",
                        "lineNumber": 1587,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 1588,
                        "lineChange": "none"
                      },
                      {
                        "line": "    int portIndex = destinationPath.indexOf(\":\");",
                        "lineNumber": 1590,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (portIndex >= 0) {",
                        "lineNumber": 1591,
                        "lineChange": "none"
                      },
                      {
                        "line": "        destinationPath = destinationPath.substring(portIndex);",
                        "lineNumber": 1592,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 1593,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (destinationPath.startsWith(\":\")) {",
                        "lineNumber": 1595,
                        "lineChange": "none"
                      },
                      {
                        "line": "        int firstSeparator = destinationPath.indexOf(\"/\");",
                        "lineNumber": 1596,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (firstSeparator < 0) {",
                        "lineNumber": 1597,
                        "lineChange": "none"
                      },
                      {
                        "line": "            destinationPath = \"/\";",
                        "lineNumber": 1598,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } else {",
                        "lineNumber": 1599,
                        "lineChange": "none"
                      },
                      {
                        "line": "            destinationPath =",
                        "lineNumber": 1600,
                        "lineChange": "none"
                      },
                      {
                        "line": "                destinationPath.substring(firstSeparator);",
                        "lineNumber": 1601,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }",
                        "lineNumber": 1602,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 1603,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Normalise destination path (remove '.' and '..')",
                        "lineNumber": 1606,
                        "lineChange": "none"
                      },
                      {
                        "line": "destinationPath = RequestUtil.normalize(destinationPath);",
                        "lineNumber": 1607,
                        "lineChange": "none"
                      },
                      {
                        "line": "String contextPath = req.getContextPath();",
                        "lineNumber": 1609,
                        "lineChange": "none"
                      },
                      {
                        "line": "if ((contextPath != null) &&",
                        "lineNumber": 1610,
                        "lineChange": "none"
                      },
                      {
                        "line": "    (destinationPath.startsWith(contextPath))) {",
                        "lineNumber": 1611,
                        "lineChange": "none"
                      },
                      {
                        "line": "    destinationPath = destinationPath.substring(contextPath.length());",
                        "lineNumber": 1612,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1613,
                        "lineChange": "none"
                      },
                      {
                        "line": "String pathInfo = req.getPathInfo();",
                        "lineNumber": 1615,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (pathInfo != null) {",
                        "lineNumber": 1616,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String servletPath = req.getServletPath();",
                        "lineNumber": 1617,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if ((servletPath != null) &&",
                        "lineNumber": 1618,
                        "lineChange": "none"
                      },
                      {
                        "line": "        (destinationPath.startsWith(servletPath))) {",
                        "lineNumber": 1619,
                        "lineChange": "none"
                      },
                      {
                        "line": "        destinationPath = destinationPath",
                        "lineNumber": 1620,
                        "lineChange": "none"
                      },
                      {
                        "line": "            .substring(servletPath.length());",
                        "lineNumber": 1621,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 1622,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1623,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (debug > 0)",
                        "lineNumber": 1625,
                        "lineChange": "none"
                      },
                      {
                        "line": "    log(\"Dest path :\" + destinationPath);",
                        "lineNumber": 1626,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Check destination path to protect special subdirectories",
                        "lineNumber": 1628,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (isSpecialPath(destinationPath)) {",
                        "lineNumber": 1629,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resp.sendError(WebdavStatus.SC_FORBIDDEN);",
                        "lineNumber": 1630,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return false;",
                        "lineNumber": 1631,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1632,
                        "lineChange": "none"
                      },
                      {
                        "line": "String path = getRelativePath(req);",
                        "lineNumber": 1634,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (destinationPath.equals(path)) {",
                        "lineNumber": 1636,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resp.sendError(WebdavStatus.SC_FORBIDDEN);",
                        "lineNumber": 1637,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return false;",
                        "lineNumber": 1638,
                        "lineChange": "none"
                      },
                      {
                        "line": "boolean overwrite = true;",
                        "lineNumber": 1643,
                        "lineChange": "none"
                      },
                      {
                        "line": "String overwriteHeader = req.getHeader(\"Overwrite\");",
                        "lineNumber": 1644,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (overwriteHeader != null) {",
                        "lineNumber": 1646,
                        "lineChange": "none"
                      },
                      {
                        "line": " // Overwriting the destination",
                        "lineNumber": 1654,
                        "lineChange": "none"
                      },
                      {
                        "line": "boolean exists = true;",
                        "lineNumber": 1656,
                        "lineChange": "removed"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 1657,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    resources.lookup(destinationPath);",
                        "lineNumber": 1658,
                        "lineChange": "removed"
                      },
                      {
                        "line": "} catch (NamingException e) {",
                        "lineNumber": 1659,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    exists = false;",
                        "lineNumber": 1660,
                        "lineChange": "removed"
                      },
                      {
                        "line": "WebResource destination = resources.getResource(destinationPath);",
                        "lineNumber": 1586,
                        "lineChange": "added"
                      },
                      {
                        "line": "if (overwrite) {",
                        "lineNumber": 1663,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Delete destination resource, if it exists",
                        "lineNumber": 1665,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (exists) {",
                        "lineNumber": 1666,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if (destination.exists()) {",
                        "lineNumber": 1590,
                        "lineChange": "added"
                      },
                      {
                        "line": "    if (!deleteResource(destinationPath, req, resp, true)) {",
                        "lineNumber": 1667,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return false;",
                        "lineNumber": 1668,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 1669,
                        "lineChange": "none"
                      },
                      {
                        "line": " Hashtable<String,Integer> errorList = new Hashtable<>();",
                        "lineNumber": 1686,
                        "lineChange": "none"
                      },
                      {
                        "line": "boolean result = copyResource(resources, errorList,",
                        "lineNumber": 1688,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                              path, destinationPath);",
                        "lineNumber": 1689,
                        "lineChange": "removed"
                      },
                      {
                        "line": "boolean result = copyResource(errorList, path, destinationPath);",
                        "lineNumber": 1609,
                        "lineChange": "added"
                      },
                      {
                        "line": "if ((!result) || (!errorList.isEmpty())) {",
                        "lineNumber": 1691,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resp.sendError(errorList.elements().nextElement().intValue());",
                        "lineNumber": 1693,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 1694,
                        "lineChange": "none"
                      },
                      {
                        "line": "    sendReport(req, resp, errorList);",
                        "lineNumber": 1695,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1696,
                        "lineChange": "none"
                      },
                      {
                        "line": "return false;",
                        "lineNumber": 1697,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Removing any lock-null resource which would be present at",
                        "lineNumber": 1707,
                        "lineChange": "none"
                      },
                      {
                        "line": "// the destination path",
                        "lineNumber": 1708,
                        "lineChange": "none"
                      },
                      {
                        "line": "lockNullResources.remove(destinationPath);",
                        "lineNumber": 1709,
                        "lineChange": "none"
                      },
                      {
                        "line": "return true;",
                        "lineNumber": 1711,
                        "lineChange": "none"
                      },
                      {
                        "line": " * @param dest Destination path",
                        "lineNumber": 1723,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 1724,
                        "lineChange": "none"
                      },
                      {
                        "line": "private boolean copyResource(DirContext dirContext,",
                        "lineNumber": 1725,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        Hashtable<String,Integer> errorList, String source, String dest) {",
                        "lineNumber": 1726,
                        "lineChange": "removed"
                      },
                      {
                        "line": "private boolean copyResource(Hashtable<String,Integer> errorList,",
                        "lineNumber": 1643,
                        "lineChange": "added"
                      },
                      {
                        "line": "        String source, String dest) {",
                        "lineNumber": 1644,
                        "lineChange": "added"
                      },
                      {
                        "line": "    if (debug > 1)",
                        "lineNumber": 1728,
                        "lineChange": "none"
                      },
                      {
                        "line": "        log(\"Copy: \" + source + \" To: \" + dest);",
                        "lineNumber": 1729,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Object object = null;",
                        "lineNumber": 1731,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    try {",
                        "lineNumber": 1732,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        object = dirContext.lookup(source);",
                        "lineNumber": 1733,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    } catch (NamingException e) {",
                        "lineNumber": 1734,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        // Ignore",
                        "lineNumber": 1735,
                        "lineChange": "removed"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 1740,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    dirContext.createSubcontext(dest);",
                        "lineNumber": 1741,
                        "lineChange": "removed"
                      },
                      {
                        "line": "} catch (NamingException e) {",
                        "lineNumber": 1742,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    errorList.put",
                        "lineNumber": 1743,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        (dest, new Integer(WebdavStatus.SC_CONFLICT));",
                        "lineNumber": 1744,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    return false;",
                        "lineNumber": 1745,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1746,
                        "lineChange": "removed"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 1748,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    NamingEnumeration<NameClassPair> enumeration =",
                        "lineNumber": 1749,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        dirContext.list(source);",
                        "lineNumber": 1750,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    while (enumeration.hasMoreElements()) {",
                        "lineNumber": 1751,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        NameClassPair ncPair = enumeration.nextElement();",
                        "lineNumber": 1752,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        String childDest = dest;",
                        "lineNumber": 1753,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        if (!childDest.equals(\"/\"))",
                        "lineNumber": 1754,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            childDest += \"/\";",
                        "lineNumber": 1755,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        childDest += ncPair.getName();",
                        "lineNumber": 1756,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        String childSrc = source;",
                        "lineNumber": 1757,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        if (!childSrc.equals(\"/\"))",
                        "lineNumber": 1758,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            childSrc += \"/\";",
                        "lineNumber": 1759,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        childSrc += ncPair.getName();",
                        "lineNumber": 1760,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        copyResource(dirContext, errorList, childSrc, childDest);",
                        "lineNumber": 1761,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if (sourceResource.isDirectory()) {",
                        "lineNumber": 1651,
                        "lineChange": "added"
                      },
                      {
                        "line": "    if (!resources.mkdir(dest)) {",
                        "lineNumber": 1652,
                        "lineChange": "added"
                      },
                      {
                        "line": "        WebResource destResource = resources.getResource(dest);",
                        "lineNumber": 1653,
                        "lineChange": "added"
                      },
                      {
                        "line": "        if (!destResource.isDirectory()) {",
                        "lineNumber": 1654,
                        "lineChange": "added"
                      },
                      {
                        "line": "            errorList.put(dest, new Integer(WebdavStatus.SC_CONFLICT));",
                        "lineNumber": 1655,
                        "lineChange": "added"
                      },
                      {
                        "line": "            return false;",
                        "lineNumber": 1656,
                        "lineChange": "added"
                      },
                      {
                        "line": "        }",
                        "lineNumber": 1762,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } catch (NamingException e) {",
                        "lineNumber": 1763,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        errorList.put",
                        "lineNumber": 1764,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            (dest, new Integer(WebdavStatus.SC_INTERNAL_SERVER_ERROR));",
                        "lineNumber": 1765,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        return false;",
                        "lineNumber": 1766,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 1767,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (object instanceof Resource) {",
                        "lineNumber": 1771,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    try {",
                        "lineNumber": 1772,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        dirContext.bind(dest, object);",
                        "lineNumber": 1773,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    } catch (NamingException e) {",
                        "lineNumber": 1774,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        if (e.getCause() instanceof FileNotFoundException) {",
                        "lineNumber": 1775,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            // We know the source exists so it must be the",
                        "lineNumber": 1776,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            // destination dir that can't be found",
                        "lineNumber": 1777,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            errorList.put(source,",
                        "lineNumber": 1778,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                    new Integer(WebdavStatus.SC_CONFLICT));",
                        "lineNumber": 1779,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        } else {",
                        "lineNumber": 1780,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            errorList.put(source,",
                        "lineNumber": 1781,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                    new Integer(WebdavStatus.SC_INTERNAL_SERVER_ERROR));",
                        "lineNumber": 1782,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        }",
                        "lineNumber": 1783,
                        "lineChange": "removed"
                      },
                      {
                        "line": "String[] entries = resources.list(source);",
                        "lineNumber": 1660,
                        "lineChange": "added"
                      },
                      {
                        "line": "for (String entry : entries) {",
                        "lineNumber": 1661,
                        "lineChange": "added"
                      },
                      {
                        "line": "    String childDest = dest;",
                        "lineNumber": 1662,
                        "lineChange": "added"
                      },
                      {
                        "line": "    if (!childDest.equals(\"/\")) {",
                        "lineNumber": 1663,
                        "lineChange": "added"
                      },
                      {
                        "line": "        childDest += \"/\";",
                        "lineNumber": 1664,
                        "lineChange": "added"
                      },
                      {
                        "line": "         }",
                        "lineNumber": 1785,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {",
                        "lineNumber": 1786,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        errorList.put",
                        "lineNumber": 1787,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            (source,",
                        "lineNumber": 1788,
                        "lineChange": "removed"
                      },
                      {
                        "line": "             new Integer(WebdavStatus.SC_INTERNAL_SERVER_ERROR));",
                        "lineNumber": 1789,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        childDest += entry;",
                        "lineNumber": 1666,
                        "lineChange": "added"
                      },
                      {
                        "line": "        String childSrc = source;",
                        "lineNumber": 1667,
                        "lineChange": "added"
                      },
                      {
                        "line": "        if (!childSrc.equals(\"/\")) {",
                        "lineNumber": 1668,
                        "lineChange": "added"
                      },
                      {
                        "line": "            childSrc += \"/\";",
                        "lineNumber": 1669,
                        "lineChange": "added"
                      },
                      {
                        "line": "        }",
                        "lineNumber": 1670,
                        "lineChange": "added"
                      },
                      {
                        "line": "        childSrc += entry;",
                        "lineNumber": 1671,
                        "lineChange": "added"
                      },
                      {
                        "line": "        copyResource(errorList, childSrc, childDest);",
                        "lineNumber": 1672,
                        "lineChange": "added"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 1673,
                        "lineChange": "added"
                      },
                      {
                        "line": "} else if (sourceResource.isFile()) {",
                        "lineNumber": 1674,
                        "lineChange": "added"
                      },
                      {
                        "line": "    if (!resources.write(dest, sourceResource.getInputStream())) {",
                        "lineNumber": 1675,
                        "lineChange": "added"
                      },
                      {
                        "line": "        errorList.put(source,",
                        "lineNumber": 1676,
                        "lineChange": "added"
                      },
                      {
                        "line": "                new Integer(WebdavStatus.SC_INTERNAL_SERVER_ERROR));",
                        "lineNumber": 1677,
                        "lineChange": "added"
                      },
                      {
                        "line": "        return false;",
                        "lineNumber": 1790,
                        "lineChange": "none"
                      },
                      {
                        "line": "     }",
                        "lineNumber": 1791,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 1680,
                        "lineChange": "added"
                      },
                      {
                        "line": "    errorList.put(source,",
                        "lineNumber": 1681,
                        "lineChange": "added"
                      },
                      {
                        "line": "            new Integer(WebdavStatus.SC_INTERNAL_SERVER_ERROR));",
                        "lineNumber": 1682,
                        "lineChange": "added"
                      },
                      {
                        "line": "    return false;",
                        "lineNumber": 1683,
                        "lineChange": "added"
                      },
                      {
                        "line": " * @return boolean true if the copy is successful",
                        "lineNumber": 1805,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 1806,
                        "lineChange": "none"
                      },
                      {
                        "line": "private boolean deleteResource(HttpServletRequest req,",
                        "lineNumber": 1807,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               HttpServletResponse resp)",
                        "lineNumber": 1808,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throws IOException {",
                        "lineNumber": 1809,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String path = getRelativePath(req);",
                        "lineNumber": 1811,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return deleteResource(path, req, resp, true);",
                        "lineNumber": 1813,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1815,
                        "lineChange": "none"
                      },
                      {
                        "line": " *                  completion",
                        "lineNumber": 1825,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 1826,
                        "lineChange": "none"
                      },
                      {
                        "line": "private boolean deleteResource(String path, HttpServletRequest req,",
                        "lineNumber": 1827,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               HttpServletResponse resp, boolean setStatus)",
                        "lineNumber": 1828,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throws IOException {",
                        "lineNumber": 1829,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String ifHeader = req.getHeader(\"If\");",
                        "lineNumber": 1831,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (ifHeader == null)",
                        "lineNumber": 1832,
                        "lineChange": "none"
                      },
                      {
                        "line": "        ifHeader = \"\";",
                        "lineNumber": 1833,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String lockTokenHeader = req.getHeader(\"Lock-Token\");",
                        "lineNumber": 1835,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (lockTokenHeader == null)",
                        "lineNumber": 1836,
                        "lineChange": "none"
                      },
                      {
                        "line": "        lockTokenHeader = \"\";",
                        "lineNumber": 1837,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (isLocked(path, ifHeader + lockTokenHeader)) {",
                        "lineNumber": 1839,
                        "lineChange": "none"
                      },
                      {
                        "line": "        resp.sendError(WebdavStatus.SC_LOCKED);",
                        "lineNumber": 1840,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return false;",
                        "lineNumber": 1841,
                        "lineChange": "none"
                      },
                      {
                        "line": "     }",
                        "lineNumber": 1842,
                        "lineChange": "none"
                      },
                      {
                        "line": "Object object = null;",
                        "lineNumber": 1845,
                        "lineChange": "removed"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 1846,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    object = resources.lookup(path);",
                        "lineNumber": 1847,
                        "lineChange": "removed"
                      },
                      {
                        "line": "} catch (NamingException e) {",
                        "lineNumber": 1848,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    exists = false;",
                        "lineNumber": 1849,
                        "lineChange": "removed"
                      },
                      {
                        "line": "WebResource resource = resources.getResource(path);",
                        "lineNumber": 1733,
                        "lineChange": "added"
                      },
                      {
                        "line": "if (!resource.exists()) {",
                        "lineNumber": 1735,
                        "lineChange": "added"
                      },
                      {
                        "line": "if (!collection) {",
                        "lineNumber": 1859,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    try {",
                        "lineNumber": 1860,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        resources.unbind(path);",
                        "lineNumber": 1861,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    } catch (NamingException e) {",
                        "lineNumber": 1862,
                        "lineChange": "removed"
                      },
                      {
                        "line": "resp.sendError(WebdavStatus.SC_INTERNAL_SERVER_ERROR);",
                        "lineNumber": 1863,
                        "lineChange": "none"
                      },
                      {
                        "line": "Hashtable<String,Integer> errorList = new Hashtable<>();",
                        "lineNumber": 1868,
                        "lineChange": "none"
                      },
                      {
                        "line": "deleteCollection(req, resources, path, errorList);",
                        "lineNumber": 1870,
                        "lineChange": "removed"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 1871,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    resources.unbind(path);",
                        "lineNumber": 1872,
                        "lineChange": "removed"
                      },
                      {
                        "line": "} catch (NamingException e) {",
                        "lineNumber": 1873,
                        "lineChange": "removed"
                      },
                      {
                        "line": "deleteCollection(req, path, errorList);",
                        "lineNumber": 1749,
                        "lineChange": "added"
                      },
                      {
                        "line": "if (!resource.delete()) {",
                        "lineNumber": 1750,
                        "lineChange": "added"
                      },
                      {
                        "line": "    errorList.put(path, new Integer",
                        "lineNumber": 1874,
                        "lineChange": "none"
                      },
                      {
                        "line": "        (WebdavStatus.SC_INTERNAL_SERVER_ERROR));",
                        "lineNumber": 1875,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1876,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (!errorList.isEmpty()) {",
                        "lineNumber": 1878,
                        "lineChange": "none"
                      },
                      {
                        "line": "    sendReport(req, resp, errorList);",
                        "lineNumber": 1880,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return false;",
                        "lineNumber": 1881,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1883,
                        "lineChange": "none"
                      },
                      {
                        "line": " * @param errorList Contains the list of the errors which occurred",
                        "lineNumber": 1899,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 1900,
                        "lineChange": "none"
                      },
                      {
                        "line": "private void deleteCollection(HttpServletRequest req,",
                        "lineNumber": 1901,
                        "lineChange": "none"
                      },
                      {
                        "line": "                              DirContext dirContext,",
                        "lineNumber": 1902,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                              String path,",
                        "lineNumber": 1903,
                        "lineChange": "none"
                      },
                      {
                        "line": "                              Hashtable<String,Integer> errorList) {",
                        "lineNumber": 1904,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (debug > 1)",
                        "lineNumber": 1906,
                        "lineChange": "none"
                      },
                      {
                        "line": "        log(\"Delete:\" + path);",
                        "lineNumber": 1907,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Prevent deletion of special subdirectories",
                        "lineNumber": 1909,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (isSpecialPath(path)) {",
                        "lineNumber": 1910,
                        "lineChange": "none"
                      },
                      {
                        "line": "        errorList.put(path, new Integer(WebdavStatus.SC_FORBIDDEN));",
                        "lineNumber": 1911,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return;",
                        "lineNumber": 1912,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 1913,
                        "lineChange": "none"
                      },
                      {
                        "line": "     lockTokenHeader = \"\";",
                        "lineNumber": 1921,
                        "lineChange": "none"
                      },
                      {
                        "line": "Enumeration<NameClassPair> enumeration = null;",
                        "lineNumber": 1923,
                        "lineChange": "removed"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 1924,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    enumeration = dirContext.list(path);",
                        "lineNumber": 1925,
                        "lineChange": "removed"
                      },
                      {
                        "line": "} catch (NamingException e) {",
                        "lineNumber": 1926,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    errorList.put(path, new Integer",
                        "lineNumber": 1927,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        (WebdavStatus.SC_INTERNAL_SERVER_ERROR));",
                        "lineNumber": 1928,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    return;",
                        "lineNumber": 1929,
                        "lineChange": "removed"
                      },
                      {
                        "line": "String[] entries = resources.list(path);",
                        "lineNumber": 1794,
                        "lineChange": "added"
                      },
                      {
                        "line": "while (enumeration.hasMoreElements()) {",
                        "lineNumber": 1932,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    NameClassPair ncPair = enumeration.nextElement();",
                        "lineNumber": 1933,
                        "lineChange": "removed"
                      },
                      {
                        "line": "for (String entry : entries) {",
                        "lineNumber": 1796,
                        "lineChange": "added"
                      },
                      {
                        "line": "    String childName = path;",
                        "lineNumber": 1934,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!childName.equals(\"/\"))",
                        "lineNumber": 1935,
                        "lineChange": "none"
                      },
                      {
                        "line": "        childName += \"/\";",
                        "lineNumber": 1936,
                        "lineChange": "none"
                      },
                      {
                        "line": "    childName += ncPair.getName();",
                        "lineNumber": 1937,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    childName += entry;",
                        "lineNumber": 1800,
                        "lineChange": "added"
                      },
                      {
                        "line": "    if (isLocked(childName, ifHeader + lockTokenHeader)) {",
                        "lineNumber": 1939,
                        "lineChange": "none"
                      },
                      {
                        "line": "        errorList.put(childName, new Integer(WebdavStatus.SC_LOCKED));",
                        "lineNumber": 1941,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {",
                        "lineNumber": 1943,
                        "lineChange": "none"
                      },
                      {
                        "line": "        WebResource childResource = resources.getResource(childName);",
                        "lineNumber": 1807,
                        "lineChange": "added"
                      },
                      {
                        "line": "        if (childResource.isDirectory()) {",
                        "lineNumber": 1808,
                        "lineChange": "added"
                      },
                      {
                        "line": "            deleteCollection(req, childName, errorList);",
                        "lineNumber": 1809,
                        "lineChange": "added"
                      },
                      {
                        "line": "        }",
                        "lineNumber": 1810,
                        "lineChange": "added"
                      },
                      {
                        "line": "        try {",
                        "lineNumber": 1945,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            Object object = dirContext.lookup(childName);",
                        "lineNumber": 1946,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            if (object instanceof DirContext) {",
                        "lineNumber": 1947,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                deleteCollection(req, dirContext, childName, errorList);",
                        "lineNumber": 1948,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            }",
                        "lineNumber": 1949,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            try {",
                        "lineNumber": 1951,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                dirContext.unbind(childName);",
                        "lineNumber": 1952,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            } catch (NamingException e) {",
                        "lineNumber": 1953,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                if (!(object instanceof DirContext)) {",
                        "lineNumber": 1954,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    // error",
                        "lineNumber": 1956,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    errorList.put",
                        "lineNumber": 1957,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        (childName, new Integer",
                        "lineNumber": 1958,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            (WebdavStatus.SC_INTERNAL_SERVER_ERROR));",
                        "lineNumber": 1959,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1960,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        // If it's not a collection, then it's an unknown",
                        "lineNumber": 1814,
                        "lineChange": "added"
                      },
                      {
                        "line": "        // error",
                        "lineNumber": 1815,
                        "lineChange": "added"
                      },
                      {
                        "line": "        errorList.put(childName, new Integer(",
                        "lineNumber": 1816,
                        "lineChange": "added"
                      },
                      {
                        "line": "                WebdavStatus.SC_INTERNAL_SERVER_ERROR));",
                        "lineNumber": 1817,
                        "lineChange": "added"
                      },
                      {
                        "line": "     }",
                        "lineNumber": 1961,
                        "lineChange": "none"
                      },
                      {
                        "line": "} catch (NamingException e) {",
                        "lineNumber": 1962,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    errorList.put",
                        "lineNumber": 1963,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        (childName, new Integer",
                        "lineNumber": 1964,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            (WebdavStatus.SC_INTERNAL_SERVER_ERROR));",
                        "lineNumber": 1965,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1966,
                        "lineChange": "none"
                      },
                      {
                        "line": " * @param errorList List of error to be displayed",
                        "lineNumber": 1980,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 1981,
                        "lineChange": "none"
                      },
                      {
                        "line": "private void sendReport(HttpServletRequest req, HttpServletResponse resp,",
                        "lineNumber": 1982,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        Hashtable<String,Integer> errorList)",
                        "lineNumber": 1983,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throws IOException {",
                        "lineNumber": 1984,
                        "lineChange": "none"
                      },
                      {
                        "line": "resp.setStatus(WebdavStatus.SC_MULTI_STATUS);",
                        "lineNumber": 1986,
                        "lineChange": "none"
                      },
                      {
                        "line": "String absoluteUri = req.getRequestURI();",
                        "lineNumber": 1988,
                        "lineChange": "none"
                      },
                      {
                        "line": "String relativePath = getRelativePath(req);",
                        "lineNumber": 1989,
                        "lineChange": "none"
                      },
                      {
                        "line": "XMLWriter generatedXML = new XMLWriter();",
                        "lineNumber": 1991,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeElement(\"D\", \"href\", XMLWriter.OPENING);",
                        "lineNumber": 2005,
                        "lineChange": "none"
                      },
                      {
                        "line": "String toAppend = errorPath.substring(relativePath.length());",
                        "lineNumber": 2006,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (!toAppend.startsWith(\"/\"))",
                        "lineNumber": 2007,
                        "lineChange": "none"
                      },
                      {
                        "line": "    toAppend = \"/\" + toAppend;",
                        "lineNumber": 2008,
                        "lineChange": "none"
                      },
                      {
                        "line": " * name, then this Vector contains those properties",
                        "lineNumber": 2038,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 2039,
                        "lineChange": "none"
                      },
                      {
                        "line": "private void parseProperties(HttpServletRequest req,",
                        "lineNumber": 2040,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             XMLWriter generatedXML,",
                        "lineNumber": 2041,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             String path, int type,",
                        "lineNumber": 2042,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             Vector<String> propertiesVector) {",
                        "lineNumber": 2043,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Exclude any resource in the /WEB-INF and /META-INF subdirectories",
                        "lineNumber": 2045,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (isSpecialPath(path))",
                        "lineNumber": 2046,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return;",
                        "lineNumber": 2047,
                        "lineChange": "none"
                      },
                      {
                        "line": "    CacheEntry cacheEntry = resources.lookupCache(path);",
                        "lineNumber": 2049,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    if (!cacheEntry.exists) {",
                        "lineNumber": 2050,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    WebResource resource = resources.getResource(path);",
                        "lineNumber": 1900,
                        "lineChange": "added"
                      },
                      {
                        "line": "    if (!resource.exists()) {",
                        "lineNumber": 1901,
                        "lineChange": "added"
                      },
                      {
                        "line": "        // File is in directory listing but doesn't appear to exist",
                        "lineNumber": 2051,
                        "lineChange": "none"
                      },
                      {
                        "line": "         // Broken symlink or odd permission settings?",
                        "lineNumber": 2052,
                        "lineChange": "none"
                      },
                      {
                        "line": "String href = req.getContextPath() + req.getServletPath();",
                        "lineNumber": 2063,
                        "lineChange": "none"
                      },
                      {
                        "line": "if ((href.endsWith(\"/\")) && (path.startsWith(\"/\")))",
                        "lineNumber": 2064,
                        "lineChange": "none"
                      },
                      {
                        "line": "    href += path.substring(1);",
                        "lineNumber": 2065,
                        "lineChange": "none"
                      },
                      {
                        "line": "else",
                        "lineNumber": 2066,
                        "lineChange": "none"
                      },
                      {
                        "line": "    href += path;",
                        "lineNumber": 2067,
                        "lineChange": "none"
                      },
                      {
                        "line": "if ((cacheEntry.context != null) && (!href.endsWith(\"/\")))",
                        "lineNumber": 2068,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if (resource.isDirectory() && (!href.endsWith(\"/\")))",
                        "lineNumber": 1919,
                        "lineChange": "added"
                      },
                      {
                        "line": "    href += \"/\";",
                        "lineNumber": 2069,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeElement(\"D\", \"href\", XMLWriter.CLOSING);",
                        "lineNumber": 2073,
                        "lineChange": "none"
                      },
                      {
                        "line": "String resourceName = path;",
                        "lineNumber": 2075,
                        "lineChange": "none"
                      },
                      {
                        "line": "int lastSlash = path.lastIndexOf('/');",
                        "lineNumber": 2076,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (lastSlash != -1)",
                        "lineNumber": 2077,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resourceName = resourceName.substring(lastSlash + 1);",
                        "lineNumber": 2078,
                        "lineChange": "none"
                      },
                      {
                        "line": "switch (type) {",
                        "lineNumber": 2080,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeElement(\"D\", \"displayname\", XMLWriter.OPENING);",
                        "lineNumber": 2089,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeData(resourceName);",
                        "lineNumber": 2090,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeElement(\"D\", \"displayname\", XMLWriter.CLOSING);",
                        "lineNumber": 2091,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeElement(\"D\", \"supportedlock\", XMLWriter.CLOSING);",
                        "lineNumber": 2129,
                        "lineChange": "none"
                      },
                      {
                        "line": "generateLockDiscovery(path, generatedXML);",
                        "lineNumber": 2131,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeElement(\"D\", \"prop\", XMLWriter.CLOSING);",
                        "lineNumber": 2133,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeElement",
                        "lineNumber": 2194,
                        "lineChange": "none"
                      },
                      {
                        "line": "    (\"D\", \"displayname\", XMLWriter.OPENING);",
                        "lineNumber": 2195,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeData(resourceName);",
                        "lineNumber": 2196,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeElement",
                        "lineNumber": 2197,
                        "lineChange": "none"
                      },
                      {
                        "line": "    (\"D\", \"displayname\", XMLWriter.CLOSING);",
                        "lineNumber": 2198,
                        "lineChange": "none"
                      },
                      {
                        "line": "            XMLWriter.CLOSING);",
                        "lineNumber": 2264,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else if (property.equals(\"lockdiscovery\")) {",
                        "lineNumber": 2265,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!generateLockDiscovery(path, generatedXML))",
                        "lineNumber": 2266,
                        "lineChange": "none"
                      },
                      {
                        "line": "        propertiesNotFound.addElement(property);",
                        "lineNumber": 2267,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 2268,
                        "lineChange": "none"
                      },
                      {
                        "line": " * name, then this Vector contains those properties",
                        "lineNumber": 2322,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 2323,
                        "lineChange": "none"
                      },
                      {
                        "line": "private void parseLockNullProperties(HttpServletRequest req,",
                        "lineNumber": 2324,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                     XMLWriter generatedXML,",
                        "lineNumber": 2325,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                     String path, int type,",
                        "lineNumber": 2326,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                     Vector<String> propertiesVector) {",
                        "lineNumber": 2327,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Exclude any resource in the /WEB-INF and /META-INF subdirectories",
                        "lineNumber": 2329,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (isSpecialPath(path))",
                        "lineNumber": 2330,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return;",
                        "lineNumber": 2331,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Retrieving the lock associated with the lock-null resource",
                        "lineNumber": 2333,
                        "lineChange": "none"
                      },
                      {
                        "line": "    LockInfo lock = resourceLocks.get(path);",
                        "lineNumber": 2334,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (lock == null)",
                        "lineNumber": 2336,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeElement(\"D\", \"href\", XMLWriter.OPENING);",
                        "lineNumber": 2344,
                        "lineChange": "none"
                      },
                      {
                        "line": "String absoluteUri = req.getRequestURI();",
                        "lineNumber": 2346,
                        "lineChange": "none"
                      },
                      {
                        "line": "String relativePath = getRelativePath(req);",
                        "lineNumber": 2347,
                        "lineChange": "none"
                      },
                      {
                        "line": "String toAppend = path.substring(relativePath.length());",
                        "lineNumber": 2348,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (!toAppend.startsWith(\"/\"))",
                        "lineNumber": 2349,
                        "lineChange": "none"
                      },
                      {
                        "line": "    toAppend = \"/\" + toAppend;",
                        "lineNumber": 2350,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeElement(\"D\", \"href\", XMLWriter.CLOSING);",
                        "lineNumber": 2355,
                        "lineChange": "none"
                      },
                      {
                        "line": "String resourceName = path;",
                        "lineNumber": 2357,
                        "lineChange": "none"
                      },
                      {
                        "line": "int lastSlash = path.lastIndexOf('/');",
                        "lineNumber": 2358,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (lastSlash != -1)",
                        "lineNumber": 2359,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resourceName = resourceName.substring(lastSlash + 1);",
                        "lineNumber": 2360,
                        "lineChange": "none"
                      },
                      {
                        "line": "switch (type) {",
                        "lineNumber": 2362,
                        "lineChange": "none"
                      },
                      {
                        "line": "        getISOCreationDate(lock.creationDate.getTime()));",
                        "lineNumber": 2370,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeElement(\"D\", \"displayname\", XMLWriter.OPENING);",
                        "lineNumber": 2371,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeData(resourceName);",
                        "lineNumber": 2372,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeElement(\"D\", \"displayname\", XMLWriter.CLOSING);",
                        "lineNumber": 2373,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeProperty(\"D\", \"getlastmodified\",",
                        "lineNumber": 2374,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeElement(\"D\", \"supportedlock\", XMLWriter.CLOSING);",
                        "lineNumber": 2396,
                        "lineChange": "none"
                      },
                      {
                        "line": "generateLockDiscovery(path, generatedXML);",
                        "lineNumber": 2398,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeElement(\"D\", \"prop\", XMLWriter.CLOSING);",
                        "lineNumber": 2400,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeElement(\"D\", \"displayname\",",
                        "lineNumber": 2458,
                        "lineChange": "none"
                      },
                      {
                        "line": "        XMLWriter.OPENING);",
                        "lineNumber": 2459,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeData(resourceName);",
                        "lineNumber": 2460,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeElement(\"D\", \"displayname\",",
                        "lineNumber": 2461,
                        "lineChange": "none"
                      },
                      {
                        "line": "        XMLWriter.CLOSING);",
                        "lineNumber": 2462,
                        "lineChange": "none"
                      },
                      {
                        "line": "            XMLWriter.CLOSING);",
                        "lineNumber": 2499,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else if (property.equals(\"lockdiscovery\")) {",
                        "lineNumber": 2500,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!generateLockDiscovery(path, generatedXML))",
                        "lineNumber": 2501,
                        "lineChange": "none"
                      },
                      {
                        "line": "        propertiesNotFound.addElement(property);",
                        "lineNumber": 2502,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 2503,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 2554,
                        "lineChange": "none"
                      },
                      {
                        "line": "private boolean generateLockDiscovery",
                        "lineNumber": 2555,
                        "lineChange": "none"
                      },
                      {
                        "line": "    (String path, XMLWriter generatedXML) {",
                        "lineNumber": 2556,
                        "lineChange": "none"
                      },
                      {
                        "line": "    LockInfo resourceLock = resourceLocks.get(path);",
                        "lineNumber": 2558,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Enumeration<LockInfo> collectionLocksList = collectionLocks.elements();",
                        "lineNumber": 2559,
                        "lineChange": "none"
                      },
                      {
                        "line": "while (collectionLocksList.hasMoreElements()) {",
                        "lineNumber": 2569,
                        "lineChange": "none"
                      },
                      {
                        "line": "    LockInfo currentLock = collectionLocksList.nextElement();",
                        "lineNumber": 2570,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (path.startsWith(currentLock.path)) {",
                        "lineNumber": 2571,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (!wroteStart) {",
                        "lineNumber": 2572,
                        "lineChange": "none"
                      },
                      {
                        "line": "            wroteStart = true;",
                        "lineNumber": 2573,
                        "lineChange": "none"
                      },
                      {
                        "line": " *",
                        "lineNumber": 2601,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 2602,
                        "lineChange": "none"
                      },
                      {
                        "line": "private StringBuilder determineMethodsAllowed(DirContext dirContext,",
                        "lineNumber": 2603,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                                             HttpServletRequest req) {",
                        "lineNumber": 2604,
                        "lineChange": "removed"
                      },
                      {
                        "line": "private StringBuilder determineMethodsAllowed(HttpServletRequest req) {",
                        "lineNumber": 2453,
                        "lineChange": "added"
                      },
                      {
                        "line": "    StringBuilder methodsAllowed = new StringBuilder();",
                        "lineNumber": 2606,
                        "lineChange": "none"
                      },
                      {
                        "line": "Object object = null;",
                        "lineNumber": 2608,
                        "lineChange": "removed"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 2609,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    String path = getRelativePath(req);",
                        "lineNumber": 2610,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    object = dirContext.lookup(path);",
                        "lineNumber": 2612,
                        "lineChange": "removed"
                      },
                      {
                        "line": "} catch (NamingException e) {",
                        "lineNumber": 2613,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    exists = false;",
                        "lineNumber": 2614,
                        "lineChange": "removed"
                      },
                      {
                        "line": "WebResource resource = resources.getResource(getRelativePath(req));",
                        "lineNumber": 2457,
                        "lineChange": "added"
                      },
                      {
                        "line": "if (!resource.exists()) {",
                        "lineNumber": 2459,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Introduce cache for LDAP authentication",
                  "Merge new resources implementation from sandbox/trunk-resources"
                ],
                "precision": "very-high",
                "repoDatasetSize": 2,
                "cwe": [
                  "CWE-90"
                ]
              }
            },
            {
              "id": "php/XSS",
              "name": "XSS",
              "shortDescription": {
                "text": "Cross-site Scripting (XSS)"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser's Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they've been correctly escaped in the application code and in this way the attempted attack is diverted.\n\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware.\n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user's browser.|\n|**DOM-based**|Client|The attacker forces the user's browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code:\n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches.\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents.\n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "php"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/minkphp/Mink/commit/232919c0c44a2b35d410373c12db404b709ec25c?diff=split#diff-b51e2215d4bd4e189c9360d91a412970L6",
                    "lines": [
                      {
                        "line": "    setcookie(\"tc\", $_POST['cookie_value'], null, '/');",
                        "lineNumber": 3,
                        "lineChange": "none"
                      },
                      {
                        "line": "} elseif (isset($_GET[\"show_value\"])) {",
                        "lineNumber": 4,
                        "lineChange": "none"
                      },
                      {
                        "line": "    echo $_COOKIE[\"tc\"];",
                        "lineNumber": 5,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    echo htmlspecialchars($_COOKIE[\"tc\"],  ENT_QUOTES, 'UTF-8');",
                        "lineNumber": 5,
                        "lineChange": "added"
                      },
                      {
                        "line": "    die();",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 7,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/yunluo/Git/commit/1cb7eddf43f770c055cd685c7f73bb3dac713789?diff=split#diff-34390932035b5d4fd059e5e9a4c629b6L69",
                    "lines": [
                      {
                        "line": "    the_content(); ?>",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "<form class=\"googlo-tougao\" method=\"post\" action=\"<?php",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "    echo $_SERVER[\"REQUEST_URI\"];",
                        "lineNumber": 68,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    echo htmlspecialchars($_SERVER[\"REQUEST_URI\"]);",
                        "lineNumber": 68,
                        "lineChange": "added"
                      },
                      {
                        "line": "    $current_user = wp_get_current_user(); ?>\">",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "<div style=\"text-align: left; padding-top: 10px;\">",
                        "lineNumber": 70,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/railt/railt/commit/856e3456f6b87c94c1262a842c6df29a76cf9be1?diff=split#diff-eaa75d4030b62891c20b9f9d83a58fd2L59",
                    "lines": [
                      {
                        "line": "        echo $request->get('schema');",
                        "lineNumber": 56,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        echo htmlspecialchars($request->get('schema'));",
                        "lineNumber": 73,
                        "lineChange": "added"
                      },
                      {
                        "line": "    } else {",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "        echo file_get_contents(__DIR__ . '/gql/schema.graphqls');",
                        "lineNumber": 58,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        echo htmlspecialchars(file_get_contents(__DIR__ . '/gql/schema.graphqls'));",
                        "lineNumber": 75,
                        "lineChange": "added"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "?></div>",
                        "lineNumber": 77,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Uploaded files now appear on profile pages",
                  "Add files via upload",
                  "remove file name from output to avoid XSS"
                ],
                "precision": "very-high",
                "repoDatasetSize": 526,
                "cwe": [
                  "CWE-79"
                ]
              }
            },
            {
              "id": "java/TooPermissiveHostnameVerifier/test",
              "name": "TooPermissiveHostnameVerifier/test",
              "shortDescription": {
                "text": "Improper Certificate Validation"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nCommunication through encrypted TLS/SSL protocols can only take place when the server bears a valid certificate associating that server with a valid public-key identity issued by a third-party authority. If certificate validation is cursory or incomplete, this creates a weakness whereby an attacker can spoof one or more certificate details (e.g., expiration date), gaining unauthorized access to confidential data and privileged actions.\n\n### Best practices for prevention\n* Verify all aspects of any certificate provided, particularly chain of trust (issuing authority), host identity, and expiration.\n* Limit the validity period for certificates.\n* Avoid using self-signed certificates, certificate pinning, and wildcard certificates, as these all add levels of convenience but can also lead to loss of control over site/app security.\n* Disable older and insecure protocols (for example, SSL 2.0/3.0, MD5, and 3DES).\n* Ensure that all team members are familiar with current best practices and approaches, such as current TLS protocols.\n* Implement automated and manual testing using current tools and techniques designed to reveal this and related SSL weaknesses (for example, web application scanners).",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/bonigarcia/webdrivermanager/commit/90dedd67b71d59a9a15a9b11892be3cd0a1c2e4e?diff=split#diff-5fd27e182b6d09ea7f5901daab03449dL114",
                    "lines": [
                      {
                        "line": "HostnameVerifier allHostsValid = new HostnameVerifier() {",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public boolean verify(String hostname, SSLSession session) {",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return true;",
                        "lineNumber": 114,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        return hostname.equalsIgnoreCase(session.getPeerHost());",
                        "lineNumber": 114,
                        "lineChange": "added"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "};",
                        "lineNumber": 116,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/wso2-attic/product-private-paas/commit/a42df7abce437ad996fad1097a74ca7bf83da0c0?diff=split#diff-7568b7c1be7d23d9a86361e05ff18598L47",
                    "lines": [
                      {
                        "line": "if (Constants.ENABLE_SELF_CERTIFIED) {",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "    HttpsURLConnection.setDefaultHostnameVerifier(new HostnameVerifier() {",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "        @Override public boolean verify(String s, SSLSession sslSession) {",
                        "lineNumber": 46,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            return true;",
                        "lineNumber": 47,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        public boolean verify(String hostname, SSLSession session) {",
                        "lineNumber": 40,
                        "lineChange": "added"
                      },
                      {
                        "line": "            return hostname.equals(System.getProperty(Constants.HOSTNAME));",
                        "lineNumber": 41,
                        "lineChange": "added"
                      },
                      {
                        "line": "        }",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "    });",
                        "lineNumber": 49,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Liberuman/SimpleProject/commit/f7afc6477bcfb9b2f78f742df913aa9a86d251d1?diff=split#diff-68c680467370001ab531d6c88431244dL95",
                    "lines": [
                      {
                        "line": ".sslSocketFactory(sslContext.getSocketFactory(), trustManager)",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": ".hostnameVerifier(new HostnameVerifier() {",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @Override",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public boolean verify(String hostname, SSLSession session) {",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return true;",
                        "lineNumber": 96,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    if (!TextUtils.isEmpty(baseUrl) && baseUrl.contains(hostname)) {",
                        "lineNumber": 98,
                        "lineChange": "added"
                      },
                      {
                        "line": "      return true;",
                        "lineNumber": 99,
                        "lineChange": "added"
                      },
                      {
                        "line": "    } else {",
                        "lineNumber": 100,
                        "lineChange": "added"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "})",
                        "lineNumber": 105,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "merged the rest client and test cases according to the new folder structure",
                  "workaround for SSL verify",
                  "Smarter hostname verifier"
                ],
                "precision": "very-high",
                "repoDatasetSize": 53,
                "cwe": [
                  "CWE-295"
                ]
              }
            },
            {
              "id": "java/NonCryptoHardcodedSecret/test",
              "name": "NonCryptoHardcodedSecret/test",
              "shortDescription": {
                "text": "Use of Hardcoded, Security-relevant Constants"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nWhen constants are hardcoded into applications, this information could easily be reverse-engineered and become known to attackers. For example, if a breached authentication token is hardcoded in multiple places in the application, it may lead to components of the application remaining vulnerable if not all instances are changed.\nAnother negative effect of hard-coding constants is potential unpredictability in the application's performance if the development team fails to update every single instance of the hardcoded constant throughout the code. For these reasons, hard-coding security-relevant constants is considered bad coding practice and should be remedied if present and avoided in future.\n\n### Best practices for prevention\n* Never hard code security-related constants; use symbolic names or configuration lookup files.\n* As hard coding is often done by coders working alone on a small scale, examine all legacy code components and test carefully when scaling.\n* Adopt a \"future-proof code\" mindset: While use of constants may save a little time now and make development simpler in the short term, it could cost time and money adapting to scale or other unforeseen circumstances (such as new hardware) in the future.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/RocketChat/Rocket.Chat.Java.SDK/commit/6f17474770cd120650daa9945ed65273aaa5ec5c?diff=split#diff-fc51f9a049d8a8cd9df2a4226b87c214L19",
                    "lines": [
                      {
                        "line": "String username = \"sachin.shinde\";",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "String password = \"sachin9924\";",
                        "lineNumber": 18,
                        "lineChange": "removed"
                      },
                      {
                        "line": "String password = \"sachin123\";",
                        "lineNumber": 23,
                        "lineChange": "added"
                      },
                      {
                        "line": "private static String serverurl = \"wss://demo.rocket.chat\";",
                        "lineNumber": 25,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/wso2-attic/ballerina-message-broker/commit/8d606a4838b057411b7226e4651f7ca59d9746ce?diff=split#diff-2d8482e5c13da266ce6e6196d45bdf1eL66",
                    "lines": [
                      {
                        "line": "private String user = \"wso2carbon\";",
                        "lineNumber": 63,
                        "lineChange": "removed"
                      },
                      {
                        "line": "private String user = \"ballerina\";",
                        "lineNumber": 63,
                        "lineChange": "added"
                      },
                      {
                        "line": "private String password = \"wso2carbon\";",
                        "lineNumber": 65,
                        "lineChange": "removed"
                      },
                      {
                        "line": "private String password = \"ballerina\";",
                        "lineNumber": 65,
                        "lineChange": "added"
                      },
                      {
                        "line": "public String getUrl() {",
                        "lineNumber": 67,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/games647/FlexibleLogin/commit/9ea9726f145063f4436ca47ef864735e247c34c1?diff=split#diff-02a91e75dcc99d9c759ee4d9e0c88734L26",
                    "lines": [
                      {
                        "line": "@Setting(comment = \"Password in order to login\")",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "private String password = \"password123456789\";",
                        "lineNumber": 25,
                        "lineChange": "removed"
                      },
                      {
                        "line": "private String password = \"\";",
                        "lineNumber": 25,
                        "lineChange": "added"
                      },
                      {
                        "line": "public SQLType getType() {",
                        "lineNumber": 27,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Removed test keys",
                  "Remove API keys",
                  "Remove DropBox sync API libraries and dependencies"
                ],
                "precision": "very-high",
                "repoDatasetSize": 158,
                "cwe": [
                  "CWE-547"
                ]
              }
            },
            {
              "id": "java/PT",
              "name": "PT",
              "shortDescription": {
                "text": "Path Traversal"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/google/j2objc/commit/1b271d8b25c99a91547a19f16f71c048c3164156?diff=split#diff-33b6b27033cb88022415e8cd32b1807cL244",
                    "lines": [
                      {
                        "line": " * Extract a ZipEntry to the specified directory.",
                        "lineNumber": 241,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 242,
                        "lineChange": "none"
                      },
                      {
                        "line": "public File extractZipEntry(File dir, ZipFile zipFile, ZipEntry entry) throws IOException {",
                        "lineNumber": 243,
                        "lineChange": "none"
                      },
                      {
                        "line": "  File outputFile = new File(dir, entry.getName());",
                        "lineNumber": 244,
                        "lineChange": "none"
                      },
                      {
                        "line": "  File parentFile = outputFile.getParentFile();",
                        "lineNumber": 245,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (!parentFile.isDirectory() && !parentFile.mkdirs()) {",
                        "lineNumber": 246,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    throw new IOException(\"Could not extract file to \" + dir.getPath());",
                        "lineNumber": 247,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  if (!outputFile.getCanonicalPath().startsWith(dir.getCanonicalPath() + File.separator)",
                        "lineNumber": 246,
                        "lineChange": "added"
                      },
                      {
                        "line": "      || (!parentFile.isDirectory() && !parentFile.mkdirs())) {",
                        "lineNumber": 247,
                        "lineChange": "added"
                      },
                      {
                        "line": "    throw new IOException(\"Could not extract \" + entry.getName() + \" to \" + dir.getPath());",
                        "lineNumber": 248,
                        "lineChange": "added"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 249,
                        "lineChange": "none"
                      },
                      {
                        "line": "  try (InputStream inputStream = zipFile.getInputStream(entry);",
                        "lineNumber": 250,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileOutputStream outputStream = new FileOutputStream(outputFile)) {",
                        "lineNumber": 251,
                        "lineChange": "none"
                      },
                      {
                        "line": "    byte[] buf = new byte[1024];",
                        "lineNumber": 252,
                        "lineChange": "none"
                      },
                      {
                        "line": "    int n;",
                        "lineNumber": 253,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/blackducksoftware/synopsys-detect/commit/36555b9322986e9560f241d05f2262c29a17663b?diff=split#diff-bc0b5be9b9918488d8fe1dc64584df62L48",
                    "lines": [
                      {
                        "line": "Enumeration<? extends ZipEntry> entries = zipFile.entries();",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "while (entries.hasMoreElements()) {",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "    ZipEntry entry = entries.nextElement();",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Path entryPath = destPath.resolve(entry.getName());",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!entryPath.normalize().startsWith(dest.toPath()))",
                        "lineNumber": 49,
                        "lineChange": "added"
                      },
                      {
                        "line": "        throw new IOException(\"Zip entry contained path traversal\");",
                        "lineNumber": 50,
                        "lineChange": "added"
                      },
                      {
                        "line": "    if (entry.isDirectory()) {",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Files.createDirectories(entryPath);",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Files.createDirectories(entryPath.getParent());",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try (InputStream in = zipFile.getInputStream(entry)) {",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "            try (OutputStream out = new FileOutputStream(entryPath.toFile())) {",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "                IOUtils.copy(in, out);",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }",
                        "lineNumber": 58,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/azkaban/azkaban/commit/3b74a4127c9086cd525252edabc3621febab0428?diff=split#diff-c892cca6401b1e0be4cbca3261b47098L201",
                    "lines": [
                      {
                        "line": "final Enumeration<?> entries = source.entries();",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "while (entries.hasMoreElements()) {",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "  final ZipEntry entry = (ZipEntry) entries.nextElement();",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "  final File newFile = new File(dest, entry.getName());",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (!newFile.getCanonicalPath().startsWith(dest.getCanonicalPath())) {",
                        "lineNumber": 202,
                        "lineChange": "added"
                      },
                      {
                        "line": "    throw new IOException(",
                        "lineNumber": 203,
                        "lineChange": "added"
                      },
                      {
                        "line": "        \"Extracting zip entry would have resulted in a file outside the specified destination\"",
                        "lineNumber": 204,
                        "lineChange": "added"
                      },
                      {
                        "line": "if (entry.isDirectory()) {",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "  newFile.mkdirs();",
                        "lineNumber": 209,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 210,
                        "lineChange": "none"
                      },
                      {
                        "line": "  newFile.getParentFile().mkdirs();",
                        "lineNumber": 211,
                        "lineChange": "none"
                      },
                      {
                        "line": "  final InputStream src = source.getInputStream(entry);",
                        "lineNumber": 212,
                        "lineChange": "none"
                      },
                      {
                        "line": "  try {",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "    final OutputStream output =",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "        new BufferedOutputStream(new FileOutputStream(newFile));",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "      IOUtils.copy(src, output);",
                        "lineNumber": 217,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Test changed key to file.",
                  "* more code cleanup, some tests",
                  "Add option --xcode for Xcode translation testing"
                ],
                "precision": "very-high",
                "repoDatasetSize": 948,
                "cwe": [
                  "CWE-23"
                ]
              }
            },
            {
              "id": "java/XSS",
              "name": "XSS",
              "shortDescription": {
                "text": "Cross-site Scripting (XSS)"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser's Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they've been correctly escaped in the application code and in this way the attempted attack is diverted.\n\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware.\n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user's browser.|\n|**DOM-based**|Client|The attacker forces the user's browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code:\n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches.\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents.\n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/lutece-platform/lutece-core/commit/5387450fe0f3cf1b705bda89d553a6f67bc342b6?diff=split#diff-015efa4f075bbbac52efd486f29f3ca5L80",
                    "lines": [
                      {
                        "line": " *             the io exception",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "protected void processRequest( HttpServletRequest request, HttpServletResponse response ) throws ServletException, IOException",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String strValue = request.getParameter( PARAMETER_DATA );",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String strValueReturn = ( strValue != null ) ? EditorBbcodeService.getInstance( ).parse( strValue ) : \"\";",
                        "lineNumber": 82,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    String strEscaped = StringEscapeUtils.escapeHtml( strValue );",
                        "lineNumber": 84,
                        "lineChange": "added"
                      },
                      {
                        "line": "    String strValueReturn = ( strValue != null ) ? EditorBbcodeService.getInstance( ).parse( strEscaped ) : \"\";",
                        "lineNumber": 85,
                        "lineChange": "added"
                      },
                      {
                        "line": "    OutputStream out = response.getOutputStream( );",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "    out.write( strValueReturn.getBytes( AppPropertiesService.getProperty( PROPERTY_ENCODING ) ) );",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "    out.flush( );",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "    out.close( );",
                        "lineNumber": 89,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/square/keywhiz/commit/b08aeb5d31e17cd3706f646c595884181813121b?diff=split#diff-37c8fdba6768ae3e9126a316519ae714L35",
                    "lines": [
                      {
                        "line": "}",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "@Override protected void doPost(HttpServletRequest req, HttpServletResponse resp)",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "    throws ServletException, IOException {",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "  String path = req.getPathInfo();",
                        "lineNumber": 36,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  String path = StringEscapeUtils.escapeHtml4(req.getPathInfo());",
                        "lineNumber": 37,
                        "lineChange": "added"
                      },
                      {
                        "line": "  if(path != null && path.equals(\"/enable\")){",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "    mshc.setHealthy(true);",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "  } else if(path != null && path.equals(\"/disable\")) {",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "    mshc.setHealthy(false);",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "  } else {",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resp.sendError(HttpServletResponse.SC_NOT_FOUND,",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"Need to pass /status/enable or /status/disable, not /status\" + path);",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 46,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/apereo/cas/commit/9d81e9ba85945b0d0caaab58b10bf0c3b2e0af73?diff=split#diff-d950cb17562422f18fa1b11dc72e57deL72",
                    "lines": [
                      {
                        "line": "@Override",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "public final boolean preHandle(final HttpServletRequest request, final HttpServletResponse response, final Object o) throws Exception {",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // we only care about post because that's the only instance where we can get anything useful besides IP address.",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!\"POST\".equals(request.getMethod())) {",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return true;",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (exceedsThreshold(request)) {",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "        recordThrottle(request);",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "        response.sendError(403, \"Access Denied for user [\" + request.getParameter(usernameParameter)",
                        "lineNumber": 79,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        final String username = StringEscapeUtils.escapeHtml4(request.getParameter(usernameParameter));",
                        "lineNumber": 81,
                        "lineChange": "added"
                      },
                      {
                        "line": "        response.sendError(403, \"Access Denied for user [\" + username",
                        "lineNumber": 82,
                        "lineChange": "added"
                      },
                      {
                        "line": "                            + \" from IP Address [\" + request.getRemoteAddr() + \"]\");",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return false;",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": " * @param request the request",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "protected void recordThrottle(final HttpServletRequest request) {",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "    logger.warn(\"Throttling submission from {}.  More than {} failed login attempts within {} seconds.\",",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "            new Object[] {request.getRemoteAddr(), failureThreshold, failureRangeInSeconds});",
                        "lineNumber": 147,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Also started a IT testing harness to test servlets with a live sling instance",
                  "* using properties file so that spring boot can read it too"
                ],
                "precision": "very-high",
                "repoDatasetSize": 308,
                "cwe": [
                  "CWE-79"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "java/LdapEntryPoisoning",
          "ruleIndex": 0,
          "level": "warning",
          "message": {
            "text": "Setting this value to true enables object deserialization, which may lead to arbitrary code execution (aka LDAP Entry Poisoning).",
            "markdown": "Setting this value to {0} enables object deserialization, which may lead to arbitrary code execution (aka LDAP Entry Poisoning).",
            "arguments": [
              "[true](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/src/main/java/org/springframework/ldap/core/LdapTemplate.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1246,
                  "endLine": 1246,
                  "startColumn": 4,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7fae8082152d7e4977e8fccb5c8ef077fddd4c8521bfe64628cc508769bb44aa",
            "1": "9cf53582.106a6f29.e56003cb.e22980a8.0681ed2b.24948324.2d0aa500.54d46e25.60943257.277c621c.0b36b865.9998adc9.6441080e.7d794dbd.381e7863.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/main/java/org/springframework/ldap/core/LdapTemplate.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1246,
                            "endLine": 1246,
                            "startColumn": 33,
                            "endColumn": 37
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 501,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/integration-tests-ad/src/test/java/org/springframework/ldap/itest/ad/SchemaToJavaAdITest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 92,
                  "endLine": 92,
                  "startColumn": 9,
                  "endColumn": 34
                }
              }
            }
          ],
          "fingerprints": {
            "0": "510206020e949aded375b691cce59da686795c7f8d854389f75b80d929934b0c",
            "1": "19f079a4.2c941c60.5cc1370f.22a95358.84332b4a.33df0248.1148c131.fde7589e.542a6a3f.2c941c60.bf05a696.de031890.84332b4a.ce109560.1148c131.fde7589e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration-tests-ad/src/test/java/org/springframework/ldap/itest/ad/SchemaToJavaAdITest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 44,
                            "endColumn": 61
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/src/test/java/org/springframework/ldap/core/support/LdapContextSourceTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 55,
                  "startColumn": 3,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "cf3a49f24f58a452f62e15af77f2f5e21a38696359be33ccb70161c35dde4f9c",
            "1": "5387ee68.e8c02a15.21975e2f.e22980a8.75f548fa.935029da.5cdf0cd8.fde7589e.5387ee68.e8c02a15.21975e2f.e22980a8.75f548fa.935029da.5cdf0cd8.fde7589e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/test/java/org/springframework/ldap/core/support/LdapContextSourceTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 22,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/src/test/java/org/springframework/ldap/core/support/LdapContextSourceTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 134,
                  "endLine": 134,
                  "startColumn": 3,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e3a62ad2c5af8b61e1805ce982600936f23f5eb1992c6f533abfa8728a5eb31d",
            "1": "5387ee68.e8c02a15.21975e2f.e22980a8.75f548fa.935029da.5cdf0cd8.fde7589e.5387ee68.e8c02a15.21975e2f.e22980a8.75f548fa.935029da.5cdf0cd8.fde7589e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/test/java/org/springframework/ldap/core/support/LdapContextSourceTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 134,
                            "endLine": 134,
                            "startColumn": 22,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/src/test/java/org/springframework/ldap/core/support/LdapContextSourceTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 153,
                  "endLine": 153,
                  "startColumn": 3,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "830ecc838f26b00ae177bc642aac62e1e105b88752096e0df97268a199518ae0",
            "1": "5387ee68.e8c02a15.21975e2f.e22980a8.75f548fa.935029da.5cdf0cd8.fde7589e.5387ee68.e8c02a15.21975e2f.e22980a8.75f548fa.935029da.5cdf0cd8.fde7589e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/test/java/org/springframework/ldap/core/support/LdapContextSourceTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 153,
                            "endLine": 153,
                            "startColumn": 22,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/LdapEntryPoisoning/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Setting this value to true enables object deserialization, which may lead to arbitrary code execution (aka LDAP Entry Poisoning).",
            "markdown": "Setting this value to {0} enables object deserialization, which may lead to arbitrary code execution (aka LDAP Entry Poisoning).",
            "arguments": [
              "[true](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "odm/src/test/java/org/springframework/ldap/odm/test/TestLdap.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 88,
                  "endLine": 88,
                  "startColumn": 13,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "455ddd767a35c4cf261827309b35895864a3e61241ea234b9a3ccec63d4e7088",
            "1": "416089e6.dd05ec30.3d1185c1.de031890.1bf9df8f.ce109560.0fde5613.203bd690.416089e6.dd05ec30.3d1185c1.de031890.0681ed2b.ce109560.0fde5613.203bd690"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "odm/src/test/java/org/springframework/ldap/odm/test/TestLdap.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 92,
                            "endLine": 92,
                            "startColumn": 13,
                            "endColumn": 17
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/LdapEntryPoisoning/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Setting this value to true enables object deserialization, which may lead to arbitrary code execution (aka LDAP Entry Poisoning).",
            "markdown": "Setting this value to {0} enables object deserialization, which may lead to arbitrary code execution (aka LDAP Entry Poisoning).",
            "arguments": [
              "[true](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/src/test/java/org/springframework/ldap/core/LdapTemplateTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 844,
                  "endLine": 844,
                  "startColumn": 3,
                  "endColumn": 39
                }
              }
            }
          ],
          "fingerprints": {
            "0": "aaa8cda7a7e71c0be8f6bca9a02e23af4ccaf6b5629a5b9d4683680c83d857d4",
            "1": "ac4e7c8b.71c5ab85.67485ae9.e22980a8.e2bc261e.24948324.6ff94965.54d46e25.19689298.71c5ab85.3d1185c1.e22980a8.e2bc261e.24948324.6ff94965.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/test/java/org/springframework/ldap/core/LdapTemplateTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 844,
                            "endLine": 844,
                            "startColumn": 40,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/LdapEntryPoisoning/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Setting this value to true enables object deserialization, which may lead to arbitrary code execution (aka LDAP Entry Poisoning).",
            "markdown": "Setting this value to {0} enables object deserialization, which may lead to arbitrary code execution (aka LDAP Entry Poisoning).",
            "arguments": [
              "[true](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/src/test/java/org/springframework/ldap/core/LdapTemplateTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1850,
                  "endLine": 1850,
                  "startColumn": 3,
                  "endColumn": 31
                }
              }
            }
          ],
          "fingerprints": {
            "0": "66e2c91cd09591849eb3a244eeb6e09461d772abd7cce62d3ffe3b337110293f",
            "1": "89a8dcb0.1a5fc961.67485ae9.e22980a8.b2c8b954.13f73b40.c992234f.54d46e25.19689298.1cbd3ff4.3d1185c1.e22980a8.b2c8b954.13f73b40.c992234f.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/test/java/org/springframework/ldap/core/LdapTemplateTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1850,
                            "endLine": 1850,
                            "startColumn": 32,
                            "endColumn": 36
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/LdapEntryPoisoning/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Setting this value to true enables object deserialization, which may lead to arbitrary code execution (aka LDAP Entry Poisoning).",
            "markdown": "Setting this value to {0} enables object deserialization, which may lead to arbitrary code execution (aka LDAP Entry Poisoning).",
            "arguments": [
              "[true](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/src/test/java/org/springframework/ldap/core/LdapTemplateTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1857,
                  "endLine": 1857,
                  "startColumn": 3,
                  "endColumn": 31
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b00fec9323d2d287f3d059ca04c677e4ae60a6cfd00233ab1c1d272554db88f5",
            "1": "0120c889.fdfe9b12.f7ad8fc3.e22980a8.0681ed2b.13f73b40.c992234f.54d46e25.19689298.fdfe9b12.f7ad8fc3.e22980a8.0681ed2b.13f73b40.c992234f.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/test/java/org/springframework/ldap/core/LdapTemplateTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1857,
                            "endLine": 1857,
                            "startColumn": 32,
                            "endColumn": 36
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/LdapInjection",
          "ruleIndex": 3,
          "level": "error",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into javax.naming.ldap.LdapName, where it is used as an LDAP query. This may result in an LDAP Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an LDAP query. This may result in an LDAP Injection vulnerability.",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3),(4)",
              "[javax.naming.ldap.LdapName](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "samples/user-admin/src/main/java/org/springframework/ldap/samples/useradmin/web/GroupController.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 92,
                  "endLine": 92,
                  "startColumn": 50,
                  "endColumn": 71
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f9d9842ff01fa8b2e87a93515b8cc85a5e4f6e9e89f8f1fc3a4aabc15c2643dd",
            "1": "60943257.45f6e2bf.a224ef38.6ec6c721.77e23dcf.58c3080a.4ec45da4.cab6753a.60943257.61528139.a224ef38.02fef786.f0e1baa5.58c3080a.4ec45da4.d5d8bf66"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/user-admin/src/main/java/org/springframework/ldap/samples/useradmin/web/GroupController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 61,
                            "endColumn": 88
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/user-admin/src/main/java/org/springframework/ldap/samples/useradmin/web/GroupController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 61,
                            "endColumn": 88
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/user-admin/src/main/java/org/springframework/ldap/samples/useradmin/web/GroupController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 92,
                            "endLine": 92,
                            "startColumn": 72,
                            "endColumn": 78
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/main/java/org/springframework/ldap/support/LdapUtils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 410,
                            "endLine": 410,
                            "startColumn": 40,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/main/java/org/springframework/ldap/support/LdapUtils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 414,
                            "endLine": 414,
                            "startColumn": 33,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/main/java/org/springframework/ldap/support/LdapUtils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 414,
                            "endLine": 414,
                            "startColumn": 24,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 802,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/LdapInjection",
          "ruleIndex": 3,
          "level": "error",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into javax.naming.ldap.LdapName, where it is used as an LDAP query. This may result in an LDAP Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an LDAP query. This may result in an LDAP Injection vulnerability.",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3),(4)",
              "[javax.naming.ldap.LdapName](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "samples/user-admin/src/main/java/org/springframework/ldap/samples/useradmin/web/GroupController.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 102,
                  "endLine": 102,
                  "startColumn": 53,
                  "endColumn": 74
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0797d3c43849b98c8c31419198e3b2ca13f831ce2e9bb15aa548e38e50e2de9d",
            "1": "60943257.45f6e2bf.a224ef38.6ec6c721.fa6c1196.58c3080a.0ce4538a.cab6753a.60943257.61528139.a224ef38.02fef786.f0e1baa5.58c3080a.0ce4538a.d5d8bf66"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/user-admin/src/main/java/org/springframework/ldap/samples/useradmin/web/GroupController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 66,
                            "endColumn": 93
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/user-admin/src/main/java/org/springframework/ldap/samples/useradmin/web/GroupController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 66,
                            "endColumn": 93
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/user-admin/src/main/java/org/springframework/ldap/samples/useradmin/web/GroupController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 102,
                            "endLine": 102,
                            "startColumn": 75,
                            "endColumn": 81
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/main/java/org/springframework/ldap/support/LdapUtils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 410,
                            "endLine": 410,
                            "startColumn": 40,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/main/java/org/springframework/ldap/support/LdapUtils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 414,
                            "endLine": 414,
                            "startColumn": 33,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "core/src/main/java/org/springframework/ldap/support/LdapUtils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 414,
                            "endLine": 414,
                            "startColumn": 24,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 802,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "php/XSS",
          "ruleIndex": 4,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from data from a remote resource flows into the echo statement, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[data from a remote resource](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[the echo statement](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "etc/snapshotzipbuilds/1.3-snapshot-download.php",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8,
                  "startColumn": 1,
                  "endColumn": 23
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1575042b209b8d490b22e342d94cdbc11d440e0a041f66f3eb9b5c0bf52f4a9e",
            "1": "80f1517a.464a7316.c3dea7ce.1f144feb.b76b24a1.9e929120.a7efae7e.be170d97.6365d263.464a7316.c3dea7ce.1f144feb.8e15520f.2f4e1548.b2a0b7cd.be170d97"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "etc/snapshotzipbuilds/1.3-snapshot-download.php",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 3,
                            "endLine": 3,
                            "startColumn": 8,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "etc/snapshotzipbuilds/1.3-snapshot-download.php",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 3,
                            "endLine": 3,
                            "startColumn": 8,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "etc/snapshotzipbuilds/1.3-snapshot-download.php",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 3,
                            "endLine": 3,
                            "startColumn": 1,
                            "endColumn": 5
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "etc/snapshotzipbuilds/1.3-snapshot-download.php",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 8,
                            "endLine": 8,
                            "startColumn": 13,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "etc/snapshotzipbuilds/1.3-snapshot-download.php",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 8,
                            "endLine": 8,
                            "startColumn": 6,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "etc/snapshotzipbuilds/1.3-snapshot-download.php",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 8,
                            "endLine": 8,
                            "startColumn": 1,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "etc/snapshotzipbuilds/1.3-snapshot-download.php",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 8,
                            "endLine": 8,
                            "startColumn": 1,
                            "endColumn": 23
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 501,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/TooPermissiveHostnameVerifier/test",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "The verify method always returns true, which means that any hostname is accepted. Such behaviour is insecure.",
            "markdown": "The {0} method always returns {1}, which means that any hostname is accepted. Such behaviour is insecure.",
            "arguments": [
              "[verify](0)",
              "[true](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/integration-tests-openldap/src/main/java/org/springframework/ldap/AllMatchHostnameVerifier.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 27,
                  "endLine": 27,
                  "startColumn": 20,
                  "endColumn": 26
                }
              }
            }
          ],
          "fingerprints": {
            "0": "71925b31a740b5c0d009ee039662fa71e63a12e49a24fb65006c80c0c9df616a",
            "1": "9e25d08e.7703ba66.85365f17.e22980a8.0681ed2b.58c3080a.5b1ccecb.9c4228d3.9e25d08e.7703ba66.85365f17.e22980a8.0681ed2b.58c3080a.5b1ccecb.9c4228d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration-tests-openldap/src/main/java/org/springframework/ldap/AllMatchHostnameVerifier.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 27,
                            "endLine": 27,
                            "startColumn": 20,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration-tests-openldap/src/main/java/org/springframework/ldap/AllMatchHostnameVerifier.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 28,
                            "endLine": 28,
                            "startColumn": 16,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 351,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/NonCryptoHardcodedSecret/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found hardcoded secret.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found hardcoded {0}.",
            "arguments": [
              "[secret](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/integration-tests-ad/src/test/java/org/springframework/ldap/itest/ad/SchemaToJavaAdITest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 55,
                  "startColumn": 44,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4c5888b409a31b010f752f18a5f4cbd247ba61588ca88f5b735de1ad0cbbfd55",
            "1": "542a6a3f.dd05ec30.bf05a696.de031890.8b2d3351.ce109560.1148c131.d9e01f64.542a6a3f.e8c02a15.bf05a696.de031890.bb61bed7.ce109560.1148c131.fde7589e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration-tests-ad/src/test/java/org/springframework/ldap/itest/ad/SchemaToJavaAdITest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 44,
                            "endColumn": 61
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 402,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/NonCryptoHardcodedSecret/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found hardcoded secret.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found hardcoded {0}.",
            "arguments": [
              "[secret](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "test/integration-tests-ad/src/test/java/org/springframework/ldap/itest/ad/IncrementalAttributeMapperITest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 55,
                  "startColumn": 52,
                  "endColumn": 69
                }
              }
            }
          ],
          "fingerprints": {
            "0": "762b24941551d8c1264d38080ba83c31c985816ab190a78d4879f6f63a6300e5",
            "1": "e6fcc0e0.dd05ec30.80735c59.de031890.8b2d3351.ce109560.d1d0795c.cda713bc.e6fcc0e0.dd05ec30.fd2121be.de031890.bb61bed7.ce109560.d1d0795c.cda713bc"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/integration-tests-ad/src/test/java/org/springframework/ldap/itest/ad/IncrementalAttributeMapperITest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 52,
                            "endColumn": 69
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 352,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/PT",
          "ruleIndex": 7,
          "level": "error",
          "message": {
            "text": "Unsanitized input from a zip file flows into java.io.FileOutputStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "arguments": [
              "[a zip file](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14)",
              "[java.io.FileOutputStream](15)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "buildSrc/src/main/java/s101/S101Configurer.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 224,
                  "endLine": 224,
                  "startColumn": 34,
                  "endColumn": 50
                }
              }
            }
          ],
          "fingerprints": {
            "0": "46c3879172b852434963f69d670540f79b44160b4f3dc95924e81e7410a7720b",
            "1": "5266f9a2.9bb84c11.a83166f3.c2655490.b636048f.1ca6e5b4.a204df5d.5beac6a6.f9545bfc.d48f922c.50c8bb92.aae1ee50.e7ceb092.7fda7c5e.a5a4d6f9.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "buildSrc/src/main/java/s101/S101Configurer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 200,
                            "endLine": 200,
                            "startColumn": 24,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "buildSrc/src/main/java/s101/S101Configurer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 200,
                            "endLine": 200,
                            "startColumn": 24,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "buildSrc/src/main/java/s101/S101Configurer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 200,
                            "endLine": 200,
                            "startColumn": 24,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "buildSrc/src/main/java/s101/S101Configurer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 200,
                            "endLine": 200,
                            "startColumn": 13,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "buildSrc/src/main/java/s101/S101Configurer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 201,
                            "endLine": 201,
                            "startColumn": 10,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "buildSrc/src/main/java/s101/S101Configurer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 204,
                            "endLine": 204,
                            "startColumn": 10,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "buildSrc/src/main/java/s101/S101Configurer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 207,
                            "endLine": 207,
                            "startColumn": 10,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "buildSrc/src/main/java/s101/S101Configurer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 210,
                            "endLine": 210,
                            "startColumn": 10,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "buildSrc/src/main/java/s101/S101Configurer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 213,
                            "endLine": 213,
                            "startColumn": 10,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "buildSrc/src/main/java/s101/S101Configurer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 216,
                            "endLine": 216,
                            "startColumn": 10,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "buildSrc/src/main/java/s101/S101Configurer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 219,
                            "endLine": 219,
                            "startColumn": 10,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "buildSrc/src/main/java/s101/S101Configurer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 222,
                            "endLine": 222,
                            "startColumn": 23,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "buildSrc/src/main/java/s101/S101Configurer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 239,
                            "endLine": 239,
                            "startColumn": 34,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "buildSrc/src/main/java/s101/S101Configurer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 224,
                            "endLine": 224,
                            "startColumn": 55,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "buildSrc/src/main/java/s101/S101Configurer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 224,
                            "endLine": 224,
                            "startColumn": 51,
                            "endColumn": 98
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "buildSrc/src/main/java/s101/S101Configurer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 224,
                            "endLine": 224,
                            "startColumn": 34,
                            "endColumn": 50
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 751,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/XSS",
          "ruleIndex": 8,
          "level": "error",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into here, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3),(4)",
              "[here](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "samples/user-admin/src/main/java/org/springframework/ldap/samples/useradmin/web/GroupController.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 67,
                  "endLine": 67,
                  "startColumn": 16,
                  "endColumn": 52
                }
              }
            }
          ],
          "fingerprints": {
            "0": "cf93ade99fc56cd58ee3c8fa8d4e205858de94859a06533db475db5cf5315e95",
            "1": "b49c0578.df99d0e8.fc7d5400.e22980a8.fb9ca974.17995ad8.3bf92c7e.54d46e25.e6fcc0e0.dd05ec30.a224ef38.de031890.fb9ca974.ce109560.adfedf50.96f2b075"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/user-admin/src/main/java/org/springframework/ldap/samples/useradmin/web/GroupController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 64,
                            "endLine": 64,
                            "startColumn": 28,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/user-admin/src/main/java/org/springframework/ldap/samples/useradmin/web/GroupController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 64,
                            "endLine": 64,
                            "startColumn": 28,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/user-admin/src/main/java/org/springframework/ldap/samples/useradmin/web/GroupController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 67,
                            "endLine": 67,
                            "startColumn": 37,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/user-admin/src/main/java/org/springframework/ldap/samples/useradmin/web/GroupController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 67,
                            "endLine": 67,
                            "startColumn": 37,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/user-admin/src/main/java/org/springframework/ldap/samples/useradmin/web/GroupController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 67,
                            "endLine": 67,
                            "startColumn": 16,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/user-admin/src/main/java/org/springframework/ldap/samples/useradmin/web/GroupController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 67,
                            "endLine": 67,
                            "startColumn": 16,
                            "endColumn": 52
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 803,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/XSS",
          "ruleIndex": 8,
          "level": "error",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into here, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3),(4),(5),(6)",
              "[here](7)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "samples/user-admin/src/main/java/org/springframework/ldap/samples/useradmin/web/UserController.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 93,
                  "endLine": 93,
                  "startColumn": 16,
                  "endColumn": 54
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9527c3e51fb2630b7109f3a3d61120b15c299b84e240508b195b2c60c182e1b0",
            "1": "cdba64ae.0d44556a.227ac669.e22980a8.bd62e703.8f456eb7.6f2d11ad.54d46e25.19689298.dd05ec30.227ac669.de031890.f0e1baa5.ce109560.bb7242a0.96f2b075"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/user-admin/src/main/java/org/springframework/ldap/samples/useradmin/web/UserController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 30,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/user-admin/src/main/java/org/springframework/ldap/samples/useradmin/web/UserController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 30,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/user-admin/src/main/java/org/springframework/ldap/samples/useradmin/web/UserController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 91,
                            "endLine": 91,
                            "startColumn": 26,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/user-admin/src/main/java/org/springframework/ldap/samples/useradmin/web/UserController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 91,
                            "endLine": 91,
                            "startColumn": 14,
                            "endColumn": 54
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/user-admin/src/main/java/org/springframework/ldap/samples/useradmin/web/UserController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 93,
                            "endLine": 93,
                            "startColumn": 37,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/user-admin/src/main/java/org/springframework/ldap/samples/useradmin/web/UserController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 93,
                            "endLine": 93,
                            "startColumn": 37,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/user-admin/src/main/java/org/springframework/ldap/samples/useradmin/web/UserController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 93,
                            "endLine": 93,
                            "startColumn": 16,
                            "endColumn": 54
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/user-admin/src/main/java/org/springframework/ldap/samples/useradmin/web/UserController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 93,
                            "endLine": 93,
                            "startColumn": 16,
                            "endColumn": 54
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 803,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/XSS",
          "ruleIndex": 8,
          "level": "error",
          "message": {
            "text": "Unsanitized input from the request URL flows into here, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[the request URL](0)",
              "[flows](1),(2)",
              "[here](3)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "samples/user-admin/src/main/java/org/springframework/ldap/samples/useradmin/web/GroupController.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 96,
                  "endLine": 96,
                  "startColumn": 16,
                  "endColumn": 42
                }
              }
            }
          ],
          "fingerprints": {
            "0": "38bf0b941f8008632cdf522873e6f8279ff08c4675d29657b10c032b10897720",
            "1": "4e696cbd.61528139.fc7d5400.e22980a8.e39a9447.ba2b7f9a.4ec45da4.54d46e25.19689298.61528139.160ec77c.de031890.f0e1baa5.ce109560.7f59e854.96f2b075"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/user-admin/src/main/java/org/springframework/ldap/samples/useradmin/web/GroupController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 34,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/user-admin/src/main/java/org/springframework/ldap/samples/useradmin/web/GroupController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 34,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/user-admin/src/main/java/org/springframework/ldap/samples/useradmin/web/GroupController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 96,
                            "endLine": 96,
                            "startColumn": 16,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/user-admin/src/main/java/org/springframework/ldap/samples/useradmin/web/GroupController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 96,
                            "endLine": 96,
                            "startColumn": 16,
                            "endColumn": 42
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 803,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/XSS",
          "ruleIndex": 8,
          "level": "error",
          "message": {
            "text": "Unsanitized input from the request URL flows into here, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[the request URL](0)",
              "[flows](1),(2)",
              "[here](3)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "samples/user-admin/src/main/java/org/springframework/ldap/samples/useradmin/web/GroupController.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 106,
                  "endLine": 106,
                  "startColumn": 16,
                  "endColumn": 42
                }
              }
            }
          ],
          "fingerprints": {
            "0": "455a04c971301abbaa9260f13f3954ab8400d1036321c6f666667f8825709e01",
            "1": "4e696cbd.61528139.fc7d5400.e22980a8.e39a9447.ba2b7f9a.0ce4538a.54d46e25.19689298.61528139.4fa14448.de031890.f0e1baa5.ce109560.7f59e854.96f2b075"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/user-admin/src/main/java/org/springframework/ldap/samples/useradmin/web/GroupController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 39,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/user-admin/src/main/java/org/springframework/ldap/samples/useradmin/web/GroupController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 39,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/user-admin/src/main/java/org/springframework/ldap/samples/useradmin/web/GroupController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 106,
                            "endLine": 106,
                            "startColumn": 16,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/user-admin/src/main/java/org/springframework/ldap/samples/useradmin/web/GroupController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 106,
                            "endLine": 106,
                            "startColumn": 16,
                            "endColumn": 42
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 803,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/XSS",
          "ruleIndex": 8,
          "level": "error",
          "message": {
            "text": "Unsanitized input from the request URL flows into here, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[the request URL](0)",
              "[flows](1),(2),(3),(4),(5),(6)",
              "[here](7)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "samples/user-admin/src/main/java/org/springframework/ldap/samples/useradmin/web/UserController.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 100,
                  "endLine": 100,
                  "startColumn": 16,
                  "endColumn": 54
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d0119930db02a740366b7e738eefbd81cf4a6957b2574dd02c12e6c8671fc465",
            "1": "cdba64ae.0d44556a.fc7d5400.e22980a8.bd62e703.a4d5031c.6f2d11ad.54d46e25.19689298.dd05ec30.a224ef38.de031890.f0e1baa5.ce109560.bb7242a0.96f2b075"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/user-admin/src/main/java/org/springframework/ldap/samples/useradmin/web/UserController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 97,
                            "endLine": 97,
                            "startColumn": 30,
                            "endColumn": 57
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/user-admin/src/main/java/org/springframework/ldap/samples/useradmin/web/UserController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 97,
                            "endLine": 97,
                            "startColumn": 30,
                            "endColumn": 57
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/user-admin/src/main/java/org/springframework/ldap/samples/useradmin/web/UserController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 98,
                            "endLine": 98,
                            "startColumn": 26,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/user-admin/src/main/java/org/springframework/ldap/samples/useradmin/web/UserController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 98,
                            "endLine": 98,
                            "startColumn": 14,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/user-admin/src/main/java/org/springframework/ldap/samples/useradmin/web/UserController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 37,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/user-admin/src/main/java/org/springframework/ldap/samples/useradmin/web/UserController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 37,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/user-admin/src/main/java/org/springframework/ldap/samples/useradmin/web/UserController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 16,
                            "endColumn": 54
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "samples/user-admin/src/main/java/org/springframework/ldap/samples/useradmin/web/UserController.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 16,
                            "endColumn": 54
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 803,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        }
      ],
      "properties": {
        "coverage": [
          {
            "files": 650,
            "isSupported": true,
            "lang": "Java"
          },
          {
            "files": 53,
            "isSupported": true,
            "lang": "HTML"
          },
          {
            "files": 5,
            "isSupported": true,
            "lang": "JavaScript"
          },
          {
            "files": 246,
            "isSupported": true,
            "lang": "XML"
          },
          {
            "files": 53,
            "isSupported": false,
            "lang": "Roff Manpage"
          },
          {
            "files": 97,
            "isSupported": false,
            "lang": "Unknown"
          },
          {
            "files": 1,
            "isSupported": false,
            "lang": "Groovy"
          },
          {
            "files": 1,
            "isSupported": false,
            "lang": "XML"
          },
          {
            "files": 1,
            "isSupported": false,
            "lang": "Motorola 68K Assembly"
          },
          {
            "files": 1,
            "isSupported": false,
            "lang": "Clojure"
          },
          {
            "files": 1,
            "isSupported": true,
            "lang": "Python"
          },
          {
            "files": 1,
            "isSupported": true,
            "lang": "PHP"
          }
        ]
      }
    }
  ]
}
