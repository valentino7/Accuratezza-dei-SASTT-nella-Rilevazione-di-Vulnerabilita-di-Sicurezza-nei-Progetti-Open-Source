{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SnykCode",
          "semanticVersion": "1.0.0",
          "version": "1.0.0",
          "rules": [
            {
              "id": "java/TLS/test",
              "name": "TLS/test",
              "shortDescription": {
                "text": "Inadequate Encryption Strength"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nImplementing encryption for the transmission and storage of sensitive information is essential. But encryption standards are constantly changing since attackers have more and more powerful resources at their disposal-along with more sophisticated attack algorithms. This means that encryption is only useful if it meets current standards appropriate for the type of data being transmitted or stored.\nWhen organizations use weakly encoded passwords or weak hashes (especially when they also utilize single-factor authentication, which places too much emphasis on passwords), attackers can potentially gain unauthorized access through a brute-force attack.\n\n### Best practices for prevention\n* Understand best practices of contemporary encryption algorithms and techniques.\n* Avoid encryption algorithms and techniques that are widely known to be outdated (for example, DES).\n* Implement multi-factor authentication to minimize reliance on a single factor, such as a password, that is too susceptible to brute-force attacks.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/apache/cloudstack/commit/91f7012b015249d9d74dace8874ee8f38b54bfc2?diff=split#diff-5604a4e589dc38cc8d80f2f4020c2a23L53",
                    "lines": [
                      {
                        "line": "public static SSLContext getSSLContext() throws NoSuchAlgorithmException {",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return SSLContext.getInstance(\"TLSv1\");",
                        "lineNumber": 52,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    return SSLContext.getInstance(\"TLSv1.2\");",
                        "lineNumber": 69,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 70,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/MissionCriticalCloud/cosmic/commit/3a4004a34b42e30a49a1c48f1ff57e5f3ca26913?diff=split#diff-49bfef0c8d16a2c34d787d4fca65e2e7L35",
                    "lines": [
                      {
                        "line": "public static SSLContext getSSLContext() throws NoSuchAlgorithmException {",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return SSLContext.getInstance(\"TLSv1\");",
                        "lineNumber": 34,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    return SSLContext.getInstance(\"TLSv1.2\");",
                        "lineNumber": 34,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 35,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/hypercube1024/firefly/commit/e2e4d7810c9bb202bbef3d5022e3b13447f102dd?diff=split#diff-fb5cd0d3953731ed2bdb241178f1ce05L32",
                    "lines": [
                      {
                        "line": "  tmf.init(ks);",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "  sslContext = SSLContext.getInstance(\"TLS\");",
                        "lineNumber": 31,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  sslContext = SSLContext.getInstance(\"TLSv1.2\");",
                        "lineNumber": 31,
                        "lineChange": "added"
                      },
                      {
                        "line": "  sslContext.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "return sslContext;",
                        "lineNumber": 33,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Configuring TSL/SSL now supports property placeholders.",
                  "support for TLS config tweaks",
                  "Temporarily peg SSL version to TLSv1.2."
                ],
                "precision": "very-high",
                "repoDatasetSize": 78,
                "cwe": [
                  "CWE-326"
                ]
              }
            },
            {
              "id": "java/TrustBoundaryViolation/test",
              "name": "TrustBoundaryViolation/test",
              "shortDescription": {
                "text": "Trust Boundary Violation"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nGood application design includes defining trusted and untrusted areas. Trusted areas might include secure session information, while untrusted areas might include general website content such as a company logo. When this weakness is present, the application allows untrusted data-such as unsanitized user input-to be moved into trusted areas, generally data structures. If this happens, the data is often inadvertently then treated as \"trusted\" by the server, allowing attackers to gain higher-level access, taking control of the application or leading to denial of service.\n\n### Best practices for prevention\n\n* In early application planning stages, incorporate secure design principles in consultation with application security professionals.\n* Sanitize and validate all user input, including data from cookies and HTTP headers-limiting input to expected values if possible-before transferring to a trusted data structure (Never pass user input directly to a trusted data structure.).\n* Use sanitization and validation methods built into your development environment if these are available rather than relying on DIY methods, which are more complex to implement and may not catch special cases or can break if the application is modified.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/OAuth-Apis/apis/commit/0a7301608cc377bc36922ae25f352ad7aab2cc05?diff=split#diff-e76222cf463c219da7ab44271ef36583L24",
                    "lines": [
                      {
                        "line": "@Override",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "    HttpServletRequest httpServletRequest = (HttpServletRequest) request;",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "    HttpServletResponse httpResponse = (HttpServletResponse) response;",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "    httpServletRequest.getSession().setAttribute(POST_CAS_AUTHENTICATION_INFO, httpServletRequest.getRemoteUser());",
                        "lineNumber": 25,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    CasUser casUser = new CasUser();",
                        "lineNumber": 33,
                        "lineChange": "added"
                      },
                      {
                        "line": "    String uid = httpServletRequest.getRemoteUser();",
                        "lineNumber": 34,
                        "lineChange": "added"
                      },
                      {
                        "line": "    casUser.setUid(uid);",
                        "lineNumber": 35,
                        "lineChange": "added"
                      },
                      {
                        "line": "    if (admins.contains(uid)) {",
                        "lineNumber": 36,
                        "lineChange": "added"
                      },
                      {
                        "line": "        casUser.setAdmin(true);",
                        "lineNumber": 37,
                        "lineChange": "added"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 38,
                        "lineChange": "added"
                      },
                      {
                        "line": "    httpServletRequest.getSession().setAttribute(POST_CAS_AUTHENTICATION_INFO, casUser);",
                        "lineNumber": 39,
                        "lineChange": "added"
                      },
                      {
                        "line": "    String uri = (String) httpServletRequest.getSession().getAttribute(REDIRECT_URL);",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "    httpResponse.sendRedirect(uri);",
                        "lineNumber": 41,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/NCIP/catissue-core/commit/a396754f0b45452079559ba517c824dc5179ac2b?diff=split#diff-c141ef2cd4e78ddc0295139e37574051L53",
                    "lines": [
                      {
                        "line": " * */",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "public ActionForward executeSecureAction(ActionMapping mapping, ActionForm form,",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "    HttpServletRequest request, HttpServletResponse response) throws Exception",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "  Validator validator = new Validator();",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "//For Pagenation\t",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "//Gets the session of this request.",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "    HttpSession session = request.getSession();",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String pageNumStr = request.getParameter(Constants.PAGE_NUMBER);",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "    int pageNum = 0;",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if(!validator.isEmpty(pageNumStr))",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "    {",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \tpageNum = Integer.parseInt(pageNumStr);",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \tsession.setAttribute(Constants.PAGE_NUMBER,pageNumStr);",
                        "lineNumber": 66,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    \trequest.setAttribute(Constants.PAGE_NUMBER,pageNumStr);",
                        "lineNumber": 65,
                        "lineChange": "added"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "//The start index in the list of users to be approved/rejected.",
                        "lineNumber": 68,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/handexing/geekHome/commit/480c34dc8e4c889fb75df481295943e0412795c6?diff=split#diff-e356bbe1a48e1105917313c37d5b1882L196",
                    "lines": [
                      {
                        "line": "@RequestMapping(\"getEmailCode\")",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @CrossOrigin",
                        "lineNumber": 196,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public ExecuteResult<User> getEmailCode(@RequestBody User user , HttpServletRequest request) {",
                        "lineNumber": 197,
                        "lineChange": "none"
                      },
                      {
                        "line": "      final ExecuteResult<User> result = new ExecuteResult<>();",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "      try {",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "          User u = userService.verifyByNameAndEmail(user);",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "          if(u.getId()!=null){",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "              String code = EmailUtils.sendEmail(u.getEmail()); //ÕÅæÚÇüÚé«õ╗ÂÚ¬îÞ»ü",
                        "lineNumber": 200,
                        "lineChange": "removed"
                      },
                      {
                        "line": "              String code = EmailUtils.getCode(); ",
                        "lineNumber": 202,
                        "lineChange": "added"
                      },
                      {
                        "line": "              emailUtils.doTask(u.getEmail() , code); //Õ╝éµ¡ÑÕÅæÚÇü",
                        "lineNumber": 203,
                        "lineChange": "added"
                      },
                      {
                        "line": "              result.setData(userService.verifyByNameAndEmail(user));",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "              result.setSuccess(true);",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "              //Õ░åÚ¬îÞ»üþáüµö¥õ║Äsessionõ©¡õ┐ØÕ¡ÿ´╝îÕ¡ÿµö¥õ╣ïÕëìÕàêµ©àÚÖñ",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "              if(request.getSession().getAttribute(\"verifyCode\") != null)",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "              {",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "                  request.getSession().removeAttribute(\"verifyCode\"); ",
                        "lineNumber": 209,
                        "lineChange": "none"
                      },
                      {
                        "line": "              }",
                        "lineNumber": 210,
                        "lineChange": "none"
                      },
                      {
                        "line": "              request.getSession().setAttribute(\"verifyCode\", code);",
                        "lineNumber": 211,
                        "lineChange": "none"
                      },
                      {
                        "line": "          }else {",
                        "lineNumber": 212,
                        "lineChange": "none"
                      },
                      {
                        "line": "              result.setData(new User());",
                        "lineNumber": 213,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "* fix unit test",
                  "When a user logs in, change what is viewed.",
                  "Added OIDC WS login and unit test."
                ],
                "precision": "very-high",
                "repoDatasetSize": 94,
                "cwe": [
                  "CWE-501"
                ]
              }
            },
            {
              "id": "java/ServerInformationExposure/test",
              "name": "ServerInformationExposure/test",
              "shortDescription": {
                "text": "Server Information Exposure"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nWhen a command to your site or application fails, it should do so gracefully, meaning that the user is informed that there has been a problem, rather than experiencing erratic behavior, such as crashing, hanging, or returning a 404 or similar generic error page.\n\nIn some cases, developers include information in an error message to help pinpoint the source of an error; these may include username, password, application path, stack values, and other internal details. When this weakness is present, if these logs are accessible to an attacker, it may give them clues as to the inner workings of the app, helping them plan a focused attack. For example, clues revealing SQL database details may help plan an SQL injection attack.\n\n### Best practices for prevention\n* Keep error messages to the barest minimum of helpful information that users absolutely need to know.\n* Use consistent error messages that do not give attackers clues that they might be on the right track to a successful attack, such as \"File not found\" or \"User name does not exist\".\n* Ensure that debugging information is removed from code prior to release.\n* Create clear policy for the types of errors that must be logged, which messages will be displayed to users, and which details will be logged for later alerting and debugging.\n* When logging error details, never include sensitive information such as passwords.\n* Implement naming conventions that will help you flag and defend sensitive information.\n* Use dynamic (white box) test techniques to identify conditions that could cause errors and failures and test thoroughly to ensure that the code performs gracefully without revealing sensitive data under these stress conditions.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/Nastel/tnt4j-stream-jmx/commit/624c5a0fb347a42756d8585cc79af68fa337e9f0?diff=split#diff-35c1f73e10eae0fa3bae03b3fac7f022L139",
                    "lines": [
                      {
                        "line": "@Override",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (req.getRequestURI().endsWith(\"/js/tntJmx.js\")) {",
                        "lineNumber": 155,
                        "lineChange": "added"
                      },
                      {
                        "line": "    resp.setContentType(\"application/javascript\");",
                        "lineNumber": 156,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 165,
                        "lineChange": "added"
                      },
                      {
                        "line": "PrintWriter out = resp.getWriter();",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "out.println(\"<html>\");",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "out.println(\"<body>\");",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "} catch (Exception e) {",
                        "lineNumber": 361,
                        "lineChange": "none"
                      },
                      {
                        "line": "  out.println(\"!!! NO captured output available !!!\");",
                        "lineNumber": 362,
                        "lineChange": "none"
                      },
                      {
                        "line": "  e.printStackTrace(out);",
                        "lineNumber": 363,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 364,
                        "lineChange": "none"
                      },
                      {
                        "line": "out.println(\"</textarea>\");",
                        "lineNumber": 365,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/nidi3/raml-tester-proxy/commit/32b2457bebfeeb1f72610b98a2ff31ac2361f092?diff=split#diff-3414551db540ee26f840d182e6e6c029L77",
                    "lines": [
                      {
                        "line": "}",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "public boolean handleCommands(HttpServletRequest request, HttpServletResponse response) throws IOException {",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!request.getPathInfo().startsWith(\"/@@@proxy\")) {",
                        "lineNumber": 77,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    if (!request.getPathInfo().startsWith(COMMAND_PATH) || \"true\".equals(request.getHeader(IGNORE_COMMANDS_HEADER))) {",
                        "lineNumber": 81,
                        "lineChange": "added"
                      },
                      {
                        "line": "        return false;",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "    final String command = request.getPathInfo().substring(10);",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "    final PrintWriter writer = response.getWriter();",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "    switch (command) {",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "        case \"stop\":",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } catch (Exception e) {",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "        writer.println(\"illegal options: '\" + raw + \"'\");",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "        e.printStackTrace(writer);",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 164,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/dropwizard/dropwizard/commit/0d143d7bc35351a135f8dc82c5e6f78d1eb39268?diff=split#diff-2339a287a25047fea1fc16e74728a1c1L116",
                    "lines": [
                      {
                        "line": "@Override",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "protected void doPost(HttpServletRequest req,",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "                      HttpServletResponse resp) throws ServletException, IOException {",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "    final Task task = tasks.get(req.getPathInfo());",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (task != null) {",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "        resp.setContentType(MediaType.PLAIN_TEXT_UTF_8.toString());",
                        "lineNumber": 118,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        resp.setContentType(CONTENT_TYPE);",
                        "lineNumber": 121,
                        "lineChange": "added"
                      },
                      {
                        "line": "        final PrintWriter output = resp.getWriter();",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try {",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "            final TaskExecutor taskExecutor = taskExecutors.get(task);",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "    output.println();",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "    output.println(e.getMessage());",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "    e.printStackTrace(output);",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "} finally {",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "    output.close();",
                        "lineNumber": 133,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Create a base class for API controller servlets.",
                  "Unit tests for import and export APIs",
                  "SDB/MySQL connection pooling"
                ],
                "precision": "very-high",
                "repoDatasetSize": 27,
                "cwe": [
                  "CWE-209"
                ]
              }
            },
            {
              "id": "java/LdapInjection/test",
              "name": "LdapInjection/test",
              "shortDescription": {
                "text": "LDAP Injection"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\nLDAP servers offer simple storage for a range of information types, including systems, services, emails, and users. One of the most common applications of LDAP servers is to orchestrate user sessions, making it easier for users to access multiple services through a single sign-on. An LDAP injection attack occurs when an attacker gains unauthorized access to these centralized stores of user data. If an attacker succeeds in injecting arbitrary, unsanitized information into an LDAP query, the attacker can gain access to credentials or content and/or perform unauthorized actions. This could include adding or modifying records within the centralized data store itself, such as erasing or altering records.\nAs with other injection-type attacks, like SQL injection, LDAP injection attacks are highly preventable through safer web application design and coding practices.\n\n### Best practices for prevention\n* Never pass user input directly to the LDAP query.\n* Sanitize all input prior to processing as appropriate for the particular input type.\n* Escape all LDAP specific characters, such as, `#,\",+, ;, <, >, \\` and null, replacing with ASCII hex values. However, do not rely solely on denylists or escaped characters for defense against LDAP injection attacks.\n* For tighter security, consider validating input against an allowlist (\"accept known good\") to ensure that only certain parameters can be passed.\n* Assume all user input is potentially malicious.\n* Adopt development frameworks that specifically provide protection against LDAP injection attacks.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/prestosql/presto/commit/629cc84dcbcfa52fe20992028163ab092b3fb47e?diff=split#diff-8572d1a5d8ecdb804a066cc869842e48L126",
                    "lines": [
                      {
                        "line": "@Override",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain nextFilter)",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throws IOException, ServletException",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // skip auth for http",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!servletRequest.isSecure()) {",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "        nextFilter.doFilter(servletRequest, servletResponse);",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return;",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "    HttpServletRequest request = (HttpServletRequest) servletRequest;",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "    HttpServletResponse response = (HttpServletResponse) servletResponse;",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "        String header = request.getHeader(AUTHORIZATION);",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "        List<String> credentials = getCredentials(header);",
                        "lineNumber": 139,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        Principal principal = authenticate(credentials.get(0), credentials.get(1));",
                        "lineNumber": 140,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        Credentials credentials = getCredentials(header);",
                        "lineNumber": 159,
                        "lineChange": "added"
                      },
                      {
                        "line": "        Principal principal = getPrincipal(credentials);",
                        "lineNumber": 160,
                        "lineChange": "added"
                      },
                      {
                        "line": "        // ldap authentication ok, continue",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "private static List<String> getCredentials(String header)",
                        "lineNumber": 167,
                        "lineChange": "removed"
                      },
                      {
                        "line": "private static Credentials getCredentials(String header)",
                        "lineNumber": 200,
                        "lineChange": "added"
                      },
                      {
                        "line": "        throws AuthenticationException",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (header == null) {",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throw new AuthenticationException(UNAUTHORIZED, \"Unauthorized\");",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!header.startsWith(BASIC_AUTHENTICATION_PREFIX)) {",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throw new AuthenticationException(BAD_REQUEST, \"Basic authentication is expected\");",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String base64EncodedCredentials = header.substring(BASIC_AUTHENTICATION_PREFIX.length());",
                        "lineNumber": 209,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String credentials = decodeCredentials(base64EncodedCredentials);",
                        "lineNumber": 210,
                        "lineChange": "none"
                      },
                      {
                        "line": "    List<String> parts = Splitter.on(':').limit(2).splitToList(credentials);",
                        "lineNumber": 211,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (parts.size() != 2 || parts.stream().anyMatch(String::isEmpty)) {",
                        "lineNumber": 212,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throw new AuthenticationException(BAD_REQUEST, \"Malformed decoded credentials\");",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return parts;",
                        "lineNumber": 182,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    return new Credentials(parts.get(0), parts.get(1));",
                        "lineNumber": 215,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "private static String decodeCredentials(String base64EncodedCredentials)",
                        "lineNumber": 218,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throws AuthenticationException",
                        "lineNumber": 219,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 220,
                        "lineChange": "none"
                      },
                      {
                        "line": "    byte[] bytes;",
                        "lineNumber": 221,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {",
                        "lineNumber": 222,
                        "lineChange": "none"
                      },
                      {
                        "line": "        bytes = Base64.getDecoder().decode(base64EncodedCredentials);",
                        "lineNumber": 223,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 224,
                        "lineChange": "none"
                      },
                      {
                        "line": "    catch (IllegalArgumentException e) {",
                        "lineNumber": 225,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throw new AuthenticationException(BAD_REQUEST, \"Invalid base64 encoded credentials\");",
                        "lineNumber": 226,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 227,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return new String(bytes, UTF_8);",
                        "lineNumber": 228,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 229,
                        "lineChange": "none"
                      },
                      {
                        "line": "private Principal authenticate(String user, String password)",
                        "lineNumber": 231,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throws AuthenticationException",
                        "lineNumber": 232,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 233,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Map<String, String> environment = createEnvironment(user, password);",
                        "lineNumber": 234,
                        "lineChange": "none"
                      },
                      {
                        "line": "    InitialDirContext context = null;",
                        "lineNumber": 235,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {",
                        "lineNumber": 236,
                        "lineChange": "none"
                      },
                      {
                        "line": "        context = createDirContext(environment);",
                        "lineNumber": 237,
                        "lineChange": "none"
                      },
                      {
                        "line": "        checkForGroupMembership(user, context);",
                        "lineNumber": 238,
                        "lineChange": "none"
                      },
                      {
                        "line": "        log.debug(\"Authentication successful for user %s\", user);",
                        "lineNumber": 240,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 255,
                        "lineChange": "none"
                      },
                      {
                        "line": "private Map<String, String> createEnvironment(String user, String password)",
                        "lineNumber": 257,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 258,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return ImmutableMap.<String, String>builder()",
                        "lineNumber": 259,
                        "lineChange": "none"
                      },
                      {
                        "line": "            .putAll(basicEnvironment)",
                        "lineNumber": 260,
                        "lineChange": "none"
                      },
                      {
                        "line": "            .put(SECURITY_AUTHENTICATION, \"simple\")",
                        "lineNumber": 261,
                        "lineChange": "none"
                      },
                      {
                        "line": "            .put(SECURITY_PRINCIPAL, createPrincipal(user))",
                        "lineNumber": 262,
                        "lineChange": "none"
                      },
                      {
                        "line": "            .put(SECURITY_CREDENTIALS, password)",
                        "lineNumber": 263,
                        "lineChange": "none"
                      },
                      {
                        "line": "            .build();",
                        "lineNumber": 264,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 265,
                        "lineChange": "none"
                      },
                      {
                        "line": "private String createPrincipal(String user)",
                        "lineNumber": 267,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 268,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return replaceUser(userBindSearchPattern, user);",
                        "lineNumber": 269,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 270,
                        "lineChange": "none"
                      },
                      {
                        "line": "private String replaceUser(String pattern, String user)",
                        "lineNumber": 272,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 273,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return pattern.replaceAll(\"\\\\$\\\\{USER\\\\}\", user);",
                        "lineNumber": 274,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 275,
                        "lineChange": "none"
                      },
                      {
                        "line": "private void checkForGroupMembership(String user, DirContext context)",
                        "lineNumber": 277,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throws AuthenticationException",
                        "lineNumber": 278,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 279,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 282,
                        "lineChange": "none"
                      },
                      {
                        "line": "String searchFilter = replaceUser(groupAuthorizationSearchPattern.get(), user);",
                        "lineNumber": 284,
                        "lineChange": "none"
                      },
                      {
                        "line": "SearchControls searchControls = new SearchControls();",
                        "lineNumber": 285,
                        "lineChange": "none"
                      },
                      {
                        "line": "searchControls.setSearchScope(SearchControls.SUBTREE_SCOPE);",
                        "lineNumber": 286,
                        "lineChange": "none"
                      },
                      {
                        "line": "NamingEnumeration<SearchResult> search = null;",
                        "lineNumber": 289,
                        "lineChange": "none"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 290,
                        "lineChange": "none"
                      },
                      {
                        "line": "    search = context.search(userBaseDistinguishedName.get(), searchFilter, searchControls);",
                        "lineNumber": 291,
                        "lineChange": "none"
                      },
                      {
                        "line": "    authorized = search.hasMoreElements();",
                        "lineNumber": 292,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 293,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/apache/tomcat/commit/527baba1736d3111596fb19dba367460fdb2808c?diff=split#diff-29108cbea09c507a81a1fba2d274bdb8L233",
                    "lines": [
                      {
                        "line": " * the lock-null resource.",
                        "lineNumber": 230,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 231,
                        "lineChange": "none"
                      },
                      {
                        "line": "private final Hashtable<String,Vector<String>> lockNullResources =",
                        "lineNumber": 232,
                        "lineChange": "none"
                      },
                      {
                        "line": "    new Hashtable<>();",
                        "lineNumber": 233,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 325,
                        "lineChange": "none"
                      },
                      {
                        "line": "@Override",
                        "lineNumber": 326,
                        "lineChange": "none"
                      },
                      {
                        "line": "protected void service(HttpServletRequest req, HttpServletResponse resp)",
                        "lineNumber": 327,
                        "lineChange": "none"
                      },
                      {
                        "line": "    throws ServletException, IOException {",
                        "lineNumber": 328,
                        "lineChange": "none"
                      },
                      {
                        "line": "    final String path = getRelativePath(req);",
                        "lineNumber": 330,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Block access to special subdirectories.",
                        "lineNumber": 332,
                        "lineChange": "none"
                      },
                      {
                        "line": "// WebdavServlet remounts the webapp under a new path, so this check is",
                        "lineNumber": 335,
                        "lineChange": "none"
                      },
                      {
                        "line": "// necessary on all methods (including GET).",
                        "lineNumber": 336,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (isSpecialPath(path)) {",
                        "lineNumber": 337,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resp.sendError(WebdavStatus.SC_NOT_FOUND);",
                        "lineNumber": 338,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return;",
                        "lineNumber": 339,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 340,
                        "lineChange": "none"
                      },
                      {
                        "line": "final String method = req.getMethod();",
                        "lineNumber": 342,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (debug > 0) {",
                        "lineNumber": 344,
                        "lineChange": "none"
                      },
                      {
                        "line": "    log(\"[\" + method + \"] \" + path);",
                        "lineNumber": 345,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 346,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (method.equals(METHOD_PROPFIND)) {",
                        "lineNumber": 348,
                        "lineChange": "none"
                      },
                      {
                        "line": "    doPropfind(req, resp);",
                        "lineNumber": 349,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else if (method.equals(METHOD_PROPPATCH)) {",
                        "lineNumber": 350,
                        "lineChange": "none"
                      },
                      {
                        "line": "    doProppatch(req, resp);",
                        "lineNumber": 351,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else if (method.equals(METHOD_MKCOL)) {",
                        "lineNumber": 352,
                        "lineChange": "none"
                      },
                      {
                        "line": "    doMkcol(req, resp);",
                        "lineNumber": 353,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else if (method.equals(METHOD_COPY)) {",
                        "lineNumber": 354,
                        "lineChange": "none"
                      },
                      {
                        "line": "    doCopy(req, resp);",
                        "lineNumber": 355,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else if (method.equals(METHOD_MOVE)) {",
                        "lineNumber": 356,
                        "lineChange": "none"
                      },
                      {
                        "line": "    doMove(req, resp);",
                        "lineNumber": 357,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else if (method.equals(METHOD_LOCK)) {",
                        "lineNumber": 358,
                        "lineChange": "none"
                      },
                      {
                        "line": "    doLock(req, resp);",
                        "lineNumber": 359,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else if (method.equals(METHOD_UNLOCK)) {",
                        "lineNumber": 360,
                        "lineChange": "none"
                      },
                      {
                        "line": "    doUnlock(req, resp);",
                        "lineNumber": 361,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 362,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // DefaultServlet processing",
                        "lineNumber": 363,
                        "lineChange": "none"
                      },
                      {
                        "line": " * @return <code>true</code> if the resource specified is under a special path",
                        "lineNumber": 374,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 375,
                        "lineChange": "none"
                      },
                      {
                        "line": "private final boolean isSpecialPath(final String path) {",
                        "lineNumber": 376,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return !allowSpecialPaths && (",
                        "lineNumber": 377,
                        "lineChange": "none"
                      },
                      {
                        "line": "            path.toUpperCase(Locale.ENGLISH).startsWith(\"/WEB-INF\") ||",
                        "lineNumber": 378,
                        "lineChange": "none"
                      },
                      {
                        "line": "            path.toUpperCase(Locale.ENGLISH).startsWith(\"/META-INF\"));",
                        "lineNumber": 379,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 380,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 416,
                        "lineChange": "none"
                      },
                      {
                        "line": "@Override",
                        "lineNumber": 417,
                        "lineChange": "none"
                      },
                      {
                        "line": "protected String getRelativePath(HttpServletRequest request) {",
                        "lineNumber": 418,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Are we being processed by a RequestDispatcher.include()?",
                        "lineNumber": 419,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (request.getAttribute(",
                        "lineNumber": 420,
                        "lineChange": "none"
                      },
                      {
                        "line": "            RequestDispatcher.INCLUDE_REQUEST_URI) != null) {",
                        "lineNumber": 421,
                        "lineChange": "none"
                      },
                      {
                        "line": "        String result = (String) request.getAttribute(",
                        "lineNumber": 422,
                        "lineChange": "none"
                      },
                      {
                        "line": "                RequestDispatcher.INCLUDE_PATH_INFO);",
                        "lineNumber": 423,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if ((result == null) || (result.equals(\"\")))",
                        "lineNumber": 424,
                        "lineChange": "none"
                      },
                      {
                        "line": "            result = \"/\";",
                        "lineNumber": 425,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return (result);",
                        "lineNumber": 426,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 427,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // No, extract the desired path directly from the request",
                        "lineNumber": 429,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String result = request.getPathInfo();",
                        "lineNumber": 430,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if ((result == null) || (result.equals(\"\"))) {",
                        "lineNumber": 431,
                        "lineChange": "none"
                      },
                      {
                        "line": "        result = \"/\";",
                        "lineNumber": 432,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 433,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return (result);",
                        "lineNumber": 434,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 436,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 460,
                        "lineChange": "none"
                      },
                      {
                        "line": "@Override",
                        "lineNumber": 461,
                        "lineChange": "none"
                      },
                      {
                        "line": "protected void doOptions(HttpServletRequest req, HttpServletResponse resp)",
                        "lineNumber": 462,
                        "lineChange": "none"
                      },
                      {
                        "line": "    throws ServletException, IOException {",
                        "lineNumber": 463,
                        "lineChange": "none"
                      },
                      {
                        "line": "     resp.addHeader(\"DAV\", \"1,2\");",
                        "lineNumber": 465,
                        "lineChange": "none"
                      },
                      {
                        "line": "    StringBuilder methodsAllowed = determineMethodsAllowed(resources,",
                        "lineNumber": 467,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                                                          req);",
                        "lineNumber": 468,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    StringBuilder methodsAllowed = determineMethodsAllowed(req);",
                        "lineNumber": 443,
                        "lineChange": "added"
                      },
                      {
                        "line": "    resp.addHeader(\"Allow\", methodsAllowed.toString());",
                        "lineNumber": 470,
                        "lineChange": "none"
                      },
                      {
                        "line": " * PROPFIND Method.",
                        "lineNumber": 477,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 478,
                        "lineChange": "none"
                      },
                      {
                        "line": "protected void doPropfind(HttpServletRequest req, HttpServletResponse resp)",
                        "lineNumber": 479,
                        "lineChange": "none"
                      },
                      {
                        "line": "    throws ServletException, IOException {",
                        "lineNumber": 480,
                        "lineChange": "none"
                      },
                      {
                        "line": "     if (!listings) {",
                        "lineNumber": 482,
                        "lineChange": "none"
                      },
                      {
                        "line": "        // Get allowed methods",
                        "lineNumber": 483,
                        "lineChange": "none"
                      },
                      {
                        "line": "        StringBuilder methodsAllowed = determineMethodsAllowed(resources,",
                        "lineNumber": 484,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                                                              req);",
                        "lineNumber": 485,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        StringBuilder methodsAllowed = determineMethodsAllowed(req);",
                        "lineNumber": 458,
                        "lineChange": "added"
                      },
                      {
                        "line": "        resp.addHeader(\"Allow\", methodsAllowed.toString());",
                        "lineNumber": 487,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 490,
                        "lineChange": "none"
                      },
                      {
                        "line": "String path = getRelativePath(req);",
                        "lineNumber": 492,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (path.endsWith(\"/\"))",
                        "lineNumber": 493,
                        "lineChange": "none"
                      },
                      {
                        "line": "    path = path.substring(0, path.length() - 1);",
                        "lineNumber": 494,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Properties which are to be displayed.",
                        "lineNumber": 496,
                        "lineChange": "none"
                      },
                      {
                        "line": "int type = FIND_ALL_PROP;",
                        "lineNumber": 501,
                        "lineChange": "none"
                      },
                      {
                        "line": "String depthStr = req.getHeader(\"Depth\");",
                        "lineNumber": 503,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (depthStr == null) {",
                        "lineNumber": 505,
                        "lineChange": "none"
                      },
                      {
                        "line": "Node propNode = null;",
                        "lineNumber": 517,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (req.getContentLength() > 0) {",
                        "lineNumber": 519,
                        "lineChange": "none"
                      },
                      {
                        "line": "    DocumentBuilder documentBuilder = getDocumentBuilder();",
                        "lineNumber": 520,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {",
                        "lineNumber": 522,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Document document = documentBuilder.parse",
                        "lineNumber": 523,
                        "lineChange": "none"
                      },
                      {
                        "line": "            (new InputSource(req.getInputStream()));",
                        "lineNumber": 524,
                        "lineChange": "none"
                      },
                      {
                        "line": "        // Get the root element of the document",
                        "lineNumber": 526,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 584,
                        "lineChange": "none"
                      },
                      {
                        "line": "Object object = null;",
                        "lineNumber": 587,
                        "lineChange": "removed"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 588,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    object = resources.lookup(path);",
                        "lineNumber": 589,
                        "lineChange": "removed"
                      },
                      {
                        "line": "} catch (NamingException e) {",
                        "lineNumber": 590,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    exists = false;",
                        "lineNumber": 591,
                        "lineChange": "removed"
                      },
                      {
                        "line": "WebResource resource = resources.getResource(path);",
                        "lineNumber": 559,
                        "lineChange": "added"
                      },
                      {
                        "line": "if (!resource.exists()) {",
                        "lineNumber": 561,
                        "lineChange": "added"
                      },
                      {
                        "line": "    int slash = path.lastIndexOf('/');",
                        "lineNumber": 592,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (slash != -1) {",
                        "lineNumber": 593,
                        "lineChange": "none"
                      },
                      {
                        "line": "        String parentPath = path.substring(0, slash);",
                        "lineNumber": 594,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Vector<String> currentLockNullResources =",
                        "lineNumber": 595,
                        "lineChange": "none"
                      },
                      {
                        "line": "            lockNullResources.get(parentPath);",
                        "lineNumber": 596,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (currentLockNullResources != null) {",
                        "lineNumber": 597,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Enumeration<String> lockNullResourcesList =",
                        "lineNumber": 598,
                        "lineChange": "none"
                      },
                      {
                        "line": "                currentLockNullResources.elements();",
                        "lineNumber": 599,
                        "lineChange": "none"
                      },
                      {
                        "line": "            while (lockNullResourcesList.hasMoreElements()) {",
                        "lineNumber": 600,
                        "lineChange": "none"
                      },
                      {
                        "line": "                String lockNullPath =",
                        "lineNumber": 601,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    lockNullResourcesList.nextElement();",
                        "lineNumber": 602,
                        "lineChange": "none"
                      },
                      {
                        "line": "                if (lockNullPath.equals(path)) {",
                        "lineNumber": 603,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    resp.setStatus(WebdavStatus.SC_MULTI_STATUS);",
                        "lineNumber": 604,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    resp.setContentType(\"text/xml; charset=UTF-8\");",
                        "lineNumber": 605,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"multistatus\", XMLWriter.OPENING);",
                        "lineNumber": 611,
                        "lineChange": "none"
                      },
                      {
                        "line": "parseLockNullProperties",
                        "lineNumber": 612,
                        "lineChange": "none"
                      },
                      {
                        "line": "    (req, generatedXML, lockNullPath, type,",
                        "lineNumber": 613,
                        "lineChange": "none"
                      },
                      {
                        "line": "     properties);",
                        "lineNumber": 614,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeElement(\"D\", \"multistatus\",",
                        "lineNumber": 615,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (!exists) {",
                        "lineNumber": 625,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if (!resource.exists()) {",
                        "lineNumber": 595,
                        "lineChange": "added"
                      },
                      {
                        "line": "    resp.sendError(HttpServletResponse.SC_NOT_FOUND, path);",
                        "lineNumber": 626,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return;",
                        "lineNumber": 627,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 628,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (depth == 0) {",
                        "lineNumber": 641,
                        "lineChange": "none"
                      },
                      {
                        "line": "    parseProperties(req, generatedXML, path, type,",
                        "lineNumber": 642,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    properties);",
                        "lineNumber": 643,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 644,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // The stack always contains the object of the current level",
                        "lineNumber": 645,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Stack<String> stack = new Stack<>();",
                        "lineNumber": 646,
                        "lineChange": "none"
                      },
                      {
                        "line": "    stack.push(path);",
                        "lineNumber": 647,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Stack of the objects one level below",
                        "lineNumber": 649,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Stack<String> stackBelow = new Stack<>();",
                        "lineNumber": 650,
                        "lineChange": "none"
                      },
                      {
                        "line": "    while ((!stack.isEmpty()) && (depth >= 0)) {",
                        "lineNumber": 652,
                        "lineChange": "none"
                      },
                      {
                        "line": "        String currentPath = stack.pop();",
                        "lineNumber": 654,
                        "lineChange": "none"
                      },
                      {
                        "line": "        parseProperties(req, generatedXML, currentPath,",
                        "lineNumber": 655,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        type, properties);",
                        "lineNumber": 656,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try {",
                        "lineNumber": 658,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            object = resources.lookup(currentPath);",
                        "lineNumber": 659,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        } catch (NamingException e) {",
                        "lineNumber": 660,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            continue;",
                        "lineNumber": 661,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        resource = resources.getResource(currentPath);",
                        "lineNumber": 628,
                        "lineChange": "added"
                      },
                      {
                        "line": "if (resource.isDirectory() && (depth > 0)) {",
                        "lineNumber": 630,
                        "lineChange": "added"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 666,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    NamingEnumeration<NameClassPair> enumeration =",
                        "lineNumber": 667,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        resources.list(currentPath);",
                        "lineNumber": 668,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    while (enumeration.hasMoreElements()) {",
                        "lineNumber": 669,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        NameClassPair ncPair = enumeration.nextElement();",
                        "lineNumber": 670,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        String newPath = currentPath;",
                        "lineNumber": 671,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        if (!(newPath.endsWith(\"/\")))",
                        "lineNumber": 672,
                        "lineChange": "removed"
                      },
                      {
                        "line": "String[] entries = resources.list(currentPath);",
                        "lineNumber": 632,
                        "lineChange": "added"
                      },
                      {
                        "line": "for (String entry : entries) {",
                        "lineNumber": 633,
                        "lineChange": "added"
                      },
                      {
                        "line": "    String newPath = currentPath;",
                        "lineNumber": 634,
                        "lineChange": "added"
                      },
                      {
                        "line": "    if (!(newPath.endsWith(\"/\")))",
                        "lineNumber": 635,
                        "lineChange": "added"
                      },
                      {
                        "line": "            newPath += \"/\";",
                        "lineNumber": 673,
                        "lineChange": "none"
                      },
                      {
                        "line": "        newPath += ncPair.getName();",
                        "lineNumber": 674,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        stackBelow.push(newPath);",
                        "lineNumber": 675,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 676,
                        "lineChange": "removed"
                      },
                      {
                        "line": "} catch (NamingException e) {",
                        "lineNumber": 677,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    resp.sendError",
                        "lineNumber": 678,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        (HttpServletResponse.SC_INTERNAL_SERVER_ERROR,",
                        "lineNumber": 679,
                        "lineChange": "removed"
                      },
                      {
                        "line": "         path);",
                        "lineNumber": 680,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    return;",
                        "lineNumber": 681,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    newPath += entry;",
                        "lineNumber": 637,
                        "lineChange": "added"
                      },
                      {
                        "line": "    stackBelow.push(newPath);",
                        "lineNumber": 638,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 682,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Displaying the lock-null resources present in that",
                        "lineNumber": 684,
                        "lineChange": "none"
                      },
                      {
                        "line": "// collection",
                        "lineNumber": 685,
                        "lineChange": "none"
                      },
                      {
                        "line": "String lockPath = currentPath;",
                        "lineNumber": 686,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (lockPath.endsWith(\"/\"))",
                        "lineNumber": 687,
                        "lineChange": "none"
                      },
                      {
                        "line": "    lockPath =",
                        "lineNumber": 688,
                        "lineChange": "none"
                      },
                      {
                        "line": "        lockPath.substring(0, lockPath.length() - 1);",
                        "lineNumber": 689,
                        "lineChange": "none"
                      },
                      {
                        "line": "Vector<String> currentLockNullResources =",
                        "lineNumber": 690,
                        "lineChange": "none"
                      },
                      {
                        "line": "    lockNullResources.get(lockPath);",
                        "lineNumber": 691,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (currentLockNullResources != null) {",
                        "lineNumber": 692,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Enumeration<String> lockNullResourcesList =",
                        "lineNumber": 693,
                        "lineChange": "none"
                      },
                      {
                        "line": "        currentLockNullResources.elements();",
                        "lineNumber": 694,
                        "lineChange": "none"
                      },
                      {
                        "line": "    while (lockNullResourcesList.hasMoreElements()) {",
                        "lineNumber": 695,
                        "lineChange": "none"
                      },
                      {
                        "line": "        String lockNullPath =",
                        "lineNumber": 696,
                        "lineChange": "none"
                      },
                      {
                        "line": "            lockNullResourcesList.nextElement();",
                        "lineNumber": 697,
                        "lineChange": "none"
                      },
                      {
                        "line": "        parseLockNullProperties",
                        "lineNumber": 698,
                        "lineChange": "none"
                      },
                      {
                        "line": "            (req, generatedXML, lockNullPath, type,",
                        "lineNumber": 699,
                        "lineChange": "none"
                      },
                      {
                        "line": "             properties);",
                        "lineNumber": 700,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 701,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 704,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (stack.isEmpty()) {",
                        "lineNumber": 706,
                        "lineChange": "none"
                      },
                      {
                        "line": "    depth--;",
                        "lineNumber": 707,
                        "lineChange": "none"
                      },
                      {
                        "line": "    stack = stackBelow;",
                        "lineNumber": 708,
                        "lineChange": "none"
                      },
                      {
                        "line": "    stackBelow = new Stack<>();",
                        "lineNumber": 709,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 710,
                        "lineChange": "none"
                      },
                      {
                        "line": " * PROPPATCH Method.",
                        "lineNumber": 725,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 726,
                        "lineChange": "none"
                      },
                      {
                        "line": "protected void doProppatch(HttpServletRequest req, HttpServletResponse resp)",
                        "lineNumber": 727,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throws IOException {",
                        "lineNumber": 728,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 733,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (isLocked(req)) {",
                        "lineNumber": 735,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resp.sendError(WebdavStatus.SC_LOCKED);",
                        "lineNumber": 736,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return;",
                        "lineNumber": 737,
                        "lineChange": "none"
                      },
                      {
                        "line": " * MKCOL Method.",
                        "lineNumber": 746,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 747,
                        "lineChange": "none"
                      },
                      {
                        "line": "protected void doMkcol(HttpServletRequest req, HttpServletResponse resp)",
                        "lineNumber": 748,
                        "lineChange": "none"
                      },
                      {
                        "line": "    throws ServletException, IOException {",
                        "lineNumber": 749,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 754,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (isLocked(req)) {",
                        "lineNumber": 756,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resp.sendError(WebdavStatus.SC_LOCKED);",
                        "lineNumber": 757,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return;",
                        "lineNumber": 758,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 759,
                        "lineChange": "none"
                      },
                      {
                        "line": "String path = getRelativePath(req);",
                        "lineNumber": 761,
                        "lineChange": "none"
                      },
                      {
                        "line": "boolean exists = true;",
                        "lineNumber": 763,
                        "lineChange": "removed"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 764,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    resources.lookup(path);",
                        "lineNumber": 765,
                        "lineChange": "removed"
                      },
                      {
                        "line": "} catch (NamingException e) {",
                        "lineNumber": 766,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    exists = false;",
                        "lineNumber": 767,
                        "lineChange": "removed"
                      },
                      {
                        "line": "WebResource resource = resources.getResource(path);",
                        "lineNumber": 720,
                        "lineChange": "added"
                      },
                      {
                        "line": "// Can't create a collection if a resource already exists at the given",
                        "lineNumber": 770,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (exists) {",
                        "lineNumber": 772,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if (resource.exists()) {",
                        "lineNumber": 724,
                        "lineChange": "added"
                      },
                      {
                        "line": "    // Get allowed methods",
                        "lineNumber": 773,
                        "lineChange": "none"
                      },
                      {
                        "line": "    StringBuilder methodsAllowed = determineMethodsAllowed(resources,",
                        "lineNumber": 774,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                                                          req);",
                        "lineNumber": 775,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    StringBuilder methodsAllowed = determineMethodsAllowed(req);",
                        "lineNumber": 726,
                        "lineChange": "added"
                      },
                      {
                        "line": "    resp.addHeader(\"Allow\", methodsAllowed.toString());",
                        "lineNumber": 777,
                        "lineChange": "none"
                      },
                      {
                        "line": " }",
                        "lineNumber": 797,
                        "lineChange": "none"
                      },
                      {
                        "line": "boolean result = true;",
                        "lineNumber": 799,
                        "lineChange": "removed"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 800,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    resources.createSubcontext(path);",
                        "lineNumber": 801,
                        "lineChange": "removed"
                      },
                      {
                        "line": "} catch (NamingException e) {",
                        "lineNumber": 802,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    result = false;",
                        "lineNumber": 803,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if (resources.mkdir(path)) {",
                        "lineNumber": 750,
                        "lineChange": "added"
                      },
                      {
                        "line": "    resp.setStatus(WebdavStatus.SC_CREATED);",
                        "lineNumber": 811,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Removing any lock-null resource which would be present",
                        "lineNumber": 812,
                        "lineChange": "none"
                      },
                      {
                        "line": "    lockNullResources.remove(path);",
                        "lineNumber": 813,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 754,
                        "lineChange": "added"
                      },
                      {
                        "line": "    resp.sendError(WebdavStatus.SC_CONFLICT,",
                        "lineNumber": 755,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 814,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 821,
                        "lineChange": "none"
                      },
                      {
                        "line": "@Override",
                        "lineNumber": 822,
                        "lineChange": "none"
                      },
                      {
                        "line": "protected void doDelete(HttpServletRequest req, HttpServletResponse resp)",
                        "lineNumber": 823,
                        "lineChange": "none"
                      },
                      {
                        "line": "    throws ServletException, IOException {",
                        "lineNumber": 824,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 829,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (isLocked(req)) {",
                        "lineNumber": 831,
                        "lineChange": "none"
                      },
                      {
                        "line": "        resp.sendError(WebdavStatus.SC_LOCKED);",
                        "lineNumber": 832,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return;",
                        "lineNumber": 833,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 834,
                        "lineChange": "none"
                      },
                      {
                        "line": "    deleteResource(req, resp);",
                        "lineNumber": 836,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 838,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 849,
                        "lineChange": "none"
                      },
                      {
                        "line": "@Override",
                        "lineNumber": 850,
                        "lineChange": "none"
                      },
                      {
                        "line": "protected void doPut(HttpServletRequest req, HttpServletResponse resp)",
                        "lineNumber": 851,
                        "lineChange": "none"
                      },
                      {
                        "line": "    throws ServletException, IOException {",
                        "lineNumber": 852,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (isLocked(req)) {",
                        "lineNumber": 854,
                        "lineChange": "none"
                      },
                      {
                        "line": "        resp.sendError(WebdavStatus.SC_LOCKED);",
                        "lineNumber": 855,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return;",
                        "lineNumber": 856,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 857,
                        "lineChange": "none"
                      },
                      {
                        "line": "    super.doPut(req, resp);",
                        "lineNumber": 859,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String path = getRelativePath(req);",
                        "lineNumber": 861,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Removing any lock-null resource which would be present",
                        "lineNumber": 863,
                        "lineChange": "none"
                      },
                      {
                        "line": "    lockNullResources.remove(path);",
                        "lineNumber": 864,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 866,
                        "lineChange": "none"
                      },
                      {
                        "line": " * COPY Method.",
                        "lineNumber": 869,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 870,
                        "lineChange": "none"
                      },
                      {
                        "line": "protected void doCopy(HttpServletRequest req, HttpServletResponse resp)",
                        "lineNumber": 871,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throws IOException {",
                        "lineNumber": 872,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 877,
                        "lineChange": "none"
                      },
                      {
                        "line": "    copyResource(req, resp);",
                        "lineNumber": 879,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 881,
                        "lineChange": "none"
                      },
                      {
                        "line": " * MOVE Method.",
                        "lineNumber": 885,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 886,
                        "lineChange": "none"
                      },
                      {
                        "line": "protected void doMove(HttpServletRequest req, HttpServletResponse resp)",
                        "lineNumber": 887,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throws IOException {",
                        "lineNumber": 888,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 893,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (isLocked(req)) {",
                        "lineNumber": 895,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resp.sendError(WebdavStatus.SC_LOCKED);",
                        "lineNumber": 896,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return;",
                        "lineNumber": 897,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 898,
                        "lineChange": "none"
                      },
                      {
                        "line": "String path = getRelativePath(req);",
                        "lineNumber": 900,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (copyResource(req, resp)) {",
                        "lineNumber": 902,
                        "lineChange": "none"
                      },
                      {
                        "line": "    deleteResource(path, req, resp, false);",
                        "lineNumber": 903,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 904,
                        "lineChange": "none"
                      },
                      {
                        "line": " * LOCK Method.",
                        "lineNumber": 910,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 911,
                        "lineChange": "none"
                      },
                      {
                        "line": "protected void doLock(HttpServletRequest req, HttpServletResponse resp)",
                        "lineNumber": 912,
                        "lineChange": "none"
                      },
                      {
                        "line": "    throws ServletException, IOException {",
                        "lineNumber": 913,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 918,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (isLocked(req)) {",
                        "lineNumber": 920,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resp.sendError(WebdavStatus.SC_LOCKED);",
                        "lineNumber": 921,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return;",
                        "lineNumber": 922,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Parsing depth header",
                        "lineNumber": 929,
                        "lineChange": "none"
                      },
                      {
                        "line": "String depthStr = req.getHeader(\"Depth\");",
                        "lineNumber": 931,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (depthStr == null) {",
                        "lineNumber": 933,
                        "lineChange": "none"
                      },
                      {
                        "line": "int lockDuration = DEFAULT_TIMEOUT;",
                        "lineNumber": 945,
                        "lineChange": "none"
                      },
                      {
                        "line": "String lockDurationStr = req.getHeader(\"Timeout\");",
                        "lineNumber": 946,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (lockDurationStr == null) {",
                        "lineNumber": 947,
                        "lineChange": "none"
                      },
                      {
                        "line": "    lockDuration = DEFAULT_TIMEOUT;",
                        "lineNumber": 948,
                        "lineChange": "none"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 985,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Document document = documentBuilder.parse(new InputSource",
                        "lineNumber": 986,
                        "lineChange": "none"
                      },
                      {
                        "line": "        (req.getInputStream()));",
                        "lineNumber": 987,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Get the root element of the document",
                        "lineNumber": 989,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1117,
                        "lineChange": "none"
                      },
                      {
                        "line": "String path = getRelativePath(req);",
                        "lineNumber": 1119,
                        "lineChange": "none"
                      },
                      {
                        "line": "lock.path = path;",
                        "lineNumber": 1121,
                        "lineChange": "none"
                      },
                      {
                        "line": "Object object = null;",
                        "lineNumber": 1124,
                        "lineChange": "removed"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 1125,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    object = resources.lookup(path);",
                        "lineNumber": 1126,
                        "lineChange": "removed"
                      },
                      {
                        "line": "} catch (NamingException e) {",
                        "lineNumber": 1127,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    exists = false;",
                        "lineNumber": 1128,
                        "lineChange": "removed"
                      },
                      {
                        "line": "WebResource resource = resources.getResource(path);",
                        "lineNumber": 1066,
                        "lineChange": "added"
                      },
                      {
                        "line": "Enumeration<LockInfo> locksList = null;",
                        "lineNumber": 1131,
                        "lineChange": "none"
                      },
                      {
                        "line": "    continue;",
                        "lineNumber": 1157,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1158,
                        "lineChange": "none"
                      },
                      {
                        "line": "if ( (currentLock.path.startsWith(lock.path)) &&",
                        "lineNumber": 1159,
                        "lineChange": "none"
                      },
                      {
                        "line": "     ((currentLock.isExclusive()) ||",
                        "lineNumber": 1160,
                        "lineChange": "none"
                      },
                      {
                        "line": "      (lock.isExclusive())) ) {",
                        "lineNumber": 1161,
                        "lineChange": "none"
                      },
                      {
                        "line": "    continue;",
                        "lineNumber": 1171,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1172,
                        "lineChange": "none"
                      },
                      {
                        "line": "if ( (currentLock.path.startsWith(lock.path)) &&",
                        "lineNumber": 1173,
                        "lineChange": "none"
                      },
                      {
                        "line": "     ((currentLock.isExclusive()) ||",
                        "lineNumber": 1174,
                        "lineChange": "none"
                      },
                      {
                        "line": "      (lock.isExclusive())) ) {",
                        "lineNumber": 1175,
                        "lineChange": "none"
                      },
                      {
                        "line": "LockInfo currentLock = locksList.nextElement();",
                        "lineNumber": 1234,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (currentLock.path.equals(lock.path)) {",
                        "lineNumber": 1235,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (currentLock.isExclusive()) {",
                        "lineNumber": 1237,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Retrieving an already existing lock on that resource",
                        "lineNumber": 1264,
                        "lineChange": "none"
                      },
                      {
                        "line": "LockInfo presentLock = resourceLocks.get(lock.path);",
                        "lineNumber": 1265,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (presentLock != null) {",
                        "lineNumber": 1266,
                        "lineChange": "none"
                      },
                      {
                        "line": "lock.tokens.addElement(lockToken);",
                        "lineNumber": 1280,
                        "lineChange": "none"
                      },
                      {
                        "line": "resourceLocks.put(lock.path, lock);",
                        "lineNumber": 1281,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Checking if a resource exists at this path",
                        "lineNumber": 1283,
                        "lineChange": "none"
                      },
                      {
                        "line": "exists = true;",
                        "lineNumber": 1284,
                        "lineChange": "removed"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 1285,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    object = resources.lookup(path);",
                        "lineNumber": 1286,
                        "lineChange": "removed"
                      },
                      {
                        "line": "} catch (NamingException e) {",
                        "lineNumber": 1287,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    exists = false;",
                        "lineNumber": 1288,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    // \"Creating\" a lock-null resource",
                        "lineNumber": 1292,
                        "lineChange": "none"
                      },
                      {
                        "line": "    int slash = lock.path.lastIndexOf('/');",
                        "lineNumber": 1293,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String parentPath = lock.path.substring(0, slash);",
                        "lineNumber": 1294,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Vector<String> lockNulls =",
                        "lineNumber": 1296,
                        "lineChange": "none"
                      },
                      {
                        "line": "        lockNullResources.get(parentPath);",
                        "lineNumber": 1297,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (lockNulls == null) {",
                        "lineNumber": 1298,
                        "lineChange": "none"
                      },
                      {
                        "line": "        lockNulls = new Vector<>();",
                        "lineNumber": 1299,
                        "lineChange": "none"
                      },
                      {
                        "line": "        lockNullResources.put(parentPath, lockNulls);",
                        "lineNumber": 1300,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 1301,
                        "lineChange": "none"
                      },
                      {
                        "line": "    lockNulls.addElement(lock.path);",
                        "lineNumber": 1303,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1305,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Checking resource locks",
                        "lineNumber": 1322,
                        "lineChange": "none"
                      },
                      {
                        "line": "LockInfo toRenew = resourceLocks.get(path);",
                        "lineNumber": 1324,
                        "lineChange": "none"
                      },
                      {
                        "line": "Enumeration<String> tokenList = null;",
                        "lineNumber": 1325,
                        "lineChange": "none"
                      },
                      {
                        "line": "while (collectionLocksList.hasMoreElements()) {",
                        "lineNumber": 1343,
                        "lineChange": "none"
                      },
                      {
                        "line": "    toRenew = collectionLocksList.nextElement();",
                        "lineNumber": 1344,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (path.equals(toRenew.path)) {",
                        "lineNumber": 1345,
                        "lineChange": "none"
                      },
                      {
                        "line": "        tokenList = toRenew.tokens.elements();",
                        "lineNumber": 1347,
                        "lineChange": "none"
                      },
                      {
                        "line": " * UNLOCK Method.",
                        "lineNumber": 1386,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 1387,
                        "lineChange": "none"
                      },
                      {
                        "line": "protected void doUnlock(HttpServletRequest req, HttpServletResponse resp)",
                        "lineNumber": 1388,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throws IOException {",
                        "lineNumber": 1389,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1394,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (isLocked(req)) {",
                        "lineNumber": 1396,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resp.sendError(WebdavStatus.SC_LOCKED);",
                        "lineNumber": 1397,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return;",
                        "lineNumber": 1398,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1399,
                        "lineChange": "none"
                      },
                      {
                        "line": "String path = getRelativePath(req);",
                        "lineNumber": 1401,
                        "lineChange": "none"
                      },
                      {
                        "line": "String lockTokenHeader = req.getHeader(\"Lock-Token\");",
                        "lineNumber": 1403,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Checking resource locks",
                        "lineNumber": 1407,
                        "lineChange": "none"
                      },
                      {
                        "line": "LockInfo lock = resourceLocks.get(path);",
                        "lineNumber": 1409,
                        "lineChange": "none"
                      },
                      {
                        "line": "Enumeration<String> tokenList = null;",
                        "lineNumber": 1410,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (lock != null) {",
                        "lineNumber": 1411,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (lock.tokens.isEmpty()) {",
                        "lineNumber": 1423,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resourceLocks.remove(path);",
                        "lineNumber": 1424,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Removing any lock-null resource which would be present",
                        "lineNumber": 1425,
                        "lineChange": "none"
                      },
                      {
                        "line": "    lockNullResources.remove(path);",
                        "lineNumber": 1426,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1427,
                        "lineChange": "none"
                      },
                      {
                        "line": "while (collectionLocksList.hasMoreElements()) {",
                        "lineNumber": 1434,
                        "lineChange": "none"
                      },
                      {
                        "line": "    lock = collectionLocksList.nextElement();",
                        "lineNumber": 1435,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (path.equals(lock.path)) {",
                        "lineNumber": 1436,
                        "lineChange": "none"
                      },
                      {
                        "line": "        tokenList = lock.tokens.elements();",
                        "lineNumber": 1438,
                        "lineChange": "none"
                      },
                      {
                        "line": "    collectionLocks.removeElement(lock);",
                        "lineNumber": 1448,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Removing any lock-null resource which would be present",
                        "lineNumber": 1449,
                        "lineChange": "none"
                      },
                      {
                        "line": "    lockNullResources.remove(path);",
                        "lineNumber": 1450,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1451,
                        "lineChange": "none"
                      },
                      {
                        "line": " * are present on the resource).",
                        "lineNumber": 1470,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 1471,
                        "lineChange": "none"
                      },
                      {
                        "line": "private boolean isLocked(HttpServletRequest req) {",
                        "lineNumber": 1472,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String path = getRelativePath(req);",
                        "lineNumber": 1474,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String ifHeader = req.getHeader(\"If\");",
                        "lineNumber": 1476,
                        "lineChange": "none"
                      },
                      {
                        "line": "        lockTokenHeader = \"\";",
                        "lineNumber": 1482,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return isLocked(path, ifHeader + lockTokenHeader);",
                        "lineNumber": 1484,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1486,
                        "lineChange": "none"
                      },
                      {
                        "line": " * are present on the resource).",
                        "lineNumber": 1496,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 1497,
                        "lineChange": "none"
                      },
                      {
                        "line": "private boolean isLocked(String path, String ifHeader) {",
                        "lineNumber": 1498,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Checking resource locks",
                        "lineNumber": 1500,
                        "lineChange": "none"
                      },
                      {
                        "line": "    LockInfo lock = resourceLocks.get(path);",
                        "lineNumber": 1502,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Enumeration<String> tokenList = null;",
                        "lineNumber": 1503,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if ((lock != null) && (lock.hasExpired())) {",
                        "lineNumber": 1504,
                        "lineChange": "none"
                      },
                      {
                        "line": "        resourceLocks.remove(path);",
                        "lineNumber": 1505,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else if (lock != null) {",
                        "lineNumber": 1506,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (lock.hasExpired()) {",
                        "lineNumber": 1527,
                        "lineChange": "none"
                      },
                      {
                        "line": "    collectionLocks.removeElement(lock);",
                        "lineNumber": 1528,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else if (path.startsWith(lock.path)) {",
                        "lineNumber": 1529,
                        "lineChange": "none"
                      },
                      {
                        "line": "    tokenList = lock.tokens.elements();",
                        "lineNumber": 1531,
                        "lineChange": "none"
                      },
                      {
                        "line": " * @return boolean true if the copy is successful",
                        "lineNumber": 1554,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 1555,
                        "lineChange": "none"
                      },
                      {
                        "line": "private boolean copyResource(HttpServletRequest req,",
                        "lineNumber": 1556,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             HttpServletResponse resp)",
                        "lineNumber": 1557,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throws IOException {",
                        "lineNumber": 1558,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Parsing destination header",
                        "lineNumber": 1560,
                        "lineChange": "none"
                      },
                      {
                        "line": "String destinationPath = req.getHeader(\"Destination\");",
                        "lineNumber": 1562,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (destinationPath == null) {",
                        "lineNumber": 1564,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resp.sendError(WebdavStatus.SC_BAD_REQUEST);",
                        "lineNumber": 1565,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return false;",
                        "lineNumber": 1566,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Remove url encoding from destination",
                        "lineNumber": 1569,
                        "lineChange": "none"
                      },
                      {
                        "line": "destinationPath = org.apache.catalina.util.RequestUtil.URLDecode(",
                        "lineNumber": 1570,
                        "lineChange": "none"
                      },
                      {
                        "line": "        destinationPath, \"UTF8\");",
                        "lineNumber": 1571,
                        "lineChange": "none"
                      },
                      {
                        "line": "int protocolIndex = destinationPath.indexOf(\"://\");",
                        "lineNumber": 1573,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (protocolIndex >= 0) {",
                        "lineNumber": 1574,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // if the Destination URL contains the protocol, we can safely",
                        "lineNumber": 1575,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // trim everything upto the first \"/\" character after \"://\"",
                        "lineNumber": 1576,
                        "lineChange": "none"
                      },
                      {
                        "line": "    int firstSeparator =",
                        "lineNumber": 1577,
                        "lineChange": "none"
                      },
                      {
                        "line": "        destinationPath.indexOf(\"/\", protocolIndex + 4);",
                        "lineNumber": 1578,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (firstSeparator < 0) {",
                        "lineNumber": 1579,
                        "lineChange": "none"
                      },
                      {
                        "line": "        destinationPath = \"/\";",
                        "lineNumber": 1580,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {",
                        "lineNumber": 1581,
                        "lineChange": "none"
                      },
                      {
                        "line": "        destinationPath = destinationPath.substring(firstSeparator);",
                        "lineNumber": 1582,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 1583,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 1584,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String hostName = req.getServerName();",
                        "lineNumber": 1585,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if ((hostName != null) && (destinationPath.startsWith(hostName))) {",
                        "lineNumber": 1586,
                        "lineChange": "none"
                      },
                      {
                        "line": "        destinationPath = destinationPath.substring(hostName.length());",
                        "lineNumber": 1587,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 1588,
                        "lineChange": "none"
                      },
                      {
                        "line": "    int portIndex = destinationPath.indexOf(\":\");",
                        "lineNumber": 1590,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (portIndex >= 0) {",
                        "lineNumber": 1591,
                        "lineChange": "none"
                      },
                      {
                        "line": "        destinationPath = destinationPath.substring(portIndex);",
                        "lineNumber": 1592,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 1593,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (destinationPath.startsWith(\":\")) {",
                        "lineNumber": 1595,
                        "lineChange": "none"
                      },
                      {
                        "line": "        int firstSeparator = destinationPath.indexOf(\"/\");",
                        "lineNumber": 1596,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (firstSeparator < 0) {",
                        "lineNumber": 1597,
                        "lineChange": "none"
                      },
                      {
                        "line": "            destinationPath = \"/\";",
                        "lineNumber": 1598,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } else {",
                        "lineNumber": 1599,
                        "lineChange": "none"
                      },
                      {
                        "line": "            destinationPath =",
                        "lineNumber": 1600,
                        "lineChange": "none"
                      },
                      {
                        "line": "                destinationPath.substring(firstSeparator);",
                        "lineNumber": 1601,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }",
                        "lineNumber": 1602,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 1603,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Normalise destination path (remove '.' and '..')",
                        "lineNumber": 1606,
                        "lineChange": "none"
                      },
                      {
                        "line": "destinationPath = RequestUtil.normalize(destinationPath);",
                        "lineNumber": 1607,
                        "lineChange": "none"
                      },
                      {
                        "line": "String contextPath = req.getContextPath();",
                        "lineNumber": 1609,
                        "lineChange": "none"
                      },
                      {
                        "line": "if ((contextPath != null) &&",
                        "lineNumber": 1610,
                        "lineChange": "none"
                      },
                      {
                        "line": "    (destinationPath.startsWith(contextPath))) {",
                        "lineNumber": 1611,
                        "lineChange": "none"
                      },
                      {
                        "line": "    destinationPath = destinationPath.substring(contextPath.length());",
                        "lineNumber": 1612,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1613,
                        "lineChange": "none"
                      },
                      {
                        "line": "String pathInfo = req.getPathInfo();",
                        "lineNumber": 1615,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (pathInfo != null) {",
                        "lineNumber": 1616,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String servletPath = req.getServletPath();",
                        "lineNumber": 1617,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if ((servletPath != null) &&",
                        "lineNumber": 1618,
                        "lineChange": "none"
                      },
                      {
                        "line": "        (destinationPath.startsWith(servletPath))) {",
                        "lineNumber": 1619,
                        "lineChange": "none"
                      },
                      {
                        "line": "        destinationPath = destinationPath",
                        "lineNumber": 1620,
                        "lineChange": "none"
                      },
                      {
                        "line": "            .substring(servletPath.length());",
                        "lineNumber": 1621,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 1622,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1623,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (debug > 0)",
                        "lineNumber": 1625,
                        "lineChange": "none"
                      },
                      {
                        "line": "    log(\"Dest path :\" + destinationPath);",
                        "lineNumber": 1626,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Check destination path to protect special subdirectories",
                        "lineNumber": 1628,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (isSpecialPath(destinationPath)) {",
                        "lineNumber": 1629,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resp.sendError(WebdavStatus.SC_FORBIDDEN);",
                        "lineNumber": 1630,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return false;",
                        "lineNumber": 1631,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1632,
                        "lineChange": "none"
                      },
                      {
                        "line": "String path = getRelativePath(req);",
                        "lineNumber": 1634,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (destinationPath.equals(path)) {",
                        "lineNumber": 1636,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resp.sendError(WebdavStatus.SC_FORBIDDEN);",
                        "lineNumber": 1637,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return false;",
                        "lineNumber": 1638,
                        "lineChange": "none"
                      },
                      {
                        "line": "boolean overwrite = true;",
                        "lineNumber": 1643,
                        "lineChange": "none"
                      },
                      {
                        "line": "String overwriteHeader = req.getHeader(\"Overwrite\");",
                        "lineNumber": 1644,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (overwriteHeader != null) {",
                        "lineNumber": 1646,
                        "lineChange": "none"
                      },
                      {
                        "line": " // Overwriting the destination",
                        "lineNumber": 1654,
                        "lineChange": "none"
                      },
                      {
                        "line": "boolean exists = true;",
                        "lineNumber": 1656,
                        "lineChange": "removed"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 1657,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    resources.lookup(destinationPath);",
                        "lineNumber": 1658,
                        "lineChange": "removed"
                      },
                      {
                        "line": "} catch (NamingException e) {",
                        "lineNumber": 1659,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    exists = false;",
                        "lineNumber": 1660,
                        "lineChange": "removed"
                      },
                      {
                        "line": "WebResource destination = resources.getResource(destinationPath);",
                        "lineNumber": 1586,
                        "lineChange": "added"
                      },
                      {
                        "line": "if (overwrite) {",
                        "lineNumber": 1663,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Delete destination resource, if it exists",
                        "lineNumber": 1665,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (exists) {",
                        "lineNumber": 1666,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if (destination.exists()) {",
                        "lineNumber": 1590,
                        "lineChange": "added"
                      },
                      {
                        "line": "    if (!deleteResource(destinationPath, req, resp, true)) {",
                        "lineNumber": 1667,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return false;",
                        "lineNumber": 1668,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 1669,
                        "lineChange": "none"
                      },
                      {
                        "line": " Hashtable<String,Integer> errorList = new Hashtable<>();",
                        "lineNumber": 1686,
                        "lineChange": "none"
                      },
                      {
                        "line": "boolean result = copyResource(resources, errorList,",
                        "lineNumber": 1688,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                              path, destinationPath);",
                        "lineNumber": 1689,
                        "lineChange": "removed"
                      },
                      {
                        "line": "boolean result = copyResource(errorList, path, destinationPath);",
                        "lineNumber": 1609,
                        "lineChange": "added"
                      },
                      {
                        "line": "if ((!result) || (!errorList.isEmpty())) {",
                        "lineNumber": 1691,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resp.sendError(errorList.elements().nextElement().intValue());",
                        "lineNumber": 1693,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 1694,
                        "lineChange": "none"
                      },
                      {
                        "line": "    sendReport(req, resp, errorList);",
                        "lineNumber": 1695,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1696,
                        "lineChange": "none"
                      },
                      {
                        "line": "return false;",
                        "lineNumber": 1697,
                        "lineChange": "none"
                      },
                      {
                        "line": "// Removing any lock-null resource which would be present at",
                        "lineNumber": 1707,
                        "lineChange": "none"
                      },
                      {
                        "line": "// the destination path",
                        "lineNumber": 1708,
                        "lineChange": "none"
                      },
                      {
                        "line": "lockNullResources.remove(destinationPath);",
                        "lineNumber": 1709,
                        "lineChange": "none"
                      },
                      {
                        "line": "return true;",
                        "lineNumber": 1711,
                        "lineChange": "none"
                      },
                      {
                        "line": " * @param dest Destination path",
                        "lineNumber": 1723,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 1724,
                        "lineChange": "none"
                      },
                      {
                        "line": "private boolean copyResource(DirContext dirContext,",
                        "lineNumber": 1725,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        Hashtable<String,Integer> errorList, String source, String dest) {",
                        "lineNumber": 1726,
                        "lineChange": "removed"
                      },
                      {
                        "line": "private boolean copyResource(Hashtable<String,Integer> errorList,",
                        "lineNumber": 1643,
                        "lineChange": "added"
                      },
                      {
                        "line": "        String source, String dest) {",
                        "lineNumber": 1644,
                        "lineChange": "added"
                      },
                      {
                        "line": "    if (debug > 1)",
                        "lineNumber": 1728,
                        "lineChange": "none"
                      },
                      {
                        "line": "        log(\"Copy: \" + source + \" To: \" + dest);",
                        "lineNumber": 1729,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Object object = null;",
                        "lineNumber": 1731,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    try {",
                        "lineNumber": 1732,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        object = dirContext.lookup(source);",
                        "lineNumber": 1733,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    } catch (NamingException e) {",
                        "lineNumber": 1734,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        // Ignore",
                        "lineNumber": 1735,
                        "lineChange": "removed"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 1740,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    dirContext.createSubcontext(dest);",
                        "lineNumber": 1741,
                        "lineChange": "removed"
                      },
                      {
                        "line": "} catch (NamingException e) {",
                        "lineNumber": 1742,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    errorList.put",
                        "lineNumber": 1743,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        (dest, new Integer(WebdavStatus.SC_CONFLICT));",
                        "lineNumber": 1744,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    return false;",
                        "lineNumber": 1745,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1746,
                        "lineChange": "removed"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 1748,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    NamingEnumeration<NameClassPair> enumeration =",
                        "lineNumber": 1749,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        dirContext.list(source);",
                        "lineNumber": 1750,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    while (enumeration.hasMoreElements()) {",
                        "lineNumber": 1751,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        NameClassPair ncPair = enumeration.nextElement();",
                        "lineNumber": 1752,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        String childDest = dest;",
                        "lineNumber": 1753,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        if (!childDest.equals(\"/\"))",
                        "lineNumber": 1754,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            childDest += \"/\";",
                        "lineNumber": 1755,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        childDest += ncPair.getName();",
                        "lineNumber": 1756,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        String childSrc = source;",
                        "lineNumber": 1757,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        if (!childSrc.equals(\"/\"))",
                        "lineNumber": 1758,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            childSrc += \"/\";",
                        "lineNumber": 1759,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        childSrc += ncPair.getName();",
                        "lineNumber": 1760,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        copyResource(dirContext, errorList, childSrc, childDest);",
                        "lineNumber": 1761,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if (sourceResource.isDirectory()) {",
                        "lineNumber": 1651,
                        "lineChange": "added"
                      },
                      {
                        "line": "    if (!resources.mkdir(dest)) {",
                        "lineNumber": 1652,
                        "lineChange": "added"
                      },
                      {
                        "line": "        WebResource destResource = resources.getResource(dest);",
                        "lineNumber": 1653,
                        "lineChange": "added"
                      },
                      {
                        "line": "        if (!destResource.isDirectory()) {",
                        "lineNumber": 1654,
                        "lineChange": "added"
                      },
                      {
                        "line": "            errorList.put(dest, new Integer(WebdavStatus.SC_CONFLICT));",
                        "lineNumber": 1655,
                        "lineChange": "added"
                      },
                      {
                        "line": "            return false;",
                        "lineNumber": 1656,
                        "lineChange": "added"
                      },
                      {
                        "line": "        }",
                        "lineNumber": 1762,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } catch (NamingException e) {",
                        "lineNumber": 1763,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        errorList.put",
                        "lineNumber": 1764,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            (dest, new Integer(WebdavStatus.SC_INTERNAL_SERVER_ERROR));",
                        "lineNumber": 1765,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        return false;",
                        "lineNumber": 1766,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 1767,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (object instanceof Resource) {",
                        "lineNumber": 1771,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    try {",
                        "lineNumber": 1772,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        dirContext.bind(dest, object);",
                        "lineNumber": 1773,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    } catch (NamingException e) {",
                        "lineNumber": 1774,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        if (e.getCause() instanceof FileNotFoundException) {",
                        "lineNumber": 1775,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            // We know the source exists so it must be the",
                        "lineNumber": 1776,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            // destination dir that can't be found",
                        "lineNumber": 1777,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            errorList.put(source,",
                        "lineNumber": 1778,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                    new Integer(WebdavStatus.SC_CONFLICT));",
                        "lineNumber": 1779,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        } else {",
                        "lineNumber": 1780,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            errorList.put(source,",
                        "lineNumber": 1781,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                    new Integer(WebdavStatus.SC_INTERNAL_SERVER_ERROR));",
                        "lineNumber": 1782,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        }",
                        "lineNumber": 1783,
                        "lineChange": "removed"
                      },
                      {
                        "line": "String[] entries = resources.list(source);",
                        "lineNumber": 1660,
                        "lineChange": "added"
                      },
                      {
                        "line": "for (String entry : entries) {",
                        "lineNumber": 1661,
                        "lineChange": "added"
                      },
                      {
                        "line": "    String childDest = dest;",
                        "lineNumber": 1662,
                        "lineChange": "added"
                      },
                      {
                        "line": "    if (!childDest.equals(\"/\")) {",
                        "lineNumber": 1663,
                        "lineChange": "added"
                      },
                      {
                        "line": "        childDest += \"/\";",
                        "lineNumber": 1664,
                        "lineChange": "added"
                      },
                      {
                        "line": "         }",
                        "lineNumber": 1785,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {",
                        "lineNumber": 1786,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        errorList.put",
                        "lineNumber": 1787,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            (source,",
                        "lineNumber": 1788,
                        "lineChange": "removed"
                      },
                      {
                        "line": "             new Integer(WebdavStatus.SC_INTERNAL_SERVER_ERROR));",
                        "lineNumber": 1789,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        childDest += entry;",
                        "lineNumber": 1666,
                        "lineChange": "added"
                      },
                      {
                        "line": "        String childSrc = source;",
                        "lineNumber": 1667,
                        "lineChange": "added"
                      },
                      {
                        "line": "        if (!childSrc.equals(\"/\")) {",
                        "lineNumber": 1668,
                        "lineChange": "added"
                      },
                      {
                        "line": "            childSrc += \"/\";",
                        "lineNumber": 1669,
                        "lineChange": "added"
                      },
                      {
                        "line": "        }",
                        "lineNumber": 1670,
                        "lineChange": "added"
                      },
                      {
                        "line": "        childSrc += entry;",
                        "lineNumber": 1671,
                        "lineChange": "added"
                      },
                      {
                        "line": "        copyResource(errorList, childSrc, childDest);",
                        "lineNumber": 1672,
                        "lineChange": "added"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 1673,
                        "lineChange": "added"
                      },
                      {
                        "line": "} else if (sourceResource.isFile()) {",
                        "lineNumber": 1674,
                        "lineChange": "added"
                      },
                      {
                        "line": "    if (!resources.write(dest, sourceResource.getInputStream())) {",
                        "lineNumber": 1675,
                        "lineChange": "added"
                      },
                      {
                        "line": "        errorList.put(source,",
                        "lineNumber": 1676,
                        "lineChange": "added"
                      },
                      {
                        "line": "                new Integer(WebdavStatus.SC_INTERNAL_SERVER_ERROR));",
                        "lineNumber": 1677,
                        "lineChange": "added"
                      },
                      {
                        "line": "        return false;",
                        "lineNumber": 1790,
                        "lineChange": "none"
                      },
                      {
                        "line": "     }",
                        "lineNumber": 1791,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 1680,
                        "lineChange": "added"
                      },
                      {
                        "line": "    errorList.put(source,",
                        "lineNumber": 1681,
                        "lineChange": "added"
                      },
                      {
                        "line": "            new Integer(WebdavStatus.SC_INTERNAL_SERVER_ERROR));",
                        "lineNumber": 1682,
                        "lineChange": "added"
                      },
                      {
                        "line": "    return false;",
                        "lineNumber": 1683,
                        "lineChange": "added"
                      },
                      {
                        "line": " * @return boolean true if the copy is successful",
                        "lineNumber": 1805,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 1806,
                        "lineChange": "none"
                      },
                      {
                        "line": "private boolean deleteResource(HttpServletRequest req,",
                        "lineNumber": 1807,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               HttpServletResponse resp)",
                        "lineNumber": 1808,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throws IOException {",
                        "lineNumber": 1809,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String path = getRelativePath(req);",
                        "lineNumber": 1811,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return deleteResource(path, req, resp, true);",
                        "lineNumber": 1813,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1815,
                        "lineChange": "none"
                      },
                      {
                        "line": " *                  completion",
                        "lineNumber": 1825,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 1826,
                        "lineChange": "none"
                      },
                      {
                        "line": "private boolean deleteResource(String path, HttpServletRequest req,",
                        "lineNumber": 1827,
                        "lineChange": "none"
                      },
                      {
                        "line": "                               HttpServletResponse resp, boolean setStatus)",
                        "lineNumber": 1828,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throws IOException {",
                        "lineNumber": 1829,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String ifHeader = req.getHeader(\"If\");",
                        "lineNumber": 1831,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (ifHeader == null)",
                        "lineNumber": 1832,
                        "lineChange": "none"
                      },
                      {
                        "line": "        ifHeader = \"\";",
                        "lineNumber": 1833,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String lockTokenHeader = req.getHeader(\"Lock-Token\");",
                        "lineNumber": 1835,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (lockTokenHeader == null)",
                        "lineNumber": 1836,
                        "lineChange": "none"
                      },
                      {
                        "line": "        lockTokenHeader = \"\";",
                        "lineNumber": 1837,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (isLocked(path, ifHeader + lockTokenHeader)) {",
                        "lineNumber": 1839,
                        "lineChange": "none"
                      },
                      {
                        "line": "        resp.sendError(WebdavStatus.SC_LOCKED);",
                        "lineNumber": 1840,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return false;",
                        "lineNumber": 1841,
                        "lineChange": "none"
                      },
                      {
                        "line": "     }",
                        "lineNumber": 1842,
                        "lineChange": "none"
                      },
                      {
                        "line": "Object object = null;",
                        "lineNumber": 1845,
                        "lineChange": "removed"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 1846,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    object = resources.lookup(path);",
                        "lineNumber": 1847,
                        "lineChange": "removed"
                      },
                      {
                        "line": "} catch (NamingException e) {",
                        "lineNumber": 1848,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    exists = false;",
                        "lineNumber": 1849,
                        "lineChange": "removed"
                      },
                      {
                        "line": "WebResource resource = resources.getResource(path);",
                        "lineNumber": 1733,
                        "lineChange": "added"
                      },
                      {
                        "line": "if (!resource.exists()) {",
                        "lineNumber": 1735,
                        "lineChange": "added"
                      },
                      {
                        "line": "if (!collection) {",
                        "lineNumber": 1859,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    try {",
                        "lineNumber": 1860,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        resources.unbind(path);",
                        "lineNumber": 1861,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    } catch (NamingException e) {",
                        "lineNumber": 1862,
                        "lineChange": "removed"
                      },
                      {
                        "line": "resp.sendError(WebdavStatus.SC_INTERNAL_SERVER_ERROR);",
                        "lineNumber": 1863,
                        "lineChange": "none"
                      },
                      {
                        "line": "Hashtable<String,Integer> errorList = new Hashtable<>();",
                        "lineNumber": 1868,
                        "lineChange": "none"
                      },
                      {
                        "line": "deleteCollection(req, resources, path, errorList);",
                        "lineNumber": 1870,
                        "lineChange": "removed"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 1871,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    resources.unbind(path);",
                        "lineNumber": 1872,
                        "lineChange": "removed"
                      },
                      {
                        "line": "} catch (NamingException e) {",
                        "lineNumber": 1873,
                        "lineChange": "removed"
                      },
                      {
                        "line": "deleteCollection(req, path, errorList);",
                        "lineNumber": 1749,
                        "lineChange": "added"
                      },
                      {
                        "line": "if (!resource.delete()) {",
                        "lineNumber": 1750,
                        "lineChange": "added"
                      },
                      {
                        "line": "    errorList.put(path, new Integer",
                        "lineNumber": 1874,
                        "lineChange": "none"
                      },
                      {
                        "line": "        (WebdavStatus.SC_INTERNAL_SERVER_ERROR));",
                        "lineNumber": 1875,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1876,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (!errorList.isEmpty()) {",
                        "lineNumber": 1878,
                        "lineChange": "none"
                      },
                      {
                        "line": "    sendReport(req, resp, errorList);",
                        "lineNumber": 1880,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return false;",
                        "lineNumber": 1881,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1883,
                        "lineChange": "none"
                      },
                      {
                        "line": " * @param errorList Contains the list of the errors which occurred",
                        "lineNumber": 1899,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 1900,
                        "lineChange": "none"
                      },
                      {
                        "line": "private void deleteCollection(HttpServletRequest req,",
                        "lineNumber": 1901,
                        "lineChange": "none"
                      },
                      {
                        "line": "                              DirContext dirContext,",
                        "lineNumber": 1902,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                              String path,",
                        "lineNumber": 1903,
                        "lineChange": "none"
                      },
                      {
                        "line": "                              Hashtable<String,Integer> errorList) {",
                        "lineNumber": 1904,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (debug > 1)",
                        "lineNumber": 1906,
                        "lineChange": "none"
                      },
                      {
                        "line": "        log(\"Delete:\" + path);",
                        "lineNumber": 1907,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Prevent deletion of special subdirectories",
                        "lineNumber": 1909,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (isSpecialPath(path)) {",
                        "lineNumber": 1910,
                        "lineChange": "none"
                      },
                      {
                        "line": "        errorList.put(path, new Integer(WebdavStatus.SC_FORBIDDEN));",
                        "lineNumber": 1911,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return;",
                        "lineNumber": 1912,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 1913,
                        "lineChange": "none"
                      },
                      {
                        "line": "     lockTokenHeader = \"\";",
                        "lineNumber": 1921,
                        "lineChange": "none"
                      },
                      {
                        "line": "Enumeration<NameClassPair> enumeration = null;",
                        "lineNumber": 1923,
                        "lineChange": "removed"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 1924,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    enumeration = dirContext.list(path);",
                        "lineNumber": 1925,
                        "lineChange": "removed"
                      },
                      {
                        "line": "} catch (NamingException e) {",
                        "lineNumber": 1926,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    errorList.put(path, new Integer",
                        "lineNumber": 1927,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        (WebdavStatus.SC_INTERNAL_SERVER_ERROR));",
                        "lineNumber": 1928,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    return;",
                        "lineNumber": 1929,
                        "lineChange": "removed"
                      },
                      {
                        "line": "String[] entries = resources.list(path);",
                        "lineNumber": 1794,
                        "lineChange": "added"
                      },
                      {
                        "line": "while (enumeration.hasMoreElements()) {",
                        "lineNumber": 1932,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    NameClassPair ncPair = enumeration.nextElement();",
                        "lineNumber": 1933,
                        "lineChange": "removed"
                      },
                      {
                        "line": "for (String entry : entries) {",
                        "lineNumber": 1796,
                        "lineChange": "added"
                      },
                      {
                        "line": "    String childName = path;",
                        "lineNumber": 1934,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!childName.equals(\"/\"))",
                        "lineNumber": 1935,
                        "lineChange": "none"
                      },
                      {
                        "line": "        childName += \"/\";",
                        "lineNumber": 1936,
                        "lineChange": "none"
                      },
                      {
                        "line": "    childName += ncPair.getName();",
                        "lineNumber": 1937,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    childName += entry;",
                        "lineNumber": 1800,
                        "lineChange": "added"
                      },
                      {
                        "line": "    if (isLocked(childName, ifHeader + lockTokenHeader)) {",
                        "lineNumber": 1939,
                        "lineChange": "none"
                      },
                      {
                        "line": "        errorList.put(childName, new Integer(WebdavStatus.SC_LOCKED));",
                        "lineNumber": 1941,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {",
                        "lineNumber": 1943,
                        "lineChange": "none"
                      },
                      {
                        "line": "        WebResource childResource = resources.getResource(childName);",
                        "lineNumber": 1807,
                        "lineChange": "added"
                      },
                      {
                        "line": "        if (childResource.isDirectory()) {",
                        "lineNumber": 1808,
                        "lineChange": "added"
                      },
                      {
                        "line": "            deleteCollection(req, childName, errorList);",
                        "lineNumber": 1809,
                        "lineChange": "added"
                      },
                      {
                        "line": "        }",
                        "lineNumber": 1810,
                        "lineChange": "added"
                      },
                      {
                        "line": "        try {",
                        "lineNumber": 1945,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            Object object = dirContext.lookup(childName);",
                        "lineNumber": 1946,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            if (object instanceof DirContext) {",
                        "lineNumber": 1947,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                deleteCollection(req, dirContext, childName, errorList);",
                        "lineNumber": 1948,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            }",
                        "lineNumber": 1949,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            try {",
                        "lineNumber": 1951,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                dirContext.unbind(childName);",
                        "lineNumber": 1952,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            } catch (NamingException e) {",
                        "lineNumber": 1953,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                if (!(object instanceof DirContext)) {",
                        "lineNumber": 1954,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    // error",
                        "lineNumber": 1956,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    errorList.put",
                        "lineNumber": 1957,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        (childName, new Integer",
                        "lineNumber": 1958,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            (WebdavStatus.SC_INTERNAL_SERVER_ERROR));",
                        "lineNumber": 1959,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1960,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        // If it's not a collection, then it's an unknown",
                        "lineNumber": 1814,
                        "lineChange": "added"
                      },
                      {
                        "line": "        // error",
                        "lineNumber": 1815,
                        "lineChange": "added"
                      },
                      {
                        "line": "        errorList.put(childName, new Integer(",
                        "lineNumber": 1816,
                        "lineChange": "added"
                      },
                      {
                        "line": "                WebdavStatus.SC_INTERNAL_SERVER_ERROR));",
                        "lineNumber": 1817,
                        "lineChange": "added"
                      },
                      {
                        "line": "     }",
                        "lineNumber": 1961,
                        "lineChange": "none"
                      },
                      {
                        "line": "} catch (NamingException e) {",
                        "lineNumber": 1962,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    errorList.put",
                        "lineNumber": 1963,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        (childName, new Integer",
                        "lineNumber": 1964,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            (WebdavStatus.SC_INTERNAL_SERVER_ERROR));",
                        "lineNumber": 1965,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1966,
                        "lineChange": "none"
                      },
                      {
                        "line": " * @param errorList List of error to be displayed",
                        "lineNumber": 1980,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 1981,
                        "lineChange": "none"
                      },
                      {
                        "line": "private void sendReport(HttpServletRequest req, HttpServletResponse resp,",
                        "lineNumber": 1982,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        Hashtable<String,Integer> errorList)",
                        "lineNumber": 1983,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throws IOException {",
                        "lineNumber": 1984,
                        "lineChange": "none"
                      },
                      {
                        "line": "resp.setStatus(WebdavStatus.SC_MULTI_STATUS);",
                        "lineNumber": 1986,
                        "lineChange": "none"
                      },
                      {
                        "line": "String absoluteUri = req.getRequestURI();",
                        "lineNumber": 1988,
                        "lineChange": "none"
                      },
                      {
                        "line": "String relativePath = getRelativePath(req);",
                        "lineNumber": 1989,
                        "lineChange": "none"
                      },
                      {
                        "line": "XMLWriter generatedXML = new XMLWriter();",
                        "lineNumber": 1991,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeElement(\"D\", \"href\", XMLWriter.OPENING);",
                        "lineNumber": 2005,
                        "lineChange": "none"
                      },
                      {
                        "line": "String toAppend = errorPath.substring(relativePath.length());",
                        "lineNumber": 2006,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (!toAppend.startsWith(\"/\"))",
                        "lineNumber": 2007,
                        "lineChange": "none"
                      },
                      {
                        "line": "    toAppend = \"/\" + toAppend;",
                        "lineNumber": 2008,
                        "lineChange": "none"
                      },
                      {
                        "line": " * name, then this Vector contains those properties",
                        "lineNumber": 2038,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 2039,
                        "lineChange": "none"
                      },
                      {
                        "line": "private void parseProperties(HttpServletRequest req,",
                        "lineNumber": 2040,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             XMLWriter generatedXML,",
                        "lineNumber": 2041,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             String path, int type,",
                        "lineNumber": 2042,
                        "lineChange": "none"
                      },
                      {
                        "line": "                             Vector<String> propertiesVector) {",
                        "lineNumber": 2043,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Exclude any resource in the /WEB-INF and /META-INF subdirectories",
                        "lineNumber": 2045,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (isSpecialPath(path))",
                        "lineNumber": 2046,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return;",
                        "lineNumber": 2047,
                        "lineChange": "none"
                      },
                      {
                        "line": "    CacheEntry cacheEntry = resources.lookupCache(path);",
                        "lineNumber": 2049,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    if (!cacheEntry.exists) {",
                        "lineNumber": 2050,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    WebResource resource = resources.getResource(path);",
                        "lineNumber": 1900,
                        "lineChange": "added"
                      },
                      {
                        "line": "    if (!resource.exists()) {",
                        "lineNumber": 1901,
                        "lineChange": "added"
                      },
                      {
                        "line": "        // File is in directory listing but doesn't appear to exist",
                        "lineNumber": 2051,
                        "lineChange": "none"
                      },
                      {
                        "line": "         // Broken symlink or odd permission settings?",
                        "lineNumber": 2052,
                        "lineChange": "none"
                      },
                      {
                        "line": "String href = req.getContextPath() + req.getServletPath();",
                        "lineNumber": 2063,
                        "lineChange": "none"
                      },
                      {
                        "line": "if ((href.endsWith(\"/\")) && (path.startsWith(\"/\")))",
                        "lineNumber": 2064,
                        "lineChange": "none"
                      },
                      {
                        "line": "    href += path.substring(1);",
                        "lineNumber": 2065,
                        "lineChange": "none"
                      },
                      {
                        "line": "else",
                        "lineNumber": 2066,
                        "lineChange": "none"
                      },
                      {
                        "line": "    href += path;",
                        "lineNumber": 2067,
                        "lineChange": "none"
                      },
                      {
                        "line": "if ((cacheEntry.context != null) && (!href.endsWith(\"/\")))",
                        "lineNumber": 2068,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if (resource.isDirectory() && (!href.endsWith(\"/\")))",
                        "lineNumber": 1919,
                        "lineChange": "added"
                      },
                      {
                        "line": "    href += \"/\";",
                        "lineNumber": 2069,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeElement(\"D\", \"href\", XMLWriter.CLOSING);",
                        "lineNumber": 2073,
                        "lineChange": "none"
                      },
                      {
                        "line": "String resourceName = path;",
                        "lineNumber": 2075,
                        "lineChange": "none"
                      },
                      {
                        "line": "int lastSlash = path.lastIndexOf('/');",
                        "lineNumber": 2076,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (lastSlash != -1)",
                        "lineNumber": 2077,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resourceName = resourceName.substring(lastSlash + 1);",
                        "lineNumber": 2078,
                        "lineChange": "none"
                      },
                      {
                        "line": "switch (type) {",
                        "lineNumber": 2080,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeElement(\"D\", \"displayname\", XMLWriter.OPENING);",
                        "lineNumber": 2089,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeData(resourceName);",
                        "lineNumber": 2090,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeElement(\"D\", \"displayname\", XMLWriter.CLOSING);",
                        "lineNumber": 2091,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeElement(\"D\", \"supportedlock\", XMLWriter.CLOSING);",
                        "lineNumber": 2129,
                        "lineChange": "none"
                      },
                      {
                        "line": "generateLockDiscovery(path, generatedXML);",
                        "lineNumber": 2131,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeElement(\"D\", \"prop\", XMLWriter.CLOSING);",
                        "lineNumber": 2133,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeElement",
                        "lineNumber": 2194,
                        "lineChange": "none"
                      },
                      {
                        "line": "    (\"D\", \"displayname\", XMLWriter.OPENING);",
                        "lineNumber": 2195,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeData(resourceName);",
                        "lineNumber": 2196,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeElement",
                        "lineNumber": 2197,
                        "lineChange": "none"
                      },
                      {
                        "line": "    (\"D\", \"displayname\", XMLWriter.CLOSING);",
                        "lineNumber": 2198,
                        "lineChange": "none"
                      },
                      {
                        "line": "            XMLWriter.CLOSING);",
                        "lineNumber": 2264,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else if (property.equals(\"lockdiscovery\")) {",
                        "lineNumber": 2265,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!generateLockDiscovery(path, generatedXML))",
                        "lineNumber": 2266,
                        "lineChange": "none"
                      },
                      {
                        "line": "        propertiesNotFound.addElement(property);",
                        "lineNumber": 2267,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 2268,
                        "lineChange": "none"
                      },
                      {
                        "line": " * name, then this Vector contains those properties",
                        "lineNumber": 2322,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 2323,
                        "lineChange": "none"
                      },
                      {
                        "line": "private void parseLockNullProperties(HttpServletRequest req,",
                        "lineNumber": 2324,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                     XMLWriter generatedXML,",
                        "lineNumber": 2325,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                     String path, int type,",
                        "lineNumber": 2326,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                     Vector<String> propertiesVector) {",
                        "lineNumber": 2327,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Exclude any resource in the /WEB-INF and /META-INF subdirectories",
                        "lineNumber": 2329,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (isSpecialPath(path))",
                        "lineNumber": 2330,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return;",
                        "lineNumber": 2331,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Retrieving the lock associated with the lock-null resource",
                        "lineNumber": 2333,
                        "lineChange": "none"
                      },
                      {
                        "line": "    LockInfo lock = resourceLocks.get(path);",
                        "lineNumber": 2334,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (lock == null)",
                        "lineNumber": 2336,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeElement(\"D\", \"href\", XMLWriter.OPENING);",
                        "lineNumber": 2344,
                        "lineChange": "none"
                      },
                      {
                        "line": "String absoluteUri = req.getRequestURI();",
                        "lineNumber": 2346,
                        "lineChange": "none"
                      },
                      {
                        "line": "String relativePath = getRelativePath(req);",
                        "lineNumber": 2347,
                        "lineChange": "none"
                      },
                      {
                        "line": "String toAppend = path.substring(relativePath.length());",
                        "lineNumber": 2348,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (!toAppend.startsWith(\"/\"))",
                        "lineNumber": 2349,
                        "lineChange": "none"
                      },
                      {
                        "line": "    toAppend = \"/\" + toAppend;",
                        "lineNumber": 2350,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeElement(\"D\", \"href\", XMLWriter.CLOSING);",
                        "lineNumber": 2355,
                        "lineChange": "none"
                      },
                      {
                        "line": "String resourceName = path;",
                        "lineNumber": 2357,
                        "lineChange": "none"
                      },
                      {
                        "line": "int lastSlash = path.lastIndexOf('/');",
                        "lineNumber": 2358,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (lastSlash != -1)",
                        "lineNumber": 2359,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resourceName = resourceName.substring(lastSlash + 1);",
                        "lineNumber": 2360,
                        "lineChange": "none"
                      },
                      {
                        "line": "switch (type) {",
                        "lineNumber": 2362,
                        "lineChange": "none"
                      },
                      {
                        "line": "        getISOCreationDate(lock.creationDate.getTime()));",
                        "lineNumber": 2370,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeElement(\"D\", \"displayname\", XMLWriter.OPENING);",
                        "lineNumber": 2371,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeData(resourceName);",
                        "lineNumber": 2372,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeElement(\"D\", \"displayname\", XMLWriter.CLOSING);",
                        "lineNumber": 2373,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeProperty(\"D\", \"getlastmodified\",",
                        "lineNumber": 2374,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeElement(\"D\", \"supportedlock\", XMLWriter.CLOSING);",
                        "lineNumber": 2396,
                        "lineChange": "none"
                      },
                      {
                        "line": "generateLockDiscovery(path, generatedXML);",
                        "lineNumber": 2398,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeElement(\"D\", \"prop\", XMLWriter.CLOSING);",
                        "lineNumber": 2400,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeElement(\"D\", \"displayname\",",
                        "lineNumber": 2458,
                        "lineChange": "none"
                      },
                      {
                        "line": "        XMLWriter.OPENING);",
                        "lineNumber": 2459,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeData(resourceName);",
                        "lineNumber": 2460,
                        "lineChange": "none"
                      },
                      {
                        "line": "generatedXML.writeElement(\"D\", \"displayname\",",
                        "lineNumber": 2461,
                        "lineChange": "none"
                      },
                      {
                        "line": "        XMLWriter.CLOSING);",
                        "lineNumber": 2462,
                        "lineChange": "none"
                      },
                      {
                        "line": "            XMLWriter.CLOSING);",
                        "lineNumber": 2499,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else if (property.equals(\"lockdiscovery\")) {",
                        "lineNumber": 2500,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!generateLockDiscovery(path, generatedXML))",
                        "lineNumber": 2501,
                        "lineChange": "none"
                      },
                      {
                        "line": "        propertiesNotFound.addElement(property);",
                        "lineNumber": 2502,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 2503,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 2554,
                        "lineChange": "none"
                      },
                      {
                        "line": "private boolean generateLockDiscovery",
                        "lineNumber": 2555,
                        "lineChange": "none"
                      },
                      {
                        "line": "    (String path, XMLWriter generatedXML) {",
                        "lineNumber": 2556,
                        "lineChange": "none"
                      },
                      {
                        "line": "    LockInfo resourceLock = resourceLocks.get(path);",
                        "lineNumber": 2558,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Enumeration<LockInfo> collectionLocksList = collectionLocks.elements();",
                        "lineNumber": 2559,
                        "lineChange": "none"
                      },
                      {
                        "line": "while (collectionLocksList.hasMoreElements()) {",
                        "lineNumber": 2569,
                        "lineChange": "none"
                      },
                      {
                        "line": "    LockInfo currentLock = collectionLocksList.nextElement();",
                        "lineNumber": 2570,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (path.startsWith(currentLock.path)) {",
                        "lineNumber": 2571,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (!wroteStart) {",
                        "lineNumber": 2572,
                        "lineChange": "none"
                      },
                      {
                        "line": "            wroteStart = true;",
                        "lineNumber": 2573,
                        "lineChange": "none"
                      },
                      {
                        "line": " *",
                        "lineNumber": 2601,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 2602,
                        "lineChange": "none"
                      },
                      {
                        "line": "private StringBuilder determineMethodsAllowed(DirContext dirContext,",
                        "lineNumber": 2603,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                                             HttpServletRequest req) {",
                        "lineNumber": 2604,
                        "lineChange": "removed"
                      },
                      {
                        "line": "private StringBuilder determineMethodsAllowed(HttpServletRequest req) {",
                        "lineNumber": 2453,
                        "lineChange": "added"
                      },
                      {
                        "line": "    StringBuilder methodsAllowed = new StringBuilder();",
                        "lineNumber": 2606,
                        "lineChange": "none"
                      },
                      {
                        "line": "Object object = null;",
                        "lineNumber": 2608,
                        "lineChange": "removed"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 2609,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    String path = getRelativePath(req);",
                        "lineNumber": 2610,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    object = dirContext.lookup(path);",
                        "lineNumber": 2612,
                        "lineChange": "removed"
                      },
                      {
                        "line": "} catch (NamingException e) {",
                        "lineNumber": 2613,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    exists = false;",
                        "lineNumber": 2614,
                        "lineChange": "removed"
                      },
                      {
                        "line": "WebResource resource = resources.getResource(getRelativePath(req));",
                        "lineNumber": 2457,
                        "lineChange": "added"
                      },
                      {
                        "line": "if (!resource.exists()) {",
                        "lineNumber": 2459,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Introduce cache for LDAP authentication",
                  "Merge new resources implementation from sandbox/trunk-resources"
                ],
                "precision": "very-high",
                "repoDatasetSize": 2,
                "cwe": [
                  "CWE-90"
                ]
              }
            },
            {
              "id": "java/Ssrf",
              "name": "Ssrf",
              "shortDescription": {
                "text": "Server-Side Request Forgery (SSRF)"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "\n## Details\nIn a server-side request forgery attack, a malicious user supplies a URL (an external URL or a network IP address such as 127.0.0.1) to the application's back end. The server then accesses the URL and shares its results, which may include sensitive information such as AWS metadata, internal configuration information, or database contents with the attacker. Because the request comes from the back end, it bypasses access controls, potentially exposing information the user does not have sufficient privileges to receive. The attacker can then exploit this information to gain access, modify the web application, or demand a ransom payment.\n\n### Best practices for prevention\n* Blacklists are problematic and attackers have numerous ways to bypass them; ideally, use a whitelist of all permitted domains and IP addresses.\n* Use authentication even within your own network to prevent exploitation of server-side requests.\n* Implement zero trust and sanitize and validate all URL and header data returning to the server from the user. Strip invalid or suspect characters, then inspect to be certain it contains a valid and expected value.\n* Ideally, avoid sending server requests based on user-provided data altogether.\n* Ensure that you are not sending raw response bodies from the server directly to the client. Only deliver expected responses.\n* Disable suspect and exploitable URL schemas. Common culprits include obscure and little-used schemas such as `file://`, `dict://`, `ftp://`, and `gopher://`.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/httpcache4j/httpcache4j/commit/81f9db7ad6e7e18227b8b5de717c580da15ed7ae?diff=split#diff-99799647d646d0fff0a1b4b465dd5de0L49",
                    "lines": [
                      {
                        "line": "public HTTPResponse resolve(HTTPRequest request) throws IOException {",
                        "lineNumber": 47,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    req = getAuthenticator().preparePreemptiveAuthentication(req);",
                        "lineNumber": 50,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 51,
                        "lineChange": "added"
                      },
                      {
                        "line": "URL url = request.getRequestURI().toURL();",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "URLConnection openConnection = url.openConnection();",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (openConnection instanceof HttpURLConnection) {",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "    HttpURLConnection connection = (HttpURLConnection) openConnection;",
                        "lineNumber": 55,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/LearnLib/alex/commit/cb22c1446dfa65bb405f50baa79ba77866c4c706?diff=split#diff-1723d8f955b61289dccacfea34e7737dL58",
                    "lines": [
                      {
                        "line": "@GET",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "@Produces(MediaType.TEXT_HTML)",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "public Response doGetProxy(@QueryParam(\"url\") String url, @HeaderParam(\"Cookie\") String cookies) {",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "    LOGGER.trace(\"IFrameProxyResource.doGetProxy(\" + url + \", \" + cookies + \").\");",
                        "lineNumber": 58,
                        "lineChange": "added"
                      },
                      {
                        "line": "    try {",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Connection connection = Jsoup.connect(url);",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "        connection = parseAndProcessCookies(connection, cookies);",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "        connection = connection.method(Connection.Method.GET);",
                        "lineNumber": 63,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/dotnet/aspnetcore/commit/e089cfc11cb86d6da786d82ee92aeef1c903f0f5?diff=split#diff-f69c44e82917810b055809e4c47c7e7dL84",
                    "lines": [
                      {
                        "line": "@Override",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "public Single<HttpResponse> send(HttpRequest httpRequest) {",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "@Override",
                        "lineNumber": 99,
                        "lineChange": "added"
                      },
                      {
                        "line": "public Single<HttpResponse> send(HttpRequest httpRequest, String bodyContent) {",
                        "lineNumber": 100,
                        "lineChange": "added"
                      },
                      {
                        "line": "    Request.Builder requestBuilder = new Request.Builder().url(httpRequest.getUrl());",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "    switch (httpRequest.getMethod()) {",
                        "lineNumber": 103,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Support Java 8 class files",
                  "- app requests work in tests",
                  "* Add logic to catch unranked hiscores and display them properly."
                ],
                "precision": "very-high",
                "repoDatasetSize": 233,
                "cwe": [
                  "CWE-918"
                ]
              }
            },
            {
              "id": "java/HardcodedPassword",
              "name": "HardcodedPassword",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n### Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/utluiz/spring-examples/commit/56e44932a3a004c3ac96ce1caa3e6d8817230f6e?diff=split#diff-19d771f687bc8ca37d378c39d20ed425L26",
                    "lines": [
                      {
                        "line": "  ds.setUrl(\"jdbc:mysql://localhost:3311/agenda\");",
                        "lineNumber": 23,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  ds.setUrl(\"jdbc:mysql://localhost/agenda\");",
                        "lineNumber": 20,
                        "lineChange": "added"
                      },
                      {
                        "line": "  ds.setUser(\"root\");",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "  ds.setPassword(\"root\");",
                        "lineNumber": 25,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  ds.setPassword(\"\");",
                        "lineNumber": 22,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return ds;",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 27,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Evolveum/midpoint/commit/9ce1d7ff1e78ca65d6b614c52035e1971d1187cd?diff=split#diff-0003b3a408395a5640011d7c8422d19bL43",
                    "lines": [
                      {
                        "line": "      // set the password for our message.",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "      pc.setPassword(\"5ecr3t\");",
                        "lineNumber": 42,
                        "lineChange": "removed"
                      },
                      {
                        "line": "      pc.setPassword(Main.ADM_PASSWORD);",
                        "lineNumber": 42,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 43,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/theonedev/onedev/commit/ee60c786981347fc5ab6685656f3de2ea67045f7?diff=split#diff-7f6f95fdc3f39c216b4bd099d0ca65b6L60",
                    "lines": [
                      {
                        "line": "  System.exit(1);",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "root.setPassword(\"12345\");",
                        "lineNumber": 59,
                        "lineChange": "removed"
                      },
                      {
                        "line": "String password = Bootstrap.command.getArgs()[0];",
                        "lineNumber": 63,
                        "lineChange": "added"
                      },
                      {
                        "line": "root.setPassword(password);",
                        "lineNumber": 64,
                        "lineChange": "added"
                      },
                      {
                        "line": "accountManager.save(root);",
                        "lineNumber": 65,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Added user/password configuration from YML file.",
                  "Added ability to configure databases to run tests against."
                ],
                "precision": "very-high",
                "repoDatasetSize": 383,
                "cwe": [
                  "CWE-798",
                  "CWE-259"
                ]
              }
            },
            {
              "id": "java/XSS/test",
              "name": "XSS/test",
              "shortDescription": {
                "text": "Cross-site Scripting (XSS)"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser's Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they've been correctly escaped in the application code and in this way the attempted attack is diverted.\n\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware.\n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user's browser.|\n|**DOM-based**|Client|The attacker forces the user's browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code:\n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches.\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents.\n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/lutece-platform/lutece-core/commit/5387450fe0f3cf1b705bda89d553a6f67bc342b6?diff=split#diff-015efa4f075bbbac52efd486f29f3ca5L80",
                    "lines": [
                      {
                        "line": " *             the io exception",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "protected void processRequest( HttpServletRequest request, HttpServletResponse response ) throws ServletException, IOException",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String strValue = request.getParameter( PARAMETER_DATA );",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String strValueReturn = ( strValue != null ) ? EditorBbcodeService.getInstance( ).parse( strValue ) : \"\";",
                        "lineNumber": 82,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    String strEscaped = StringEscapeUtils.escapeHtml( strValue );",
                        "lineNumber": 84,
                        "lineChange": "added"
                      },
                      {
                        "line": "    String strValueReturn = ( strValue != null ) ? EditorBbcodeService.getInstance( ).parse( strEscaped ) : \"\";",
                        "lineNumber": 85,
                        "lineChange": "added"
                      },
                      {
                        "line": "    OutputStream out = response.getOutputStream( );",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "    out.write( strValueReturn.getBytes( AppPropertiesService.getProperty( PROPERTY_ENCODING ) ) );",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "    out.flush( );",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "    out.close( );",
                        "lineNumber": 89,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/square/keywhiz/commit/b08aeb5d31e17cd3706f646c595884181813121b?diff=split#diff-37c8fdba6768ae3e9126a316519ae714L35",
                    "lines": [
                      {
                        "line": "}",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "@Override protected void doPost(HttpServletRequest req, HttpServletResponse resp)",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "    throws ServletException, IOException {",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "  String path = req.getPathInfo();",
                        "lineNumber": 36,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  String path = StringEscapeUtils.escapeHtml4(req.getPathInfo());",
                        "lineNumber": 37,
                        "lineChange": "added"
                      },
                      {
                        "line": "  if(path != null && path.equals(\"/enable\")){",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "    mshc.setHealthy(true);",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "  } else if(path != null && path.equals(\"/disable\")) {",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "    mshc.setHealthy(false);",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "  } else {",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "    resp.sendError(HttpServletResponse.SC_NOT_FOUND,",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "        \"Need to pass /status/enable or /status/disable, not /status\" + path);",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 46,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/apereo/cas/commit/9d81e9ba85945b0d0caaab58b10bf0c3b2e0af73?diff=split#diff-d950cb17562422f18fa1b11dc72e57deL72",
                    "lines": [
                      {
                        "line": "@Override",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "public final boolean preHandle(final HttpServletRequest request, final HttpServletResponse response, final Object o) throws Exception {",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // we only care about post because that's the only instance where we can get anything useful besides IP address.",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!\"POST\".equals(request.getMethod())) {",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return true;",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (exceedsThreshold(request)) {",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "        recordThrottle(request);",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "        response.sendError(403, \"Access Denied for user [\" + request.getParameter(usernameParameter)",
                        "lineNumber": 79,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        final String username = StringEscapeUtils.escapeHtml4(request.getParameter(usernameParameter));",
                        "lineNumber": 81,
                        "lineChange": "added"
                      },
                      {
                        "line": "        response.sendError(403, \"Access Denied for user [\" + username",
                        "lineNumber": 82,
                        "lineChange": "added"
                      },
                      {
                        "line": "                            + \" from IP Address [\" + request.getRemoteAddr() + \"]\");",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return false;",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": " * @param request the request",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "protected void recordThrottle(final HttpServletRequest request) {",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "    logger.warn(\"Throttling submission from {}.  More than {} failed login attempts within {} seconds.\",",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "            new Object[] {request.getRemoteAddr(), failureThreshold, failureRangeInSeconds});",
                        "lineNumber": 147,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Also started a IT testing harness to test servlets with a live sling instance",
                  "* using properties file so that spring boot can read it too"
                ],
                "precision": "very-high",
                "repoDatasetSize": 308,
                "cwe": [
                  "CWE-79"
                ]
              }
            },
            {
              "id": "java/XXE",
              "name": "XXE",
              "shortDescription": {
                "text": "XML External Entity (XXE) Injection"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "\n## Details\n\nFor convenience, XML documents can use system identifiers to enable access to stored content, whether local or remote. The XML processor then uses the system identifier to access the resource rather than using the URI. When this weakness exists, the application permits user-supplied data, which could include the address of an XML external identity, to be passed directly to the XML parser. The application will then attempt to retrieve documents from outside of secure, controlled areas.\n\nAttackers can exploit this weakness to expose sensitive data, execute port scanning on the server side, or launch a denial-of-service attack (DoS) such as Billion Laughs.\n\n### Best practices for prevention\n\n* When possible, disable loading of data from external entities. The method of doing this will vary based on the language and XML parser being used.\n* Use a local, static document type definitions (DTDs) and ensure that external DTDs are disallowed entirely.\n* If user input cannot be avoided, perform validation against an allowlist of possible data sources. However, as long as external DTDs are allowed, XML code remains inherently vulnerable to attacks exploiting this weakness.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/Unidata/netcdf-java/commit/475707c10fd20b92a48187aad1ac6379fe126e32?diff=split#diff-2ab50dd3fd1834707ceae5e424963a52L98",
                    "lines": [
                      {
                        "line": "static private org.jdom.Document getCapabilities(String endpoint) throws IOException {",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "  org.jdom.Document doc;",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "  HttpMethod method = null;",
                        "lineNumber": 97,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  HTTPMethod method = null;",
                        "lineNumber": 97,
                        "lineChange": "added"
                      },
                      {
                        "line": "  try {",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "    method = CdmRemote.sendQuery(endpoint, \"req=capabilities\");",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "    InputStream in = method.getResponseBodyAsStream();",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "    SAXBuilder builder = new SAXBuilder(false);",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "    doc = builder.build(in);",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "  } catch (Throwable t) {",
                        "lineNumber": 104,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/wirecardBrasil/mockkid/commit/002008cf918a84f962f2fe27cbdb4ba2685c6ae0?diff=split#diff-b441fb2c8c0aa00121642142978b8a0bL18",
                    "lines": [
                      {
                        "line": "private static final Logger logger = LoggerFactory.getLogger(XMLBodyVariableResolver.class);",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "public static String extractValueFromXml(String name, HttpServletRequest request) {",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "        DocumentBuilderFactory builderFactory =",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "                DocumentBuilderFactory.newInstance();",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "        DocumentBuilder builder = builderFactory.newDocumentBuilder();",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Document document = builder.parse(request.getInputStream());",
                        "lineNumber": 22,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        Document document = builder.parse(((MockkidRequest) request).getSafeInputStream());",
                        "lineNumber": 23,
                        "lineChange": "added"
                      },
                      {
                        "line": "        XPath xPath =  XPathFactory.newInstance().newXPath();",
                        "lineNumber": 25,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/IanDarwin/javasrc/commit/8251ef48893e6333dee02e29925c16ba933d7d14?diff=split#diff-f4d7011ca260d567d50d5aa022009b3dL17",
                    "lines": [
                      {
                        "line": " */",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "public class SAXLister {",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static void main(String[] args) throws Exception {",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "    new SAXLister(args);",
                        "lineNumber": 19,
                        "lineChange": "added"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 20,
                        "lineChange": "added"
                      },
                      {
                        "line": "  ",
                        "lineNumber": 21,
                        "lineChange": "added"
                      },
                      {
                        "line": "  public SAXLister(String[] args) throws SAXException, IOException {",
                        "lineNumber": 22,
                        "lineChange": "added"
                      },
                      {
                        "line": "    XMLReader parser = XMLReaderFactory",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "        .createXMLReader(\"org.apache.xerces.parsers.SAXParser\");",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // should load properties rather than hardcoding class name",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "    parser.setContentHandler(new PeopleHandler());",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "    parser.parse(args.length == 1 ? args[0] : \"parents.xml\");",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "  ",
                        "lineNumber": 29,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Move loadind XML documents from streams to XML utils class.",
                  "Added support for File comparator",
                  "Adding unit tests"
                ],
                "precision": "very-high",
                "repoDatasetSize": 110,
                "cwe": [
                  "CWE-611"
                ]
              }
            },
            {
              "id": "java/JndiInjection/test",
              "name": "JndiInjection/test",
              "shortDescription": {
                "text": "Java Naming and Directory Interface (JNDI) Injection"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nJava Naming and Directory Interface (JNDI) is an application programming interface (API) that provides naming and directory functionality to applications written using the Java programming language. User provided data can be provided to look up data and resources (in the form of Java objects) via a name. This may result in a Java Naming and Directory Interface (JNDI) Injection vulnerability.\n\n### Best practices for prevention\n- Don't pass untrusted data to JNDI Lookup Functions.\n\n### References\n\n* [JNDI injection in Java](https://cwe.mitre.org/data/definitions/215.html)\n* [The Log4j vulnerability and its impact on software supply chain security](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.developerexceptionpageextensions.usedeveloperexceptionpage?view=aspnetcore-5.0)",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/apache/log4j/commit/7f780e868518f6ffabffb494ad0c9b2accdeeddf?diff=split#diff-febea0b4a852e21f833bbf8443b732e4L35",
                    "lines": [
                      {
                        "line": "static public void main(String[] args) {",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if(args.length != 3) {",
                        "lineNumber": 35,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  if(args.length != 5) {",
                        "lineNumber": 48,
                        "lineChange": "added"
                      },
                      {
                        "line": "    usage(\"Wrong number of arguments.\");",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "String tcfBindingName = args[0];",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "String topicBindingName = args[1];",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "PropertyConfigurator.configure(args[2]);",
                        "lineNumber": 41,
                        "lineChange": "removed"
                      },
                      {
                        "line": "String username = args[2];",
                        "lineNumber": 54,
                        "lineChange": "added"
                      },
                      {
                        "line": "String password = args[3];",
                        "lineNumber": 55,
                        "lineChange": "added"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "  Context ctx = new InitialContext();",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "  TopicConnectionFactory topicConnectionFactory;",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "  topicConnectionFactory = (TopicConnectionFactory) lookup(ctx,",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                                           tcfBindingName);",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                                 Session.AUTO_ACKNOWLEDGE);",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "Topic topic = (Topic)ctx.lookup(topicBindingName);",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "protected",
                        "lineNumber": 87,
                        "lineChange": "removed"
                      },
                      {
                        "line": "static",
                        "lineNumber": 88,
                        "lineChange": "removed"
                      },
                      {
                        "line": "Object lookup(Context ctx, String name) throws NamingException {",
                        "lineNumber": 89,
                        "lineChange": "removed"
                      },
                      {
                        "line": "protected static Object lookup(Context ctx, String name) throws NamingException {",
                        "lineNumber": 111,
                        "lineChange": "added"
                      },
                      {
                        "line": "  try {",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return ctx.lookup(name);",
                        "lineNumber": 113,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/DawnScience/dawn-workflow/commit/82166afa7f022bc7eb8c8c5f9fb947ecc082857d?diff=split#diff-4a7e6ac2eb5f5192d523afddfe9c83d9L63",
                    "lines": [
                      {
                        "line": "try {",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "  String hostName = System.getProperty(\"org.dawb.workbench.jmx.host.name\");",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (hostName==null) hostName = InetAddress.getLocalHost().getHostName();",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (hostName==null) hostName = InetAddress.getLocalHost().getHostAddress();",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (hostName==null) hostName = \"localhost\";",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "  ",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "  currentPort      = getFreePort(startPort, forcePort);",
                        "lineNumber": 66,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  currentPort      = getFreePort(startPort);",
                        "lineNumber": 65,
                        "lineChange": "added"
                      },
                      {
                        "line": "  serverUrl        = new JMXServiceURL(\"service:jmx:rmi:///jndi/rmi://\"+hostName+\":\"+currentPort+\"/workbench\");",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "  REMOTE_WORKBENCH = new ObjectName(RemoteWorkbenchManager.class.getPackage().getName()+\":type=RemoteWorkbench\");",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "} catch (Exception e) {",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 143,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  ",
                        "lineNumber": 144,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  JMXConnector  conn = JMXConnectorFactory.connect(serverUrl);",
                        "lineNumber": 145,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  server             = conn.getMBeanServerConnection();",
                        "lineNumber": 146,
                        "lineChange": "removed"
                      },
                      {
                        "line": "          if (server == null) throw new NullPointerException(\"MBeanServerConnection is null\");",
                        "lineNumber": 147,
                        "lineChange": "removed"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/rhq-project/rhq/commit/ce9f16ca1b4a628e51bbfa1494daaf9b65f88221?diff=split#diff-cdba033b13bc9033fdb28f329860dc5cL281",
                    "lines": [
                      {
                        "line": "    hostname = cmdLine.getOptionValue(\"n\");",
                        "lineNumber": 278,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 279,
                        "lineChange": "none"
                      },
                      {
                        "line": "    hostname = InetAddress.getLocalHost().getHostName();",
                        "lineNumber": 280,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    hostname = InetAddress.getLocalHost().getHostAddress();",
                        "lineNumber": 280,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 281,
                        "lineChange": "none"
                      },
                      {
                        "line": "deploymentOptions.setListenAddress(hostname);",
                        "lineNumber": 282,
                        "lineChange": "none"
                      },
                      {
                        "line": "deploymentOptions.setRpcAddress(hostname);",
                        "lineNumber": 283,
                        "lineChange": "none"
                      },
                      {
                        "line": "// TODO add support for getting updated seeds list",
                        "lineNumber": 285,
                        "lineChange": "none"
                      },
                      {
                        "line": "// obtain the list either from the RHQ server or directly from querying the",
                        "lineNumber": 287,
                        "lineChange": "none"
                      },
                      {
                        "line": "// database.",
                        "lineNumber": 288,
                        "lineChange": "none"
                      },
                      {
                        "line": "String seeds = cmdLine.getOptionValue(\"seeds\", hostname);",
                        "lineNumber": 289,
                        "lineChange": "none"
                      },
                      {
                        "line": "deploymentOptions.setSeeds(seeds);",
                        "lineNumber": 290,
                        "lineChange": "none"
                      },
                      {
                        "line": "    log.info(\"Updating rhq-server.properties...\");",
                        "lineNumber": 370,
                        "lineChange": "none"
                      },
                      {
                        "line": "    serverPropertiesUpdater.update(\"rhq.cassandra.seeds\",",
                        "lineNumber": 371,
                        "lineChange": "none"
                      },
                      {
                        "line": "        getSeedsProperty(hostname, jmxPort, nativeTransportPort));",
                        "lineNumber": 372,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 373,
                        "lineChange": "none"
                      },
                      {
                        "line": "boolean checkStatus = Boolean.parseBoolean(cmdLine.getOptionValue(\"check-status\", \"true\"));",
                        "lineNumber": 380,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (checkStatus || isWindows()) { // no reliable pid file on windows",
                        "lineNumber": 381,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (verifyNodeIsUp(hostname, jmxPort, 5, 3000)) {",
                        "lineNumber": 382,
                        "lineChange": "none"
                      },
                      {
                        "line": "        log.info(\"RHQ Storage Node is up and running and ready to service client requests\");",
                        "lineNumber": 383,
                        "lineChange": "none"
                      },
                      {
                        "line": "        log.info(\"Installation of the storage node has completed successfully.\");",
                        "lineNumber": 384,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 472,
                        "lineChange": "none"
                      },
                      {
                        "line": "private String getSeedsProperty(String hostname, int jmxPort, int nativeTransportPort) {",
                        "lineNumber": 474,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return hostname + \"|\" + jmxPort + \"|\" + nativeTransportPort;",
                        "lineNumber": 475,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 476,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 581,
                        "lineChange": "none"
                      },
                      {
                        "line": "private boolean verifyNodeIsUp(String address, int jmxPort, int retries, long timeout) throws Exception {",
                        "lineNumber": 583,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String url = \"service:jmx:rmi:///jndi/rmi://\" + address + \":\" + jmxPort + \"/jmxrmi\";",
                        "lineNumber": 584,
                        "lineChange": "none"
                      },
                      {
                        "line": "    JMXServiceURL serviceURL = new JMXServiceURL(url);",
                        "lineNumber": 585,
                        "lineChange": "none"
                      },
                      {
                        "line": "    JMXConnector connector = null;",
                        "lineNumber": 586,
                        "lineChange": "none"
                      },
                      {
                        "line": "    MBeanServerConnection serverConnection = null;",
                        "lineNumber": 587,
                        "lineChange": "none"
                      },
                      {
                        "line": "for (int i = 0; i < retries; ++i) {",
                        "lineNumber": 598,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {",
                        "lineNumber": 599,
                        "lineChange": "none"
                      },
                      {
                        "line": "        connector = JMXConnectorFactory.connect(serviceURL, env);",
                        "lineNumber": 600,
                        "lineChange": "none"
                      },
                      {
                        "line": "        serverConnection = connector.getMBeanServerConnection();",
                        "lineNumber": 601,
                        "lineChange": "none"
                      },
                      {
                        "line": "        ObjectName storageService = new ObjectName(\"org.apache.cassandra.db:type=StorageService\");",
                        "lineNumber": 602,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "- Added new method getLoggerName() in LoggingEvent class.",
                  "The javadocs now mark\nthe categoryName and level fields as deprecated.",
                  "The\ngetLoggerName is the preferred way for accessing the logger\nname."
                ],
                "precision": "very-high",
                "repoDatasetSize": 8,
                "cwe": [
                  "CWE-074"
                ]
              }
            },
            {
              "id": "java/XXE/test",
              "name": "XXE/test",
              "shortDescription": {
                "text": "XML External Entity (XXE) Injection"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nFor convenience, XML documents can use system identifiers to enable access to stored content, whether local or remote. The XML processor then uses the system identifier to access the resource rather than using the URI. When this weakness exists, the application permits user-supplied data, which could include the address of an XML external identity, to be passed directly to the XML parser. The application will then attempt to retrieve documents from outside of secure, controlled areas.\n\nAttackers can exploit this weakness to expose sensitive data, execute port scanning on the server side, or launch a denial-of-service attack (DoS) such as Billion Laughs.\n\n### Best practices for prevention\n\n* When possible, disable loading of data from external entities. The method of doing this will vary based on the language and XML parser being used.\n* Use a local, static document type definitions (DTDs) and ensure that external DTDs are disallowed entirely.\n* If user input cannot be avoided, perform validation against an allowlist of possible data sources. However, as long as external DTDs are allowed, XML code remains inherently vulnerable to attacks exploiting this weakness.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/Unidata/netcdf-java/commit/475707c10fd20b92a48187aad1ac6379fe126e32?diff=split#diff-2ab50dd3fd1834707ceae5e424963a52L98",
                    "lines": [
                      {
                        "line": "static private org.jdom.Document getCapabilities(String endpoint) throws IOException {",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "  org.jdom.Document doc;",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "  HttpMethod method = null;",
                        "lineNumber": 97,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  HTTPMethod method = null;",
                        "lineNumber": 97,
                        "lineChange": "added"
                      },
                      {
                        "line": "  try {",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "    method = CdmRemote.sendQuery(endpoint, \"req=capabilities\");",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "    InputStream in = method.getResponseBodyAsStream();",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "    SAXBuilder builder = new SAXBuilder(false);",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "    doc = builder.build(in);",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "  } catch (Throwable t) {",
                        "lineNumber": 104,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/wirecardBrasil/mockkid/commit/002008cf918a84f962f2fe27cbdb4ba2685c6ae0?diff=split#diff-b441fb2c8c0aa00121642142978b8a0bL18",
                    "lines": [
                      {
                        "line": "private static final Logger logger = LoggerFactory.getLogger(XMLBodyVariableResolver.class);",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "public static String extractValueFromXml(String name, HttpServletRequest request) {",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "        DocumentBuilderFactory builderFactory =",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "                DocumentBuilderFactory.newInstance();",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "        DocumentBuilder builder = builderFactory.newDocumentBuilder();",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Document document = builder.parse(request.getInputStream());",
                        "lineNumber": 22,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        Document document = builder.parse(((MockkidRequest) request).getSafeInputStream());",
                        "lineNumber": 23,
                        "lineChange": "added"
                      },
                      {
                        "line": "        XPath xPath =  XPathFactory.newInstance().newXPath();",
                        "lineNumber": 25,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/IanDarwin/javasrc/commit/8251ef48893e6333dee02e29925c16ba933d7d14?diff=split#diff-f4d7011ca260d567d50d5aa022009b3dL17",
                    "lines": [
                      {
                        "line": " */",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "public class SAXLister {",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public static void main(String[] args) throws Exception {",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "    new SAXLister(args);",
                        "lineNumber": 19,
                        "lineChange": "added"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 20,
                        "lineChange": "added"
                      },
                      {
                        "line": "  ",
                        "lineNumber": 21,
                        "lineChange": "added"
                      },
                      {
                        "line": "  public SAXLister(String[] args) throws SAXException, IOException {",
                        "lineNumber": 22,
                        "lineChange": "added"
                      },
                      {
                        "line": "    XMLReader parser = XMLReaderFactory",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "        .createXMLReader(\"org.apache.xerces.parsers.SAXParser\");",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // should load properties rather than hardcoding class name",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "    parser.setContentHandler(new PeopleHandler());",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "    parser.parse(args.length == 1 ? args[0] : \"parents.xml\");",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "  ",
                        "lineNumber": 29,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Move loadind XML documents from streams to XML utils class.",
                  "Added support for File comparator",
                  "Adding unit tests"
                ],
                "precision": "very-high",
                "repoDatasetSize": 110,
                "cwe": [
                  "CWE-611"
                ]
              }
            },
            {
              "id": "java/TLS",
              "name": "TLS",
              "shortDescription": {
                "text": "Inadequate Encryption Strength"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "\n## Details\n\nImplementing encryption for the transmission and storage of sensitive information is essential. But encryption standards are constantly changing since attackers have more and more powerful resources at their disposal-along with more sophisticated attack algorithms. This means that encryption is only useful if it meets current standards appropriate for the type of data being transmitted or stored.\nWhen organizations use weakly encoded passwords or weak hashes (especially when they also utilize single-factor authentication, which places too much emphasis on passwords), attackers can potentially gain unauthorized access through a brute-force attack.\n\n### Best practices for prevention\n* Understand best practices of contemporary encryption algorithms and techniques.\n* Avoid encryption algorithms and techniques that are widely known to be outdated (for example, DES).\n* Implement multi-factor authentication to minimize reliance on a single factor, such as a password, that is too susceptible to brute-force attacks.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/apache/cloudstack/commit/91f7012b015249d9d74dace8874ee8f38b54bfc2?diff=split#diff-5604a4e589dc38cc8d80f2f4020c2a23L53",
                    "lines": [
                      {
                        "line": "public static SSLContext getSSLContext() throws NoSuchAlgorithmException {",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return SSLContext.getInstance(\"TLSv1\");",
                        "lineNumber": 52,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    return SSLContext.getInstance(\"TLSv1.2\");",
                        "lineNumber": 69,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 70,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/MissionCriticalCloud/cosmic/commit/3a4004a34b42e30a49a1c48f1ff57e5f3ca26913?diff=split#diff-49bfef0c8d16a2c34d787d4fca65e2e7L35",
                    "lines": [
                      {
                        "line": "public static SSLContext getSSLContext() throws NoSuchAlgorithmException {",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return SSLContext.getInstance(\"TLSv1\");",
                        "lineNumber": 34,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    return SSLContext.getInstance(\"TLSv1.2\");",
                        "lineNumber": 34,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 35,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/hypercube1024/firefly/commit/e2e4d7810c9bb202bbef3d5022e3b13447f102dd?diff=split#diff-fb5cd0d3953731ed2bdb241178f1ce05L32",
                    "lines": [
                      {
                        "line": "  tmf.init(ks);",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "  sslContext = SSLContext.getInstance(\"TLS\");",
                        "lineNumber": 31,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  sslContext = SSLContext.getInstance(\"TLSv1.2\");",
                        "lineNumber": 31,
                        "lineChange": "added"
                      },
                      {
                        "line": "  sslContext.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "return sslContext;",
                        "lineNumber": 33,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Configuring TSL/SSL now supports property placeholders.",
                  "support for TLS config tweaks",
                  "Temporarily peg SSL version to TLSv1.2."
                ],
                "precision": "very-high",
                "repoDatasetSize": 78,
                "cwe": [
                  "CWE-326"
                ]
              }
            },
            {
              "id": "java/PT/test",
              "name": "PT/test",
              "shortDescription": {
                "text": "Path Traversal"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/google/j2objc/commit/1b271d8b25c99a91547a19f16f71c048c3164156?diff=split#diff-33b6b27033cb88022415e8cd32b1807cL244",
                    "lines": [
                      {
                        "line": " * Extract a ZipEntry to the specified directory.",
                        "lineNumber": 241,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 242,
                        "lineChange": "none"
                      },
                      {
                        "line": "public File extractZipEntry(File dir, ZipFile zipFile, ZipEntry entry) throws IOException {",
                        "lineNumber": 243,
                        "lineChange": "none"
                      },
                      {
                        "line": "  File outputFile = new File(dir, entry.getName());",
                        "lineNumber": 244,
                        "lineChange": "none"
                      },
                      {
                        "line": "  File parentFile = outputFile.getParentFile();",
                        "lineNumber": 245,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (!parentFile.isDirectory() && !parentFile.mkdirs()) {",
                        "lineNumber": 246,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    throw new IOException(\"Could not extract file to \" + dir.getPath());",
                        "lineNumber": 247,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  if (!outputFile.getCanonicalPath().startsWith(dir.getCanonicalPath() + File.separator)",
                        "lineNumber": 246,
                        "lineChange": "added"
                      },
                      {
                        "line": "      || (!parentFile.isDirectory() && !parentFile.mkdirs())) {",
                        "lineNumber": 247,
                        "lineChange": "added"
                      },
                      {
                        "line": "    throw new IOException(\"Could not extract \" + entry.getName() + \" to \" + dir.getPath());",
                        "lineNumber": 248,
                        "lineChange": "added"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 249,
                        "lineChange": "none"
                      },
                      {
                        "line": "  try (InputStream inputStream = zipFile.getInputStream(entry);",
                        "lineNumber": 250,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileOutputStream outputStream = new FileOutputStream(outputFile)) {",
                        "lineNumber": 251,
                        "lineChange": "none"
                      },
                      {
                        "line": "    byte[] buf = new byte[1024];",
                        "lineNumber": 252,
                        "lineChange": "none"
                      },
                      {
                        "line": "    int n;",
                        "lineNumber": 253,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/blackducksoftware/synopsys-detect/commit/36555b9322986e9560f241d05f2262c29a17663b?diff=split#diff-bc0b5be9b9918488d8fe1dc64584df62L48",
                    "lines": [
                      {
                        "line": "Enumeration<? extends ZipEntry> entries = zipFile.entries();",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "while (entries.hasMoreElements()) {",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "    ZipEntry entry = entries.nextElement();",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Path entryPath = destPath.resolve(entry.getName());",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!entryPath.normalize().startsWith(dest.toPath()))",
                        "lineNumber": 49,
                        "lineChange": "added"
                      },
                      {
                        "line": "        throw new IOException(\"Zip entry contained path traversal\");",
                        "lineNumber": 50,
                        "lineChange": "added"
                      },
                      {
                        "line": "    if (entry.isDirectory()) {",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Files.createDirectories(entryPath);",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Files.createDirectories(entryPath.getParent());",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try (InputStream in = zipFile.getInputStream(entry)) {",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "            try (OutputStream out = new FileOutputStream(entryPath.toFile())) {",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "                IOUtils.copy(in, out);",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }",
                        "lineNumber": 58,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/azkaban/azkaban/commit/3b74a4127c9086cd525252edabc3621febab0428?diff=split#diff-c892cca6401b1e0be4cbca3261b47098L201",
                    "lines": [
                      {
                        "line": "final Enumeration<?> entries = source.entries();",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "while (entries.hasMoreElements()) {",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "  final ZipEntry entry = (ZipEntry) entries.nextElement();",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "  final File newFile = new File(dest, entry.getName());",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (!newFile.getCanonicalPath().startsWith(dest.getCanonicalPath())) {",
                        "lineNumber": 202,
                        "lineChange": "added"
                      },
                      {
                        "line": "    throw new IOException(",
                        "lineNumber": 203,
                        "lineChange": "added"
                      },
                      {
                        "line": "        \"Extracting zip entry would have resulted in a file outside the specified destination\"",
                        "lineNumber": 204,
                        "lineChange": "added"
                      },
                      {
                        "line": "if (entry.isDirectory()) {",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "  newFile.mkdirs();",
                        "lineNumber": 209,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 210,
                        "lineChange": "none"
                      },
                      {
                        "line": "  newFile.getParentFile().mkdirs();",
                        "lineNumber": 211,
                        "lineChange": "none"
                      },
                      {
                        "line": "  final InputStream src = source.getInputStream(entry);",
                        "lineNumber": 212,
                        "lineChange": "none"
                      },
                      {
                        "line": "  try {",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "    final OutputStream output =",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "        new BufferedOutputStream(new FileOutputStream(newFile));",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "      IOUtils.copy(src, output);",
                        "lineNumber": 217,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Test changed key to file.",
                  "* more code cleanup, some tests",
                  "Add option --xcode for Xcode translation testing"
                ],
                "precision": "very-high",
                "repoDatasetSize": 948,
                "cwe": [
                  "CWE-23"
                ]
              }
            },
            {
              "id": "java/Ssrf/test",
              "name": "Ssrf/test",
              "shortDescription": {
                "text": "Server-Side Request Forgery (SSRF)"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\nIn a server-side request forgery attack, a malicious user supplies a URL (an external URL or a network IP address such as 127.0.0.1) to the application's back end. The server then accesses the URL and shares its results, which may include sensitive information such as AWS metadata, internal configuration information, or database contents with the attacker. Because the request comes from the back end, it bypasses access controls, potentially exposing information the user does not have sufficient privileges to receive. The attacker can then exploit this information to gain access, modify the web application, or demand a ransom payment.\n\n### Best practices for prevention\n* Blacklists are problematic and attackers have numerous ways to bypass them; ideally, use a whitelist of all permitted domains and IP addresses.\n* Use authentication even within your own network to prevent exploitation of server-side requests.\n* Implement zero trust and sanitize and validate all URL and header data returning to the server from the user. Strip invalid or suspect characters, then inspect to be certain it contains a valid and expected value.\n* Ideally, avoid sending server requests based on user-provided data altogether.\n* Ensure that you are not sending raw response bodies from the server directly to the client. Only deliver expected responses.\n* Disable suspect and exploitable URL schemas. Common culprits include obscure and little-used schemas such as `file://`, `dict://`, `ftp://`, and `gopher://`.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/httpcache4j/httpcache4j/commit/81f9db7ad6e7e18227b8b5de717c580da15ed7ae?diff=split#diff-99799647d646d0fff0a1b4b465dd5de0L49",
                    "lines": [
                      {
                        "line": "public HTTPResponse resolve(HTTPRequest request) throws IOException {",
                        "lineNumber": 47,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    req = getAuthenticator().preparePreemptiveAuthentication(req);",
                        "lineNumber": 50,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 51,
                        "lineChange": "added"
                      },
                      {
                        "line": "URL url = request.getRequestURI().toURL();",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "URLConnection openConnection = url.openConnection();",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (openConnection instanceof HttpURLConnection) {",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "    HttpURLConnection connection = (HttpURLConnection) openConnection;",
                        "lineNumber": 55,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/LearnLib/alex/commit/cb22c1446dfa65bb405f50baa79ba77866c4c706?diff=split#diff-1723d8f955b61289dccacfea34e7737dL58",
                    "lines": [
                      {
                        "line": "@GET",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "@Produces(MediaType.TEXT_HTML)",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "public Response doGetProxy(@QueryParam(\"url\") String url, @HeaderParam(\"Cookie\") String cookies) {",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "    LOGGER.trace(\"IFrameProxyResource.doGetProxy(\" + url + \", \" + cookies + \").\");",
                        "lineNumber": 58,
                        "lineChange": "added"
                      },
                      {
                        "line": "    try {",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Connection connection = Jsoup.connect(url);",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "        connection = parseAndProcessCookies(connection, cookies);",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "        connection = connection.method(Connection.Method.GET);",
                        "lineNumber": 63,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/dotnet/aspnetcore/commit/e089cfc11cb86d6da786d82ee92aeef1c903f0f5?diff=split#diff-f69c44e82917810b055809e4c47c7e7dL84",
                    "lines": [
                      {
                        "line": "@Override",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "public Single<HttpResponse> send(HttpRequest httpRequest) {",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "@Override",
                        "lineNumber": 99,
                        "lineChange": "added"
                      },
                      {
                        "line": "public Single<HttpResponse> send(HttpRequest httpRequest, String bodyContent) {",
                        "lineNumber": 100,
                        "lineChange": "added"
                      },
                      {
                        "line": "    Request.Builder requestBuilder = new Request.Builder().url(httpRequest.getUrl());",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "    switch (httpRequest.getMethod()) {",
                        "lineNumber": 103,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Support Java 8 class files",
                  "- app requests work in tests",
                  "* Add logic to catch unranked hiscores and display them properly."
                ],
                "precision": "very-high",
                "repoDatasetSize": 233,
                "cwe": [
                  "CWE-918"
                ]
              }
            },
            {
              "id": "java/TimingAttack",
              "name": "TimingAttack",
              "shortDescription": {
                "text": "Observable Timing Discrepancy (Timing Attack)"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\nA timing attack is a form of side-channel attack, meaning it does not take advantage of the way the code is structured, but rather exploits external clues that let an attacker infer the program's state. In a timing attack, program state is inferred from the time it takes to execute a particular operation. For example, an app might use a lookup table of valid session IDs to speed up access.\nWhile this is convenient for validated users, an invalid session ID will take far longer to be rejected (since it's not in the lookup table), giving the attackers a valuable way to engineer a brute-force attack. All they need to do is test a large number of randomly generated session IDs in the hope of discovering a valid one. Once access is granted, through the session ID, the malicious actor may impersonate a legitimate user, executing actions or freely accessing secure data. Through brute force, such as a massive bot attack, this weakness can be successfully exploited to bypass even very strong encryption algorithms.\n\n### Best practices for prevention\n* Implement a constant-time algorithm to ensure that timing is identical regardless of input validity and returned outcome.\n* If a constant-time algorithm is impractical due to a desire to optimize performance, choose another technique such as blinding.\n* Promote an awareness among developers that encryption is not enough if your app is giving off clues to help attackers.\n* Timing attacks often depend on the production environment and are thus difficult to test during development; be sure to use a staging environment as close as possible to production.\n* Choose hardened, reliable libraries for encryption and authentication with side-channel attack protection strategies rather than implementing your own methods.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-208"
                ]
              }
            },
            {
              "id": "java/InsecureCipherNoIntegrity/test",
              "name": "InsecureCipherNoIntegrity/test",
              "shortDescription": {
                "text": "Use of a Broken or Risky Cryptographic Algorithm"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nWhen sensitive information is transmitted with weak encryption, attackers are potentially able to intercept the information and decrypt it, with a wide range of negative consequences. This includes accessing code or content they are not authorized to view and changing or taking down a site or app, often with a demand for ransom. Every developer is aware of the risks of transmitting sensitive information in plain text. Yet many still use outdated or inferior cryptographic methods to protect information under their control. As cryptographic methods grow stronger with time, code must be updated to incorporate more modern and secure cryptography.\n\n### Best practices for prevention\n* Avoid using DES, and use AES (in a secure mode, such as Galois/Counter Mode) or another strong encryption algorithm instead.\n* Be aware of outdated hashes, such as MD5 and SHA1 (along with many others); recognize and implement current cryptographic standards instead.\n* Never use custom or DIY security and cryptographic methods; instead, use methods that are part of an accepted library or framework.\n* Ensure that code dealing with cryptographic methods is highly modular and can be easily replaced as security standards change.\n* Increase developer awareness of proper encryption key management and protection to ensure best practices throughout the application.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/terracotta-bank/terracotta-bank/commit/a27453b52859d32ef25694869c1662a9493c621c?diff=split#diff-49444057459eecb4ff09662c3beab114L95",
                    "lines": [
                      {
                        "line": "String ivHeader = request.getHeader(\"X-Encryption-Iv\");",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "byte[] iv = Base64.getDecoder().decode(ivHeader);",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");",
                        "lineNumber": 94,
                        "lineChange": "removed"
                      },
                      {
                        "line": "cipher.init(Cipher.DECRYPT_MODE, secretKey(), new IvParameterSpec(iv));",
                        "lineNumber": 95,
                        "lineChange": "removed"
                      },
                      {
                        "line": "Cipher cipher = Cipher.getInstance(\"AES/GCM/NoPadding\");",
                        "lineNumber": 95,
                        "lineChange": "added"
                      },
                      {
                        "line": "cipher.init(Cipher.DECRYPT_MODE, secretKey(), new GCMParameterSpec(128, iv));",
                        "lineNumber": 96,
                        "lineChange": "added"
                      },
                      {
                        "line": "cipher.updateAAD(version.getBytes(UTF_8));",
                        "lineNumber": 97,
                        "lineChange": "added"
                      },
                      {
                        "line": "InputStream plain = new CipherInputStream(new Base64InputStream(request.getInputStream()), cipher);",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "\treturn new DecryptedWrapper(request, plain);",
                        "lineNumber": 99,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/oracle/helidon/commit/bd7b527d900fc3c7c5204459f9bf6dabb5de9f3f?diff=split#diff-5ab21f1b0b5ca2653372fd39b4aa40b0L64",
                    "lines": [
                      {
                        "line": "KeySpec keySpec = new PBEKeySpec(masterPassword, salt, 10000, 128);",
                        "lineNumber": 61,
                        "lineChange": "removed"
                      },
                      {
                        "line": "KeySpec keySpec = new PBEKeySpec(masterPassword, salt, 10000, 256);",
                        "lineNumber": 61,
                        "lineChange": "added"
                      },
                      {
                        "line": "SecretKeySpec spec = new SecretKeySpec(secretKeyFactory.generateSecret(keySpec).getEncoded(), \"AES\");",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");",
                        "lineNumber": 63,
                        "lineChange": "removed"
                      },
                      {
                        "line": "cipher.init(cipherMode, spec, new IvParameterSpec(salt));",
                        "lineNumber": 64,
                        "lineChange": "removed"
                      },
                      {
                        "line": "Cipher cipher = Cipher.getInstance(\"AES/GCM/NoPadding\");",
                        "lineNumber": 63,
                        "lineChange": "added"
                      },
                      {
                        "line": "cipher.init(cipherMode, spec, new GCMParameterSpec(128, nonce));",
                        "lineNumber": 64,
                        "lineChange": "added"
                      },
                      {
                        "line": " return cipher;",
                        "lineNumber": 66,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Esri/mapbook-android/commit/29dbb58917955ca69632a80cc189247f6398fdbb?diff=split#diff-9865f4effc693075a16c0a2b0657d46eL84",
                    "lines": [
                      {
                        "line": "public class CredentialCryptographer {",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String TAG = CredentialCryptographer.class.getSimpleName();",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String CIPHER_TYPE = \"AES/GCM/NoPadding\";",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String RSA_MODE =  \"RSA/ECB/PKCS1Padding\";",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String AES_MODE = \"AES/ECB/PKCS7Padding\";",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String AndroidKeyStore = \"AndroidKeyStore\";",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String ALIAS = \"CRED_KEY\";",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "final SecretKey key = (SecretKey) keyStore.getKey(ALIAS, null);",
                        "lineNumber": 236,
                        "lineChange": "none"
                      },
                      {
                        "line": "final Cipher c = Cipher.getInstance(CIPHER_TYPE);",
                        "lineNumber": 238,
                        "lineChange": "none"
                      },
                      {
                        "line": "final File file = new File(getFilePath(encryptedDataFileName));",
                        "lineNumber": 240,
                        "lineChange": "none"
                      },
                      {
                        "line": "byte [] decodedBytes = null;",
                        "lineNumber": 473,
                        "lineChange": "removed"
                      },
                      {
                        "line": "try{",
                        "lineNumber": 474,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  final Cipher c = Cipher.getInstance(AES_MODE, \"BC\");",
                        "lineNumber": 475,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  c.init(Cipher.DECRYPT_MODE, getSecretKey(context));",
                        "lineNumber": 476,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  decodedBytes = c.doFinal(encrypted);",
                        "lineNumber": 477,
                        "lineChange": "removed"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "added versioning and included salt in encrypted byte stream.",
                  "Switch from CBC to GCM"
                ],
                "precision": "very-high",
                "repoDatasetSize": 54,
                "cwe": [
                  "CWE-327"
                ]
              }
            },
            {
              "id": "java/TooSmallRsaKeySizeUsed/test",
              "name": "TooSmallRsaKeySizeUsed/test",
              "shortDescription": {
                "text": "Cryptographic Issues"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nThe category of cryptographic issues refers not to a single specific vulnerability but rather to a wide range of problems surrounding the implementation of cryptography and related security algorithms in programs and web apps. For example, weaknesses in generating the pseudorandom numbers used to create session keys can make keys excessively easy for hackers to guess via brute-force attack algorithms. Another example is when developers use weak hashes to encode passwords and other confidential data, which can lead to collisions that ultimately bypass authentication techniques.\n\nEach individual weakness will obviously require a different strategy, but there are a few common best practices that can help avoid or mitigate attacks.\n\n### Best practices for prevention\n* Implement multi-factor authentication, which relies on two or more factors such as password and SMS confirmation, prior to permitting secure access.\n* Always use a strong hashing algorithm for tighter encryption. Consider an adaptive hash function with built-in salting, although these can have a negative impact on performance.\n* Check all certificate details to verify its validity-not only the issuing entity but expiry, domain, and all other factors.\n* Developers should familiarize themselves with deprecated security algorithms and implement schemes that require greater computational effort to resolve, therefore making them more resistant to current attacks.\n* Implement all software architecture and design around the principle of least privilege, releasing secure information only after authentication as needed for business purposes.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/matthewmccullough/encryption-jvm-bootcamp/commit/ea472a1abc126e9f048e350dbf3258a6c3bb888c?diff=split#diff-8cb247227b9b9984facca2bbba486fd3L25",
                    "lines": [
                      {
                        "line": "public void Initialize() throws Exception",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "  KeyPairGenerator keygen = KeyPairGenerator.getInstance(\"RSA\");",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "  keygen.initialize(512);",
                        "lineNumber": 25,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  keygen.initialize(3072);",
                        "lineNumber": 25,
                        "lineChange": "added"
                      },
                      {
                        "line": "  keyPair = keygen.generateKeyPair();",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 27,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/codeabovelab/haven-platform/commit/1cd80b7f5d0d5f29bc814ab7fb73a1f203f529cb?diff=split#diff-b59758382a60d055818e61235e9adf75L142",
                    "lines": [
                      {
                        "line": "static KeyPair createKeypair() throws Exception {",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "    KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\", \"BC\");",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "    kpg.initialize(1024);",
                        "lineNumber": 142,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    kpg.initialize(2048);",
                        "lineNumber": 142,
                        "lineChange": "added"
                      },
                      {
                        "line": "    return kpg.generateKeyPair();",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 144,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Nordstrom/xrpc/commit/1d04125ef5fd1004b8b86976ef8f00031af2c515?diff=split#diff-a21119d465ff87f08ea795261ecac45fL44",
                    "lines": [
                      {
                        "line": "//Generate an RSA key pair.",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "final KeyPair keypair;",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "KeyPairGenerator keyGen = KeyPairGenerator.getInstance(\"RSA\");",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "keyGen.initialize(1024, null);",
                        "lineNumber": 44,
                        "lineChange": "removed"
                      },
                      {
                        "line": "keyGen.initialize(2048, null);",
                        "lineNumber": 44,
                        "lineChange": "added"
                      },
                      {
                        "line": "keypair = keyGen.generateKeyPair();",
                        "lineNumber": 45,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "generates 2048 RSA key",
                  "So this patch changes the generated key size to 2048"
                ],
                "precision": "very-high",
                "repoDatasetSize": 57,
                "cwe": [
                  "CWE-310"
                ]
              }
            },
            {
              "id": "java/HttpResponseSplitting/test",
              "name": "HttpResponseSplitting/test",
              "shortDescription": {
                "text": "Improper Neutralization of CRLF Sequences in HTTP Headers"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nCRLF is an abbreviation for the terms \"carriage return\" and \"line feed.\" These two special characters are a legacy of old-fashioned printing terminals used in the early days of computing. However, today both are still often used as delimiters between data. When this weakness exists, CR and LF characters (represented respectively in code as `\\r` and `\\n`) are permitted to be present in HTTP headers, usually due to poor planning for data handling during development.\n\nCRLF sequences in HTTP headers are known as \"response splitting\" because these characters effectively split the response from the browser, causing the single line to be accepted as multiple lines by the server (for example, the single line First Line\\r\\nSecond Line would be accepted by the server as two lines of input).\n\nWhile response splitting in itself is not an attack, and can be completely harmless unless exploited, its presence could lead to an injection attack (known as CRLF injection) and a variety of unpredictable and potentially dangerous behavior. This weakness can be exploited in a number of ways, such as page hijacking or cross-user defacement, in which an attacker displays false site content and/or captures confidential information such as credentials. It can even lead to cross-site scripting attacks, in which attackers can cause malicious code to execute in the user's browser.\n\nFor example, the following code is vulnerable:\n\n```\nprotected void doGet(HttpServletRequest request, HttpServletResponse response) {\n  Cookie cookie = new Cookie(\"name\", request.getParameter(\"name\"));\n  response.addCookie(cookie);\n}\n```\n\nbecause the user may provide a name parameter with a value like `XYZ\\r\\nHTTP/1.1 200 OK\\nATTACKER CONTROLLED`. In this case, they will produce a second HTTP response:\n\n```\nHTTP/1.1 200 OK\nATTACKER CONTROLLED\n```\n\nA possible fix is to remove all non-alphanumerical characters:\n\n```\nprotected void doGet(HttpServletRequest request, HttpServletResponse response) {\n  String name = request.getParameter(\"name\")\n      .replaceAll(\"[^a-zA-Z ]\", \"\");\n  Cookie cookie = new Cookie(\"name\", name);\n  response.addCookie(cookie);\n}\n```\n\nIn this case, the attacker would be unable to produce a second HTTP response.\n\n\n### Best practices for prevention\n* Assume all input is potentially malicious. Define acceptable responses wherever possible, and if not possible, encode CR and LF characters to prevent header splitting.\n* Replace both `\\r` (carriage return) and `\\n` (line feed) with \"\" (empty string)-many platforms handle these characters interchangeably so the weakness may still exist if one of the two is permitted.\nFollow best practices and strip all other special characters (\", /, \\, ;, etc., as well as spaces) wherever possible.\nBe sure to sanitize special characters in both directions-from the browser to the server and also in data sent back to the browser.\nIdeally, adopt current development resources, such as languages and libraries, that block CR and LF injection in headers.\nBe vigilant with all input types that could potentially be tampered with or modified at the user end (intentionally or unintentionally), which could lead to injection attacks. These include GET, POST, cookies, and other HTTP headers.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/gzsll/TLint/commit/26407f9d7fc2fcc917cca4228addd34d7b7a0339?diff=split#diff-ee1b33b10d96e72dd93d67632f828d50L34",
                    "lines": [
                      {
                        "line": "Request original = chain.request();",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (!TextUtils.isEmpty(mUserStorage.getCookie())) {",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Request request = original.newBuilder().addHeader(\"Cookie\", \"u=\" + mUserStorage.getCookie() + \";\").build();",
                        "lineNumber": 33,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    Request request = original.newBuilder().addHeader(\"Cookie\", \"u=\" + URLEncoder.encode(mUserStorage.getCookie()) + \";\").build();",
                        "lineNumber": 34,
                        "lineChange": "added"
                      },
                      {
                        "line": "    return chain.proceed(request);",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 36,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/http-builder-ng/http-builder-ng/commit/d533d480a249d279d5d281c07304150e300ce4ce?diff=split#diff-6becea663e2a2b1de3ad29a739f25bb5L260",
                    "lines": [
                      {
                        "line": "//technically cookies are headers, so add them here",
                        "lineNumber": 258,
                        "lineChange": "none"
                      },
                      {
                        "line": "List<Cookie> cookies = e.cookies(new ArrayList());",
                        "lineNumber": 259,
                        "lineChange": "removed"
                      },
                      {
                        "line": "List<Cookie> cookies = cr.actualCookies(new ArrayList());",
                        "lineNumber": 259,
                        "lineChange": "added"
                      },
                      {
                        "line": "for(Cookie cookie : cookies) {",
                        "lineNumber": 260,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cookieStore.addCookie(cookie);",
                        "lineNumber": 261,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 262,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/apache/commons-vfs/commit/e07f9edd339973fb532ecfa88928884c75794957?diff=split#diff-c81d6f105c7fe7ff1f4734a6c1a3cbf6L344",
                    "lines": [
                      {
                        "line": "    final FileSystemOptions fileSystemOptions) {",
                        "lineNumber": 341,
                        "lineChange": "none"
                      },
                      {
                        "line": "final CookieStore cookieStore = new BasicCookieStore();",
                        "lineNumber": 342,
                        "lineChange": "none"
                      },
                      {
                        "line": "final Cookie[] cookies = builder.getCookies(fileSystemOptions);",
                        "lineNumber": 343,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (cookies != null) {",
                        "lineNumber": 345,
                        "lineChange": "none"
                      },
                      {
                        "line": "    for (Cookie cookie : cookies) {",
                        "lineNumber": 346,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    for (final Cookie cookie : cookies) {",
                        "lineNumber": 346,
                        "lineChange": "added"
                      },
                      {
                        "line": "        cookieStore.addCookie(cookie);",
                        "lineNumber": 347,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 348,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 349,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Support HTTP Range requests for resuming interrupted file downloads.",
                  "* integration test server post response and logging",
                  "Added usage of java Cookies and other changes"
                ],
                "precision": "very-high",
                "repoDatasetSize": 232,
                "cwe": [
                  "CWE-113"
                ]
              }
            },
            {
              "id": "java/InsecureDefaultAesCipher/test",
              "name": "InsecureDefaultAesCipher/test",
              "shortDescription": {
                "text": "Use of a Broken or Risky Cryptographic Algorithm"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nWhen sensitive information is transmitted with weak encryption, attackers are potentially able to intercept the information and decrypt it, with a wide range of negative consequences. This includes accessing code or content they are not authorized to view and changing or taking down a site or app, often with a demand for ransom. Every developer is aware of the risks of transmitting sensitive information in plain text. Yet many still use outdated or inferior cryptographic methods to protect information under their control. As cryptographic methods grow stronger with time, code must be updated to incorporate more modern and secure cryptography.\n\n### Best practices for prevention\n* Avoid using DES, and use AES (in a secure mode, such as Galois/Counter Mode) or another strong encryption algorithm instead.\n* Be aware of outdated hashes, such as MD5 and SHA1 (along with many others); recognize and implement current cryptographic standards instead.\n* Never use custom or DIY security and cryptographic methods; instead, use methods that are part of an accepted library or framework.\n* Ensure that code dealing with cryptographic methods is highly modular and can be easily replaced as security standards change.\n* Increase developer awareness of proper encryption key management and protection to ensure best practices throughout the application.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/Esri/mapbook-android/commit/29dbb58917955ca69632a80cc189247f6398fdbb?diff=split#diff-9865f4effc693075a16c0a2b0657d46eL84",
                    "lines": [
                      {
                        "line": "public class CredentialCryptographer {",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String TAG = CredentialCryptographer.class.getSimpleName();",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String CIPHER_TYPE = \"AES/GCM/NoPadding\";",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String RSA_MODE =  \"RSA/ECB/PKCS1Padding\";",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String AES_MODE = \"AES/ECB/PKCS7Padding\";",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String AndroidKeyStore = \"AndroidKeyStore\";",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private static final String ALIAS = \"CRED_KEY\";",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "final SecretKey key = (SecretKey) keyStore.getKey(ALIAS, null);",
                        "lineNumber": 236,
                        "lineChange": "none"
                      },
                      {
                        "line": "final Cipher c = Cipher.getInstance(CIPHER_TYPE);",
                        "lineNumber": 238,
                        "lineChange": "none"
                      },
                      {
                        "line": "final File file = new File(getFilePath(encryptedDataFileName));",
                        "lineNumber": 240,
                        "lineChange": "none"
                      },
                      {
                        "line": "byte [] decodedBytes = null;",
                        "lineNumber": 473,
                        "lineChange": "removed"
                      },
                      {
                        "line": "try{",
                        "lineNumber": 474,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  final Cipher c = Cipher.getInstance(AES_MODE, \"BC\");",
                        "lineNumber": 475,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  c.init(Cipher.DECRYPT_MODE, getSecretKey(context));",
                        "lineNumber": 476,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  decodedBytes = c.doFinal(encrypted);",
                        "lineNumber": 477,
                        "lineChange": "removed"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/jenkinsci/jenkins/commit/1ac357c2ea2cac85acc222aa5feb9a25c6b4346e?diff=split#diff-3f1937871076df5e4440785f2ac5ddd6L120",
                    "lines": [
                      {
                        "line": "String base64 = req.getHeader(\"X-ConsoleAnnotator\");",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (base64!=null) {",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Cipher sym = Cipher.getInstance(\"AES\");",
                        "lineNumber": 119,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    Cipher sym = Secret.getCipher(\"AES\");",
                        "lineNumber": 117,
                        "lineChange": "added"
                      },
                      {
                        "line": "    sym.init(Cipher.DECRYPT_MODE, Hudson.getInstance().getSecretKeyAsAES128());",
                        "lineNumber": 120,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/tasos-py/AES-Encryption-Classes/commit/b11039b5febf20bbe854fc6bb1d401191a4ee29f?diff=split#diff-bfedf423ceee7772f0ec16aa9392fa8dL310",
                    "lines": [
                      {
                        "line": " */",
                        "lineNumber": 307,
                        "lineChange": "removed"
                      },
                      {
                        "line": "private Cipher cipher(int cipherMode, byte[] key, byte[] iv) {",
                        "lineNumber": 308,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  SecretKeySpec keySpec = new SecretKeySpec(key, \"AES\");",
                        "lineNumber": 309,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  IvParameterSpec ivSpec = new IvParameterSpec(iv);",
                        "lineNumber": 310,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  try {",
                        "lineNumber": 311,
                        "lineChange": "removed"
                      },
                      {
                        "line": "   */ ",
                        "lineNumber": 293,
                        "lineChange": "added"
                      },
                      {
                        "line": "  private Cipher cipher(int cipherMode, byte[] key, byte[] iv) {",
                        "lineNumber": 294,
                        "lineChange": "added"
                      },
                      {
                        "line": "      SecretKeySpec keySpec = new SecretKeySpec(key, \"AES\");",
                        "lineNumber": 295,
                        "lineChange": "added"
                      },
                      {
                        "line": "      IvParameterSpec ivSpec = new IvParameterSpec(iv);",
                        "lineNumber": 296,
                        "lineChange": "added"
                      },
                      {
                        "line": "      try {",
                        "lineNumber": 297,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Made changes to support CBC mode encryption",
                  "added all sha and AES tests"
                ],
                "precision": "very-high",
                "repoDatasetSize": 53,
                "cwe": [
                  "CWE-327"
                ]
              }
            },
            {
              "id": "java/TooPermissiveTrustManager/test",
              "name": "TooPermissiveTrustManager/test",
              "shortDescription": {
                "text": "Improper Certificate Validation"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nCommunication through encrypted TLS/SSL protocols can only take place when the server bears a valid certificate associating that server with a valid public-key identity issued by a third-party authority. If certificate validation is cursory or incomplete, this creates a weakness whereby an attacker can spoof one or more certificate details (e.g., expiration date), gaining unauthorized access to confidential data and privileged actions.\n\n### Best practices for prevention\n* Verify all aspects of any certificate provided, particularly chain of trust (issuing authority), host identity, and expiration.\n* Limit the validity period for certificates.\n* Avoid using self-signed certificates, certificate pinning, and wildcard certificates, as these all add levels of convenience but can also lead to loss of control over site/app security.\n* Disable older and insecure protocols (for example, SSL 2.0/3.0, MD5, and 3DES).\n* Ensure that all team members are familiar with current best practices and approaches, such as current TLS protocols.\n* Implement automated and manual testing using current tools and techniques designed to reveal this and related SSL weaknesses (for example, web application scanners).",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/pentaho/pentaho-kettle/commit/5a4014d3e4e7307198635a1d9d1cbe7e868fb889?diff=split#diff-b711fa3a1339a77fb1b62ea5a608f827L143",
                    "lines": [
                      {
                        "line": "  }",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @Override",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public X509Certificate[] getAcceptedIssuers() {",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return null;",
                        "lineNumber": 144,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    return new X509Certificate[0];",
                        "lineNumber": 147,
                        "lineChange": "added"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "};",
                        "lineNumber": 149,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/guardianproject/NetCipher/commit/3b971438ed74870685f404c43feae65fc413d703?diff=split#diff-6f4869070d4eee5c76931a7bf27ed055L179",
                    "lines": [
                      {
                        "line": "}",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "public void checkClientTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "    //not yet implemented",
                        "lineNumber": 179,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    ",
                        "lineNumber": 184,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tdebug (\"WARNING: Client Cert Trust NOT YET IMPLEMENTED\");",
                        "lineNumber": 185,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 671,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif (SHOW_DEBUG_OUTPUT)",
                        "lineNumber": 672,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tLog.d(TAG, msg);",
                        "lineNumber": 673,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 674,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/HtmlUnit/htmlunit/commit/2ab74fb459fa25764fa3c6f56d00cf076fadf69d?diff=split#diff-3070dfb96ed2fae966d731bf849982d1L125",
                    "lines": [
                      {
                        "line": " * {@inheritDoc}",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "public void checkClientTrusted(final X509Certificate[] chain, final String authType) throws CertificateException {",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // Everyone is trusted!",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "    acceptedIssuers_.addAll(Arrays.asList(chain));",
                        "lineNumber": 131,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 132,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Finalize tests for HTTP libraries",
                  "Relates elastic/elasticsearch",
                  "* Allow possibility for pushing trust issue to user"
                ],
                "precision": "very-high",
                "repoDatasetSize": 54,
                "cwe": [
                  "CWE-295"
                ]
              }
            },
            {
              "id": "java/IndirectCommandInjection/test",
              "name": "IndirectCommandInjection/test",
              "shortDescription": {
                "text": "Command Injection"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nWith an OS command injection attack a web application user can pass commands directly to the system shell, attached to a legitimate request. These commands can then be executed on the application server, potentially leading to harmful consequences, including data exposure or deletion. Like code injection attacks, command injection attacks are essentially a failure of data validation. Unlike code injection attacks, which introduce new code, command injection attacks use existing system functions, often taking advantage of the application's unnecessarily high privilege level, increasing the risk of serious harm and reputational damage.\n\n### Best practices for prevention\n- Never trust user input. Assume any input may transmit harmful values.\n- Adopt the principle of least privilege: No application should have a greater access level than needed to run its required tasks.\n- Control user access policies on a task-by-task basis.\n- Don't pass user input directly to the system; use libraries or APIs that lack system access.\n- Where shell commands must be passed, escape values using functions like shlex for Python, or escapeshellarg() for PHP.\n- Sanitize user input with regular expressions to define permitted characters along with maximum string length.\n- Convert special characters such as `& |  ; $ > < \\ !` before passing to the server.\n- Whitelist permitted commands and validate user responses against these expectations.\n- Remember that code injection can take place on multiple fronts: GET and POST requests, but also cookies and HTTP headers.\n- Ensure up-to-date patching across all systems to remediate known vulnerabilities.\n- Educate all team members on safer data handling procedures to prevent attacks.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/apache/joshua/commit/92c797ffdee361adfdf10c91afe7af08d29e6e17?diff=split#diff-438e6e2bf8732a786b739705b7382c48L125",
                    "lines": [
                      {
                        "line": "static String decoderConfigFileName, decoderCommandFileName;",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "public static void main(String[] args) throws Exception",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "  EvaluationMetric.set_knownNames();",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "  System.exit(0);",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else if (args.length == 1) {",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "  processArgsArray(cfgFileToArgsArray(args[0]));",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "  processArgsArray(args);",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "for (int r = 0; r < refsPerSen; ++r) {",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "  println(\"Testing evaluation metric calculation on reference set \" + r + \":\",2);",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "  test_score(refFileName, refsPerSen, r, true,2);",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "  println(\"\",2);",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "println(\"\",1);",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "numParams = countLines(paramsFileName);",
                        "lineNumber": 191,
                        "lineChange": "none"
                      },
                      {
                        "line": "numSentences = countLines(sourceFileName);",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (numSentences * refsPerSen != countLines(refFileName)) {",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "  println(\"Line count mismatch between \" + sourceFileName + \" and \" + refFileName);",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "  System.exit(20);",
                        "lineNumber": 196,
                        "lineChange": "none"
                      },
                      {
                        "line": "// create copy of config file",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "copyFile(decoderConfigFileName,decoderConfigFileName+\".orig.MERT\");",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "// read paramter names",
                        "lineNumber": 212,
                        "lineChange": "none"
                      },
                      {
                        "line": "BufferedReader inFile_names = new BufferedReader(new FileReader(paramsFileName));",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "for (int c = 1; c <= numParams; ++c) {",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "// initialize lambda[]",
                        "lineNumber": 223,
                        "lineChange": "none"
                      },
                      {
                        "line": "Scanner inFile_init = new Scanner(new FileReader(paramsFileName));",
                        "lineNumber": 224,
                        "lineChange": "none"
                      },
                      {
                        "line": "String dummy = \"\";",
                        "lineNumber": 226,
                        "lineChange": "none"
                      },
                      {
                        "line": "// read in reference sentences",
                        "lineNumber": 280,
                        "lineChange": "none"
                      },
                      {
                        "line": "BufferedReader inFile_refs = new BufferedReader(new FileReader(refFileName));",
                        "lineNumber": 282,
                        "lineChange": "none"
                      },
                      {
                        "line": "String line;",
                        "lineNumber": 283,
                        "lineChange": "none"
                      },
                      {
                        "line": "// read in decoder command",
                        "lineNumber": 296,
                        "lineChange": "none"
                      },
                      {
                        "line": "BufferedReader inFile_comm = new BufferedReader(new FileReader(decoderCommandFileName));",
                        "lineNumber": 298,
                        "lineChange": "none"
                      },
                      {
                        "line": "decoderCommand = inFile_comm.readLine();",
                        "lineNumber": 299,
                        "lineChange": "none"
                      },
                      {
                        "line": "inFile_comm.close();",
                        "lineNumber": 300,
                        "lineChange": "none"
                      },
                      {
                        "line": "/******************************/",
                        "lineNumber": 415,
                        "lineChange": "none"
                      },
                      {
                        "line": "createConfigFile(lambda,decoderConfigFileName,decoderConfigFileName+\".orig.MERT\");",
                        "lineNumber": 417,
                        "lineChange": "none"
                      },
                      {
                        "line": "/***************/",
                        "lineNumber": 419,
                        "lineChange": "none"
                      },
                      {
                        "line": " ",
                        "lineNumber": 422,
                        "lineChange": "none"
                      },
                      {
                        "line": "      println(\"Running Joshua decoder...\",1);",
                        "lineNumber": 423,
                        "lineChange": "added"
                      },
                      {
                        "line": "      myDecoder.initializeDecoder(decoderConfigFileName);",
                        "lineNumber": 424,
                        "lineChange": "added"
                      },
                      {
                        "line": "      myDecoder.decodingTestSet(sourceFileName, decoderOutFileName);",
                        "lineNumber": 425,
                        "lineChange": "added"
                      },
                      {
                        "line": "/*",
                        "lineNumber": 427,
                        "lineChange": "added"
                      },
                      {
                        "line": "      println(\"Running decoder...\",1);",
                        "lineNumber": 428,
                        "lineChange": "none"
                      },
                      {
                        "line": " ",
                        "lineNumber": 429,
                        "lineChange": "none"
                      },
                      {
                        "line": "      Runtime rt = Runtime.getRuntime();",
                        "lineNumber": 430,
                        "lineChange": "none"
                      },
                      {
                        "line": "      Process p = rt.exec (decoderCommand);",
                        "lineNumber": 431,
                        "lineChange": "none"
                      },
                      {
                        "line": "      InputStream is = p.getErrorStream();",
                        "lineNumber": 432,
                        "lineChange": "none"
                      },
                      {
                        "line": "      InputStreamReader isr = new InputStreamReader(is);",
                        "lineNumber": 433,
                        "lineChange": "none"
                      },
                      {
                        "line": "println(\"Ensuring proper decoder output.\",2);",
                        "lineNumber": 451,
                        "lineChange": "none"
                      },
                      {
                        "line": "checkFile(decoderOutFileName);",
                        "lineNumber": 453,
                        "lineChange": "none"
                      },
                      {
                        "line": "fixDecoderOutput();",
                        "lineNumber": 455,
                        "lineChange": "none"
                      },
                      {
                        "line": "progress = 0;",
                        "lineNumber": 461,
                        "lineChange": "none"
                      },
                      {
                        "line": "BufferedReader inFile = new BufferedReader(new FileReader(decoderOutFileName));",
                        "lineNumber": 463,
                        "lineChange": "none"
                      },
                      {
                        "line": "String line, candidate_str;",
                        "lineNumber": 464,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (saveInterCfg) {",
                        "lineNumber": 635,
                        "lineChange": "none"
                      },
                      {
                        "line": "  // create config file with current values",
                        "lineNumber": 636,
                        "lineChange": "none"
                      },
                      {
                        "line": "  createConfigFile(lambda, decoderConfigFileName+\".\"+iteration,decoderConfigFileName+\".orig.MERT\");",
                        "lineNumber": 637,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 638,
                        "lineChange": "none"
                      },
                      {
                        "line": "private static void fixDecoderOutput() throws Exception",
                        "lineNumber": 983,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 984,
                        "lineChange": "none"
                      },
                      {
                        "line": "  copyFile(decoderOutFileName,decoderOutFileName+\".temp.MERT\");",
                        "lineNumber": 985,
                        "lineChange": "none"
                      },
                      {
                        "line": "  BufferedReader inFile = new BufferedReader(new FileReader(decoderOutFileName+\".temp.MERT\"));",
                        "lineNumber": 986,
                        "lineChange": "none"
                      },
                      {
                        "line": "  PrintWriter outFile = new PrintWriter(decoderOutFileName);",
                        "lineNumber": 987,
                        "lineChange": "none"
                      },
                      {
                        "line": "  String line, prevLine;",
                        "lineNumber": 988,
                        "lineChange": "none"
                      },
                      {
                        "line": "  // delete temp copy of old decoder output",
                        "lineNumber": 1033,
                        "lineChange": "none"
                      },
                      {
                        "line": "  File cp = new File(decoderOutFileName+\".temp.MERT\");",
                        "lineNumber": 1034,
                        "lineChange": "none"
                      },
                      {
                        "line": "  cp.delete();",
                        "lineNumber": 1035,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1037,
                        "lineChange": "none"
                      },
                      {
                        "line": "private static void createConfigFile(double[] params, String cfgFileName, String templateFileName) throws Exception",
                        "lineNumber": 1039,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 1040,
                        "lineChange": "none"
                      },
                      {
                        "line": "  // i.e. create cfgFileName, which is similar to templateFileName, but with",
                        "lineNumber": 1041,
                        "lineChange": "none"
                      },
                      {
                        "line": "BufferedReader inFile = new BufferedReader(new FileReader(templateFileName));",
                        "lineNumber": 1044,
                        "lineChange": "none"
                      },
                      {
                        "line": "PrintWriter outFile = new PrintWriter(cfgFileName);",
                        "lineNumber": 1045,
                        "lineChange": "none"
                      },
                      {
                        "line": "String line = inFile.readLine();",
                        "lineNumber": 1047,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1067,
                        "lineChange": "none"
                      },
                      {
                        "line": "private static void copyFile(String sourceFileName, String targetFileName) throws Exception",
                        "lineNumber": 1069,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 1070,
                        "lineChange": "none"
                      },
                      {
                        "line": "  InputStream inStream = new FileInputStream(new File(sourceFileName));",
                        "lineNumber": 1071,
                        "lineChange": "none"
                      },
                      {
                        "line": "  BufferedReader inFile = new BufferedReader(new InputStreamReader(inStream, \"utf8\"));",
                        "lineNumber": 1072,
                        "lineChange": "none"
                      },
                      {
                        "line": "private static void test_score(String inFileName, int candPerSen, int testIndex, boolean isRefFile, int v) throws Exception",
                        "lineNumber": 1097,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 1098,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // test that the translations in inFileName get the expected scores",
                        "lineNumber": 1099,
                        "lineChange": "none"
                      },
                      {
                        "line": "SentenceInfo[] candSentenceInfo = new SentenceInfo[numSentences];",
                        "lineNumber": 1118,
                        "lineChange": "none"
                      },
                      {
                        "line": "BufferedReader inFile = new BufferedReader(new FileReader(inFileName));",
                        "lineNumber": 1120,
                        "lineChange": "none"
                      },
                      {
                        "line": "String line, candidate_str;",
                        "lineNumber": 1121,
                        "lineChange": "none"
                      },
                      {
                        "line": "SentenceInfo[] candSentenceInfo = new SentenceInfo[numSentences];",
                        "lineNumber": 1164,
                        "lineChange": "none"
                      },
                      {
                        "line": "BufferedReader inFile = new BufferedReader(new FileReader(decoderOutFileName));",
                        "lineNumber": 1166,
                        "lineChange": "none"
                      },
                      {
                        "line": "String line, candidate_str;",
                        "lineNumber": 1167,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1252,
                        "lineChange": "none"
                      },
                      {
                        "line": "private static String[] cfgFileToArgsArray(String fileName) throws Exception",
                        "lineNumber": 1254,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 1255,
                        "lineChange": "none"
                      },
                      {
                        "line": "  checkFile(fileName);",
                        "lineNumber": 1256,
                        "lineChange": "none"
                      },
                      {
                        "line": "while (i < args.length) {",
                        "lineNumber": 1331,
                        "lineChange": "none"
                      },
                      {
                        "line": "  String option = args[i];",
                        "lineNumber": 1332,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (option.equals(\"-s\")) { sourceFileName = args[i+1]; }",
                        "lineNumber": 1333,
                        "lineChange": "none"
                      },
                      {
                        "line": "  else if (option.equals(\"-r\")) { refFileName = args[i+1]; }",
                        "lineNumber": 1334,
                        "lineChange": "none"
                      },
                      {
                        "line": "  else if (option.equals(\"-rps\")) {",
                        "lineNumber": 1335,
                        "lineChange": "none"
                      },
                      {
                        "line": "    refsPerSen = Integer.parseInt(args[i+1]);",
                        "lineNumber": 1336,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (maxGramLength < 1) { println(\"maxGramLength must be positive.\"); System.exit(10); }",
                        "lineNumber": 1341,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1342,
                        "lineChange": "none"
                      },
                      {
                        "line": "else if (option.equals(\"-decOut\")) { decoderOutFileName = args[i+1]; }",
                        "lineNumber": 1343,
                        "lineChange": "none"
                      },
                      {
                        "line": "else if (option.equals(\"-decExit\")) {",
                        "lineNumber": 1344,
                        "lineChange": "none"
                      },
                      {
                        "line": "  validDecoderExitValue = Integer.parseInt(args[i+1]);",
                        "lineNumber": 1345,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1346,
                        "lineChange": "none"
                      },
                      {
                        "line": "else if (option.equals(\"-dir\")) { dirPrefix = args[i+1]; }",
                        "lineNumber": 1347,
                        "lineChange": "none"
                      },
                      {
                        "line": "else if (option.equals(\"-p\")) { paramsFileName = args[i+1]; }",
                        "lineNumber": 1348,
                        "lineChange": "none"
                      },
                      {
                        "line": "else if (option.equals(\"-rand\")) {",
                        "lineNumber": 1349,
                        "lineChange": "none"
                      },
                      {
                        "line": "  int rand = Integer.parseInt(args[i+1]);",
                        "lineNumber": 1350,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (runCount < 1) { println(\"runCount must be positive.\"); System.exit(10); }",
                        "lineNumber": 1357,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1358,
                        "lineChange": "none"
                      },
                      {
                        "line": "else if (option.equals(\"-fin\")) { finalLambdasFileName = args[i+1]; }",
                        "lineNumber": 1359,
                        "lineChange": "none"
                      },
                      {
                        "line": "else if (option.equals(\"-cmd\")) { decoderCommandFileName = args[i+1]; }",
                        "lineNumber": 1360,
                        "lineChange": "none"
                      },
                      {
                        "line": "else if (option.equals(\"-dcfg\")) { decoderConfigFileName = args[i+1]; }",
                        "lineNumber": 1361,
                        "lineChange": "none"
                      },
                      {
                        "line": "else if (option.equals(\"-save\")) {",
                        "lineNumber": 1362,
                        "lineChange": "none"
                      },
                      {
                        "line": "  int save = Integer.parseInt(args[i+1]);",
                        "lineNumber": 1363,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (runCount > 1 && randInits == false) { println(\"For runCount > 1, randInits must be set to 1.\"); System.exit(10); }",
                        "lineNumber": 1408,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (dirPrefix != null) {",
                        "lineNumber": 1410,
                        "lineChange": "none"
                      },
                      {
                        "line": "  sourceFileName = fullPath(dirPrefix,sourceFileName);",
                        "lineNumber": 1411,
                        "lineChange": "none"
                      },
                      {
                        "line": "  refFileName = fullPath(dirPrefix,refFileName);",
                        "lineNumber": 1412,
                        "lineChange": "none"
                      },
                      {
                        "line": "  decoderOutFileName = fullPath(dirPrefix,decoderOutFileName);",
                        "lineNumber": 1413,
                        "lineChange": "none"
                      },
                      {
                        "line": "  paramsFileName = fullPath(dirPrefix,paramsFileName);",
                        "lineNumber": 1414,
                        "lineChange": "none"
                      },
                      {
                        "line": "  finalLambdasFileName = fullPath(dirPrefix,finalLambdasFileName);",
                        "lineNumber": 1415,
                        "lineChange": "none"
                      },
                      {
                        "line": "  decoderCommandFileName = fullPath(dirPrefix,decoderCommandFileName);",
                        "lineNumber": 1416,
                        "lineChange": "none"
                      },
                      {
                        "line": "  decoderConfigFileName = fullPath(dirPrefix,decoderConfigFileName);",
                        "lineNumber": 1417,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1418,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (refsPerSen > 1) {",
                        "lineNumber": 1420,
                        "lineChange": "none"
                      },
                      {
                        "line": "  // the provided refFileName might be a prefix",
                        "lineNumber": 1421,
                        "lineChange": "none"
                      },
                      {
                        "line": "  File dummy = new File(refFileName);",
                        "lineNumber": 1422,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (!dummy.exists()) {",
                        "lineNumber": 1423,
                        "lineChange": "none"
                      },
                      {
                        "line": "    refFileName = createUnifiedRefFile(refFileName,refsPerSen);",
                        "lineNumber": 1424,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 1425,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1426,
                        "lineChange": "none"
                      },
                      {
                        "line": "checkFile(sourceFileName);",
                        "lineNumber": 1428,
                        "lineChange": "none"
                      },
                      {
                        "line": "checkFile(paramsFileName);",
                        "lineNumber": 1429,
                        "lineChange": "none"
                      },
                      {
                        "line": "checkFile(decoderCommandFileName);",
                        "lineNumber": 1430,
                        "lineChange": "none"
                      },
                      {
                        "line": "checkFile(decoderConfigFileName);",
                        "lineNumber": 1431,
                        "lineChange": "none"
                      },
                      {
                        "line": "} // processArgs(String[] args)",
                        "lineNumber": 1443,
                        "lineChange": "none"
                      },
                      {
                        "line": "private static void checkFile(String fileName)",
                        "lineNumber": 1445,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 1446,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (!fileExists(fileName)) {",
                        "lineNumber": 1447,
                        "lineChange": "none"
                      },
                      {
                        "line": "    println(\"The file \" + fileName + \" was not found!\");",
                        "lineNumber": 1448,
                        "lineChange": "none"
                      },
                      {
                        "line": "    System.exit(40);",
                        "lineNumber": 1449,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1451,
                        "lineChange": "none"
                      },
                      {
                        "line": "private static boolean fileExists(String fileName)",
                        "lineNumber": 1453,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 1454,
                        "lineChange": "none"
                      },
                      {
                        "line": "  File checker = new File(fileName);",
                        "lineNumber": 1455,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return checker.exists();",
                        "lineNumber": 1456,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1457,
                        "lineChange": "none"
                      },
                      {
                        "line": "private static String createUnifiedRefFile(String prefix, int numFiles) throws Exception",
                        "lineNumber": 1459,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 1460,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (numFiles < 2) {",
                        "lineNumber": 1461,
                        "lineChange": "none"
                      },
                      {
                        "line": "    println(\"Warning: createUnifiedRefFile called with numFiles = \" + numFiles + \"; doing nothing.\");",
                        "lineNumber": 1462,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return prefix;",
                        "lineNumber": 1463,
                        "lineChange": "none"
                      },
                      {
                        "line": "  } else {",
                        "lineNumber": 1464,
                        "lineChange": "none"
                      },
                      {
                        "line": "    File checker;",
                        "lineNumber": 1465,
                        "lineChange": "none"
                      },
                      {
                        "line": "    checker = new File(prefix+\"1\");",
                        "lineNumber": 1466,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!checker.exists()) {",
                        "lineNumber": 1468,
                        "lineChange": "none"
                      },
                      {
                        "line": "      checker = new File(prefix+\".1\");",
                        "lineNumber": 1469,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (!checker.exists()) {",
                        "lineNumber": 1470,
                        "lineChange": "none"
                      },
                      {
                        "line": "        println(\"Can't find reference files.\");",
                        "lineNumber": 1471,
                        "lineChange": "none"
                      },
                      {
                        "line": "        System.exit(50);",
                        "lineNumber": 1472,
                        "lineChange": "none"
                      },
                      {
                        "line": "      } else {",
                        "lineNumber": 1473,
                        "lineChange": "none"
                      },
                      {
                        "line": "        prefix = prefix + \".\";",
                        "lineNumber": 1474,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }",
                        "lineNumber": 1475,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 1476,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String outFileName;",
                        "lineNumber": 1478,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (prefix.endsWith(\".\")) { outFileName = prefix+\"all\"; }",
                        "lineNumber": 1479,
                        "lineChange": "none"
                      },
                      {
                        "line": "    else { outFileName = prefix+\".all\"; }",
                        "lineNumber": 1480,
                        "lineChange": "none"
                      },
                      {
                        "line": "    PrintWriter outFile = new PrintWriter(outFileName);",
                        "lineNumber": 1482,
                        "lineChange": "none"
                      },
                      {
                        "line": "    BufferedReader[] inFile = new BufferedReader[numFiles];",
                        "lineNumber": 1484,
                        "lineChange": "none"
                      },
                      {
                        "line": "  for (int r = 0; r < numFiles; ++r) { inFile[r].close(); }",
                        "lineNumber": 1512,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return outFileName;",
                        "lineNumber": 1514,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1516,
                        "lineChange": "none"
                      },
                      {
                        "line": "} // createUnifiedRefFile(String prefix, int numFiles)",
                        "lineNumber": 1518,
                        "lineChange": "none"
                      },
                      {
                        "line": "private static int countLines(String fileName) throws Exception",
                        "lineNumber": 1520,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 1521,
                        "lineChange": "none"
                      },
                      {
                        "line": "  BufferedReader inFile = new BufferedReader(new FileReader(fileName));",
                        "lineNumber": 1522,
                        "lineChange": "none"
                      },
                      {
                        "line": "  String line;",
                        "lineNumber": 1524,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1589,
                        "lineChange": "none"
                      },
                      {
                        "line": "private static String fullPath(String dir, String fileName)",
                        "lineNumber": 1591,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 1592,
                        "lineChange": "none"
                      },
                      {
                        "line": "  File dummyFile = new File(dir,fileName);",
                        "lineNumber": 1593,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return dummyFile.getAbsolutePath();",
                        "lineNumber": 1594,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1595,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/virtualcell/vcell/commit/7327deda4296af0f802e4b1a21ee47c013a708c6?diff=split#diff-efea0b403bca8feff6ef723e9fd1d2eaL16",
                    "lines": [
                      {
                        "line": " * @param args",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "public static void main(String[] args) throws Exception{",
                        "lineNumber": 15,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}",
                        "lineNumber": 55,
                        "lineChange": "added"
                      },
                      {
                        "line": "public static void main(String[] args){",
                        "lineNumber": 57,
                        "lineChange": "added"
                      },
                      {
                        "line": "  String action = args[0];",
                        "lineNumber": 58,
                        "lineChange": "added"
                      },
                      {
                        "line": "  String[] actionArgs = null;",
                        "lineNumber": 59,
                        "lineChange": "added"
                      },
                      {
                        "line": "  if(args.length > 1){",
                        "lineNumber": 60,
                        "lineChange": "added"
                      },
                      {
                        "line": "    actionArgs = new String[args.length-1];",
                        "lineNumber": 61,
                        "lineChange": "added"
                      },
                      {
                        "line": "private static ProcessInfo spawnProcess(String spawnCommand) throws Exception{",
                        "lineNumber": 84,
                        "lineChange": "added"
                      },
                      {
                        "line": "  Process exportProcess = Runtime.getRuntime().exec(spawnCommand);",
                        "lineNumber": 85,
                        "lineChange": "added"
                      },
                      {
                        "line": "  //Listen for output",
                        "lineNumber": 86,
                        "lineChange": "added"
                      },
                      {
                        "line": "  StreamReader normalOutput = new StreamReader(exportProcess.getInputStream());",
                        "lineNumber": 87,
                        "lineChange": "added"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 99,
                        "lineChange": "added"
                      },
                      {
                        "line": "  private static String createExportCommand(String vcellSchema,String password,String dbHostName,String dbSrvcName,File backupFile){",
                        "lineNumber": 100,
                        "lineChange": "added"
                      },
                      {
                        "line": "    return \"exp \"+\"system\"+\"/\"+(password==null?\"xxxxx\":password)+\"@\"+",
                        "lineNumber": 101,
                        "lineChange": "added"
                      },
                      {
                        "line": "    \"(description\\\\=(address\\\\=(protocol\\\\=tcp)(host\\\\=\"+dbHostName+\")(port\\\\=1521))(connect_data\\\\=(service_name\\\\=\"+dbSrvcName+\")))\"+",
                        "lineNumber": 102,
                        "lineChange": "added"
                      },
                      {
                        "line": "//\t\t\" TABLES=(vc_userinfo) \"+",
                        "lineNumber": 103,
                        "lineChange": "added"
                      },
                      {
                        "line": "    \" FILE=\"+backupFile.getAbsolutePath()",
                        "lineNumber": 104,
                        "lineChange": "added"
                      },
                      {
                        "line": "    +\" OWNER=\"+vcellSchema+\" CONSISTENT=Y\";",
                        "lineNumber": 105,
                        "lineChange": "added"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 107,
                        "lineChange": "added"
                      },
                      {
                        "line": "if(args.length != 6){",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return;",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "String credentials = args[0];",
                        "lineNumber": 21,
                        "lineChange": "removed"
                      },
                      {
                        "line": "String dbName = args[1];",
                        "lineNumber": 22,
                        "lineChange": "removed"
                      },
                      {
                        "line": "File workingDir = new File(args[2]);",
                        "lineNumber": 23,
                        "lineChange": "removed"
                      },
                      {
                        "line": "File exportDir = new File(args[3]);",
                        "lineNumber": 24,
                        "lineChange": "removed"
                      },
                      {
                        "line": "String userSchema = args[4];",
                        "lineNumber": 25,
                        "lineChange": "removed"
                      },
                      {
                        "line": "String dbServerName = args[5];",
                        "lineNumber": 26,
                        "lineChange": "removed"
                      },
                      {
                        "line": "//\t\t\treturn;",
                        "lineNumber": 115,
                        "lineChange": "added"
                      },
                      {
                        "line": "//\t\t}",
                        "lineNumber": 116,
                        "lineChange": "added"
                      },
                      {
                        "line": "    String dbHostName = args[0];",
                        "lineNumber": 117,
                        "lineChange": "added"
                      },
                      {
                        "line": "    String vcellSchema = args[1];",
                        "lineNumber": 118,
                        "lineChange": "added"
                      },
                      {
                        "line": "    String password = args[2];",
                        "lineNumber": 119,
                        "lineChange": "added"
                      },
                      {
                        "line": "    String dbSrvcName = args[3];",
                        "lineNumber": 120,
                        "lineChange": "added"
                      },
                      {
                        "line": "    File workingDir = new File(args[4]);",
                        "lineNumber": 121,
                        "lineChange": "added"
                      },
                      {
                        "line": "    File exportDir = new File(args[5]);",
                        "lineNumber": 122,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 129,
                        "lineChange": "added"
                      },
                      {
                        "line": "String baseFileName = null;",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "File backupFile = null;",
                        "lineNumber": 131,
                        "lineChange": "added"
                      },
                      {
                        "line": "    try{",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "      String datePart = new SimpleDateFormat(\"yyyy_MM_dd_HH_mm_ss\").format(Calendar.getInstance().getTime());",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "      baseFileName = dbServerName+\"_\"+dbName+\"_\"+userSchema+\"_\"+datePart;",
                        "lineNumber": 33,
                        "lineChange": "removed"
                      },
                      {
                        "line": "      File backupFile = new File(workingDir,baseFileName+\".dmp\");",
                        "lineNumber": 34,
                        "lineChange": "removed"
                      },
                      {
                        "line": "      String exportCommand =",
                        "lineNumber": 35,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        \"exp \"+credentials+\"@\"+dbName+\" FILE=\"+backupFile.getAbsolutePath()+\" OWNER=\"+userSchema+\" CONSISTENT=Y\";",
                        "lineNumber": 36,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        ",
                        "lineNumber": 37,
                        "lineChange": "removed"
                      },
                      {
                        "line": "      baseFileName = dbHostName+\"_\"+dbSrvcName+\"_\"+vcellSchema+\"_\"+datePart;",
                        "lineNumber": 134,
                        "lineChange": "added"
                      },
                      {
                        "line": "      backupFile = new File(workingDir,baseFileName+\".dmp\");",
                        "lineNumber": 135,
                        "lineChange": "added"
                      },
                      {
                        "line": "//\t\t\tString exportCommand =",
                        "lineNumber": 136,
                        "lineChange": "added"
                      },
                      {
                        "line": "//\t\t\t\t\"exp \"+credentials+\"@\"+dbName+\" FILE=\"+backupFile.getAbsolutePath()+\" OWNER=\"+userSchema+\" CONSISTENT=Y\";",
                        "lineNumber": 137,
                        "lineChange": "added"
                      },
                      {
                        "line": "      String exportCommand = createExportCommand(vcellSchema, password, dbHostName, dbSrvcName, backupFile);",
                        "lineNumber": 138,
                        "lineChange": "added"
                      },
                      {
                        "line": "//\t\t\tSystem.out.println(exportCommand);",
                        "lineNumber": 139,
                        "lineChange": "added"
                      },
                      {
                        "line": "      //Create export Process",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "      final Process exportProcess = Runtime.getRuntime().exec(exportCommand);",
                        "lineNumber": 39,
                        "lineChange": "removed"
                      },
                      {
                        "line": "      //Listen for output",
                        "lineNumber": 40,
                        "lineChange": "removed"
                      },
                      {
                        "line": "      final boolean[] outReadFlag = new boolean[1];",
                        "lineNumber": 41,
                        "lineChange": "removed"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/ammarx/TagAPI_3/commit/cdc43ec0f44be26d080b8106cb8df503bb4e6599?diff=split#diff-7bdd4dadff7e107738652c771a83bb84L19",
                    "lines": [
                      {
                        "line": " */",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "//we will be using this for testing only...",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "public static void main(String[] args) {",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // TODO code application logic here",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "    //*** Remove this as this is required for it to work fully...",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": " Local local = new Local();",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "Network network = new Network();",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "String UsernameToUse = args[0];",
                        "lineNumber": 26,
                        "lineChange": "removed"
                      },
                      {
                        "line": "String VersionToUse = args[1];",
                        "lineNumber": 27,
                        "lineChange": "removed"
                      },
                      {
                        "line": "String UsernameToUse = \"Ammar_Ahmad\";",
                        "lineNumber": 26,
                        "lineChange": "added"
                      },
                      {
                        "line": "String VersionToUse = \"1.7.2\";",
                        "lineNumber": 27,
                        "lineChange": "added"
                      },
                      {
                        "line": "String OperatingSystemToUse = utils.getOS();",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "System.out.println(\"OS: \" + OperatingSystemToUse);",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "//get profile",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "System.out.println(\"Getting profile details\");",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "network.downloadProfile(OperatingSystemToUse, UsernameToUse);",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "network.downloadVersionManifest(utils.getMineCraft_Version_Manifest_json(OperatingSystemToUse));",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "String MOD_id = null;",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "//check if it is vanilla or not",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (local.checkIfVanillaMC(VersionToUse).equals(true)) {",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "    System.out.println(\"Vanilla Minecraft found!\");",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "    System.out.println(\"Modded Minecraft found!\");",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "    local.MOD_readJson_libraries_name_PLUS_url(utils.getMineCraft_Version_Json(OperatingSystemToUse, VersionToUse));",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "    for (int i = 0; i < local.version_name_list.size(); i++) {",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "        System.out.println(local.version_name_list.get(i));",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "    ",
                        "lineNumber": 79,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    MOD_inheritsFrom = local.readJson_inheritsFrom(utils.getMineCraft_Version_Json(OperatingSystemToUse, VersionToUse));",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "    System.out.println(\"inheritsFrom: \" + MOD_inheritsFrom);",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "    MOD_jar = local.readJson_jar(utils.getMineCraft_Version_Json(OperatingSystemToUse, VersionToUse));",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "    System.out.println(\"jar: \" + MOD_jar);",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "    MOD_assets = local.readJson_assets(utils.getMineCraft_Version_Json(OperatingSystemToUse, VersionToUse));",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "    System.out.println(\"assets: \" + MOD_assets);",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "    MOD_minecraftArguments = local.readJson_minecraftArguments(utils.getMineCraft_Version_Json(OperatingSystemToUse, VersionToUse));",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "    System.out.println(\"minecraftArguments: \" + MOD_minecraftArguments);",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "    MOD_mainClass = local.readJson_mainClass(utils.getMineCraft_Version_Json(OperatingSystemToUse, VersionToUse));",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "    System.out.println(\"mainClass: \" + MOD_mainClass);",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "    MOD_id = local.readJson_id(utils.getMineCraft_Version_Json(OperatingSystemToUse, VersionToUse));",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "    System.out.println(\"id: \" + MOD_id);",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (MOD_inheritsFrom == null) {",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "    System.out.println(\"Using: \" + VersionToUse);",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "    VersionToUse = MOD_inheritsFrom;",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "    System.out.println(\"Using: \" + VersionToUse);",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "//download 1.7.10.json_libs",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "for (int i = 0; i < local.version_manifest_versions_id.size(); i++) {",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (local.version_manifest_versions_id.get(i).equals(VersionToUse)) {",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "        network.downloadVersionJson(OperatingSystemToUse, local.version_manifest_versions_url.get(i).toString(), local.version_manifest_versions_id.get(i).toString());",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "        break;",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "System.out.print(utils.getMineCraft_Version_Json(OperatingSystemToUse, VersionToUse));",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "System.out.print(\"\\n\\n\");",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "local.readJson_libraries_downloads_artifact_url(utils.getMineCraft_Version_Json(OperatingSystemToUse, VersionToUse));",
                        "lineNumber": 141,
                        "lineChange": "removed"
                      },
                      {
                        "line": "local.readJson_libraries_downloads_artifact_path(utils.getMineCraft_Version_Json(OperatingSystemToUse, VersionToUse));",
                        "lineNumber": 142,
                        "lineChange": "removed"
                      },
                      {
                        "line": "local.readJson_libraries_name(utils.getMineCraft_Version_Json(OperatingSystemToUse, VersionToUse));",
                        "lineNumber": 143,
                        "lineChange": "removed"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 140,
                        "lineChange": "added"
                      },
                      {
                        "line": "    local.readJson_libraries_downloads_artifact_url(utils.getMineCraft_Version_Json(OperatingSystemToUse, VersionToUse));",
                        "lineNumber": 141,
                        "lineChange": "added"
                      },
                      {
                        "line": "} catch (Exception ex) {",
                        "lineNumber": 143,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 145,
                        "lineChange": "added"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 146,
                        "lineChange": "added"
                      },
                      {
                        "line": "    local.readJson_libraries_downloads_artifact_path(utils.getMineCraft_Version_Json(OperatingSystemToUse, VersionToUse));",
                        "lineNumber": 147,
                        "lineChange": "added"
                      },
                      {
                        "line": "} catch (Exception ex) {",
                        "lineNumber": 149,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 151,
                        "lineChange": "added"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 152,
                        "lineChange": "added"
                      },
                      {
                        "line": "    local.readJson_libraries_name(utils.getMineCraft_Version_Json(OperatingSystemToUse, VersionToUse));",
                        "lineNumber": 153,
                        "lineChange": "added"
                      },
                      {
                        "line": "} catch (Exception ex) {",
                        "lineNumber": 155,
                        "lineChange": "added"
                      },
                      {
                        "line": "///************************************************************",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "for (int i = 0; i < local.version_url_list.size(); i++) {",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "//this may need to be edited!*************//",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "System.out.println(local.readJson_assetIndex_url(utils.getMineCraft_Version_Json(OperatingSystemToUse, VersionToUse)));",
                        "lineNumber": 159,
                        "lineChange": "removed"
                      },
                      {
                        "line": "System.out.println(local.readJson_assetIndex_id(utils.getMineCraft_Version_Json(OperatingSystemToUse, VersionToUse)));",
                        "lineNumber": 160,
                        "lineChange": "removed"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 173,
                        "lineChange": "added"
                      },
                      {
                        "line": "    System.out.println(local.readJson_assetIndex_url(utils.getMineCraft_Version_Json(OperatingSystemToUse, VersionToUse)));",
                        "lineNumber": 174,
                        "lineChange": "added"
                      },
                      {
                        "line": "} catch (Exception ex) {",
                        "lineNumber": 176,
                        "lineChange": "added"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 180,
                        "lineChange": "added"
                      },
                      {
                        "line": "    System.out.println(local.readJson_assetIndex_id(utils.getMineCraft_Version_Json(OperatingSystemToUse, VersionToUse)));",
                        "lineNumber": 181,
                        "lineChange": "added"
                      },
                      {
                        "line": "} catch (Exception ex) {",
                        "lineNumber": 182,
                        "lineChange": "added"
                      },
                      {
                        "line": "    System.err.println(ex);",
                        "lineNumber": 183,
                        "lineChange": "added"
                      },
                      {
                        "line": "//get assets index id!",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "network.downloadLaunchermeta(OperatingSystemToUse, local.readJson_assetIndex_url(utils.getMineCraft_Version_Json(OperatingSystemToUse, VersionToUse)), local.readJson_assetIndex_id(utils.getMin",
                        "lineNumber": 187,
                        "lineChange": "none"
                      },
                      {
                        "line": "System.out.println(utils.getMineCraftAssetsIndexes_X_json(OperatingSystemToUse, VersionToUse));",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "local.readJson_objects_KEY(utils.getMineCraftAssetsIndexes_X_json(OperatingSystemToUse, local.readJson_assetIndex_id(utils.getMineCraft_Version_Json(OperatingSystemToUse, VersionToUse))));",
                        "lineNumber": 191,
                        "lineChange": "none"
                      },
                      {
                        "line": "local.readJson_objects_KEY_hash(utils.getMineCraftAssetsIndexes_X_json(OperatingSystemToUse, local.readJson_assetIndex_id(utils.getMineCraft_Version_Json(OperatingSystemToUse, VersionToUse))))",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "for (int i = 0; i < local.objects_hash.size(); i++) {",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "System.out.println(\"DOWNLOADING MINECRAFT JAR\");",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (MOD_jar == null) {",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "    network.downloadMinecraftJar(OperatingSystemToUse, VersionToUse);",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 210,
                        "lineChange": "none"
                      },
                      {
                        "line": "    network.downloadMinecraftJar(OperatingSystemToUse, MOD_jar);",
                        "lineNumber": 211,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "//would have tp edit this line as we also need natives paths!",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "System.out.println(\"Getting NATIVES URL\");",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "local.readJson_libraries_downloads_classifiers_natives_X(utils.getMineCraft_Versions_X_X_json(OperatingSystemToUse, VersionToUse), OperatingSystemToUse);",
                        "lineNumber": 217,
                        "lineChange": "none"
                      },
                      {
                        "line": "System.out.println(\"Getting NATIVES PATH\");",
                        "lineNumber": 218,
                        "lineChange": "none"
                      },
                      {
                        "line": "local.readJson_libraries_downloads_classifiers_natives_Y(utils.getMineCraft_Versions_X_X_json(OperatingSystemToUse, VersionToUse), OperatingSystemToUse);",
                        "lineNumber": 219,
                        "lineChange": "none"
                      },
                      {
                        "line": "for (int i = 0; i < local.version_url_list_natives.size(); i++) {",
                        "lineNumber": 221,
                        "lineChange": "none"
                      },
                      {
                        "line": "    System.out.println(\"Extracting...\");",
                        "lineNumber": 225,
                        "lineChange": "none"
                      },
                      {
                        "line": "    System.out.println(local.version_url_list_natives.get(i).toString());",
                        "lineNumber": 226,
                        "lineChange": "none"
                      },
                      {
                        "line": "    System.out.println(utils.getMineCraft_Versions_X_Natives(OperatingSystemToUse, VersionToUse));",
                        "lineNumber": 227,
                        "lineChange": "none"
                      },
                      {
                        "line": "    utils.jarExtract(OperatingSystemToUse, local.version_path_list_natives.get(i).toString(), utils.getMineCraft_Versions_X_Natives(OperatingSystemToUse, VersionToUse));",
                        "lineNumber": 229,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 231,
                        "lineChange": "none"
                      },
                      {
                        "line": "//String HalfArgumentTemplate = local.readJson_minecraftArguments(utils.getMineCraft_Versions_X_X_json(OperatingSystemToUse, VersionToUse));",
                        "lineNumber": 235,
                        "lineChange": "none"
                      },
                      {
                        "line": "String mainClass;",
                        "lineNumber": 244,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (MOD_mainClass == null){",
                        "lineNumber": 212,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if (MOD_mainClass == null) {",
                        "lineNumber": 245,
                        "lineChange": "added"
                      },
                      {
                        "line": "    mainClass = local.readJson_mainClass(utils.getMineCraft_Versions_X_X_json(OperatingSystemToUse, VersionToUse));",
                        "lineNumber": 246,
                        "lineChange": "none"
                      },
                      {
                        "line": "    ",
                        "lineNumber": 214,
                        "lineChange": "removed"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 248,
                        "lineChange": "none"
                      },
                      {
                        "line": "    mainClass =  MOD_mainClass;",
                        "lineNumber": 216,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    mainClass = MOD_mainClass;",
                        "lineNumber": 249,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 250,
                        "lineChange": "none"
                      },
                      {
                        "line": "String NativesDir = utils.getMineCraft_Versions_X_Natives(OperatingSystemToUse, VersionToUse);",
                        "lineNumber": 252,
                        "lineChange": "none"
                      },
                      {
                        "line": "String assetsIdexId;",
                        "lineNumber": 253,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (MOD_assets == null){",
                        "lineNumber": 221,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if (MOD_assets == null) {",
                        "lineNumber": 254,
                        "lineChange": "added"
                      },
                      {
                        "line": "    assetsIdexId = local.readJson_assets(utils.getMineCraft_Versions_X_X_json(OperatingSystemToUse, VersionToUse));",
                        "lineNumber": 255,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 257,
                        "lineChange": "none"
                      },
                      {
                        "line": "    assetsIdexId = MOD_assets;",
                        "lineNumber": 258,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 259,
                        "lineChange": "none"
                      },
                      {
                        "line": "String versionName;",
                        "lineNumber": 267,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (MOD_id == null){",
                        "lineNumber": 232,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if (MOD_id == null) {",
                        "lineNumber": 268,
                        "lineChange": "added"
                      },
                      {
                        "line": "    versionName = local.readJson_id(utils.getMineCraft_Versions_X_X_json(OperatingSystemToUse, VersionToUse));",
                        "lineNumber": 269,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 270,
                        "lineChange": "none"
                      },
                      {
                        "line": "    versionName = MOD_id;",
                        "lineNumber": 271,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 272,
                        "lineChange": "none"
                      },
                      {
                        "line": "String authuuid = local.readJson_id(utils.getMineCraft_X_json(OperatingSystemToUse, UsernameToUse));",
                        "lineNumber": 274,
                        "lineChange": "none"
                      },
                      {
                        "line": "String Username = UsernameToUse;",
                        "lineNumber": 275,
                        "lineChange": "none"
                      },
                      {
                        "line": "String MinecraftJar;",
                        "lineNumber": 276,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (MOD_jar == null){",
                        "lineNumber": 242,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if (MOD_jar == null) {",
                        "lineNumber": 277,
                        "lineChange": "added"
                      },
                      {
                        "line": "    MinecraftJar = utils.getMineCraft_Versions_X_X_jar(OperatingSystemToUse, VersionToUse);",
                        "lineNumber": 278,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 280,
                        "lineChange": "none"
                      },
                      {
                        "line": "    MinecraftJar = utils.getMineCraft_Versions_X_X_jar(OperatingSystemToUse, MOD_jar);",
                        "lineNumber": 281,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 282,
                        "lineChange": "none"
                      },
                      {
                        "line": "String GameAssets = utils.getMineCraftAssetsVirtualLegacyLocation(OperatingSystemToUse);",
                        "lineNumber": 287,
                        "lineChange": "none"
                      },
                      {
                        "line": "System.out.println(\"NativesPath: \" + NativesDir);",
                        "lineNumber": 288,
                        "lineChange": "none"
                      },
                      {
                        "line": "for (int i = 0; i < local.version_path_list.size(); i++) {",
                        "lineNumber": 290,
                        "lineChange": "none"
                      },
                      {
                        "line": "String HalfLibraryArgument = local.generateLibrariesArguments(OperatingSystemToUse);",
                        "lineNumber": 295,
                        "lineChange": "none"
                      },
                      {
                        "line": "String FullLibraryArgument = local.generateLibrariesArguments(OperatingSystemToUse) + utils.getArgsDiv(OperatingSystemToUse) + MinecraftJar;",
                        "lineNumber": 296,
                        "lineChange": "none"
                      },
                      {
                        "line": "System.out.println(\"HalfLibraryArgument: \" + HalfLibraryArgument);",
                        "lineNumber": 297,
                        "lineChange": "none"
                      },
                      {
                        "line": "System.out.println(\"FullLibraryArgument: \" + FullLibraryArgument);",
                        "lineNumber": 298,
                        "lineChange": "none"
                      },
                      {
                        "line": "String HalfArgument = local.generateMinecraftArguments(OperatingSystemToUse, Username, versionName, gameDirectory, AssetsRoot, assetsIdexId, authuuid, \"aeef7bc935f9420eb6314dea7ad7e1e5\", \"{\\\"t",
                        "lineNumber": 300,
                        "lineChange": "none"
                      },
                      {
                        "line": "System.out.println(\"HalfArgument: \" + HalfArgument);",
                        "lineNumber": 301,
                        "lineChange": "none"
                      },
                      {
                        "line": "System.out.println(\"Minecraft.jar: \" + MinecraftJar);",
                        "lineNumber": 302,
                        "lineChange": "none"
                      },
                      {
                        "line": "System.out.println(\"username: \" + Username);",
                        "lineNumber": 304,
                        "lineChange": "none"
                      },
                      {
                        "line": "System.out.println(\"version number: \" + versionName);",
                        "lineNumber": 305,
                        "lineChange": "none"
                      },
                      {
                        "line": "System.out.println(\"game directory: \" + gameDirectory);",
                        "lineNumber": 306,
                        "lineChange": "none"
                      },
                      {
                        "line": "System.out.println(\"assets root directory: \" + AssetsRoot);",
                        "lineNumber": 307,
                        "lineChange": "none"
                      },
                      {
                        "line": "System.out.println(\"assets Index Id: \" + assetsIdexId);",
                        "lineNumber": 308,
                        "lineChange": "none"
                      },
                      {
                        "line": "System.out.println(\"assets legacy directory: \" + GameAssets);",
                        "lineNumber": 309,
                        "lineChange": "none"
                      },
                      {
                        "line": "System.out.println(local.generateRunnableArguments(Xmx, NativesDir, FullLibraryArgument, mainClass, HalfArgument));",
                        "lineNumber": 310,
                        "lineChange": "none"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 312,
                        "lineChange": "none"
                      },
                      {
                        "line": "    String ArgsX = local.generateRunnableArguments(Xmx, NativesDir, FullLibraryArgument, mainClass, HalfArgument);",
                        "lineNumber": 314,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Runtime.getRuntime().exec(\"java \" + ArgsX);",
                        "lineNumber": 315,
                        "lineChange": "none"
                      },
                      {
                        "line": "} catch (Exception e) {",
                        "lineNumber": 317,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "- generating lineCharts is possible",
                  "Integrated MERT and decoder (though still need to integrate -decV option)."
                ],
                "precision": "very-high",
                "repoDatasetSize": 7,
                "cwe": [
                  "CWE-78"
                ]
              }
            },
            {
              "id": "java/HardcodedSecret",
              "name": "HardcodedSecret",
              "shortDescription": {
                "text": "Hardcoded Secret"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nWhen constants are hardcoded into applications, this information could easily be reverse-engineered and become known to attackers. For example, if a breached authentication token is hardcoded in multiple places in the application, it may lead to components of the application remaining vulnerable if not all instances are changed.\nAnother negative effect of hard-coding constants is potential unpredictability in the application's performance if the development team fails to update every single instance of the hardcoded constant throughout the code. For these reasons, hard-coding security-relevant constants is considered bad coding practice and should be remedied if present and avoided in future.\n\n### Best practices for prevention\n- Never hard code security-related constants; use symbolic names or configuration lookup files.\n- As hard coding is often done by coders working alone on a small scale, examine all legacy code components and test carefully when scaling.\n- Adopt a \"future-proof code\" mindset: While use of constants may save a little time now and make development simpler in the short term, it could cost time and money adapting to scale or other unforeseen circumstances (such as new hardware) in the future.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/aberic/fabric-net-server/commit/963bb9fe026b454672fb83fd739f3d754b6844e1?diff=split#diff-759baf3d057123b5320b6a399e775967L67",
                    "lines": [
                      {
                        "line": "app.setKey(MathUtil.getRandom8());",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.setPublicKey(\"pub1\");",
                        "lineNumber": 65,
                        "lineChange": "removed"
                      },
                      {
                        "line": "app.setPrivateKey(\"pri1\");",
                        "lineNumber": 66,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 81,
                        "lineChange": "added"
                      },
                      {
                        "line": "    app.setPublicKey(key.getPublicKey());",
                        "lineNumber": 82,
                        "lineChange": "added"
                      },
                      {
                        "line": "    app.setPrivateKey(key.getPrivateKey());",
                        "lineNumber": 83,
                        "lineChange": "added"
                      },
                      {
                        "line": "    return appMapper.updateKey(app);",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 85,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/karutaproject/karuta-backend/commit/a05377ace2292896e3768e70aa2fde992ddaae62?diff=split#diff-a46279e5e2a97eaacfba9b55e2e3b9b0L104",
                    "lines": [
                      {
                        "line": "{",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "  rc4 = Cipher.getInstance(\"RC4\");",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "  SecretKeySpec key = new SecretKeySpec(\"testkey\".getBytes(), \"RC4\");",
                        "lineNumber": 103,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  String secretkey = ConfigUtils.get(\"directkey\");",
                        "lineNumber": 110,
                        "lineChange": "added"
                      },
                      {
                        "line": "  SecretKeySpec key = new SecretKeySpec(secretkey.getBytes(), \"RC4\");",
                        "lineNumber": 111,
                        "lineChange": "added"
                      },
                      {
                        "line": "  rc4.init(Cipher.DECRYPT_MODE, key);",
                        "lineNumber": 112,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/apache/cloudstack/commit/0653d6d7f6283752984ea181ef27559bed4b05af?diff=split#diff-af0be1b2a17efe3a3d4ae1941c2e946fL309",
                    "lines": [
                      {
                        "line": "long ts = (new Date()).getTime();",
                        "lineNumber": 306,
                        "lineChange": "removed"
                      },
                      {
                        "line": "long ts = normalizedHashTime.getTime();",
                        "lineNumber": 310,
                        "lineChange": "added"
                      },
                      {
                        "line": "ts = ts/60000;\t\t// round up to 1 minute",
                        "lineNumber": 311,
                        "lineChange": "none"
                      },
                      {
                        "line": "String secretKey = \"cloud.com\";",
                        "lineNumber": 308,
                        "lineChange": "removed"
                      },
                      {
                        "line": "String secretKey = _ms.getHashKey();",
                        "lineNumber": 312,
                        "lineChange": "added"
                      },
                      {
                        "line": "SecretKeySpec keySpec = new SecretKeySpec(secretKey.getBytes(), \"HmacSHA1\");",
                        "lineNumber": 314,
                        "lineChange": "none"
                      },
                      {
                        "line": "mac.init(keySpec);",
                        "lineNumber": 315,
                        "lineChange": "none"
                      },
                      {
                        "line": "mac.update(params.getBytes());",
                        "lineNumber": 316,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Api keys from json file",
                  "Made security file and session key configurable"
                ],
                "precision": "very-high",
                "repoDatasetSize": 62,
                "cwe": [
                  "CWE-547"
                ]
              }
            },
            {
              "id": "java/UsageOfUnencryptedSocket/test",
              "name": "UsageOfUnencryptedSocket/test",
              "shortDescription": {
                "text": "Cleartext Transmission of Sensitive Information"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\nThis weakness occurs when software transmits sensitive information, such as passwords or credit card numbers, in unencrypted form. This information may then be intercepted by threat actors using sniffer tools or interception techniques such as man-in-the-middle (MITM) attacks (often involving social engineering). Attackers can then use information gleaned to perform a variety of actions, depending on the information type. Possible actions include gaining unauthorized access, impersonating a user, moving laterally within the organization's network, or retrieving and potentially modifying files. This weakness is almost completely avoidable through intelligent architecture and design.\n\n### Best practices for prevention\n* Build web applications around a security mindset and the awareness that sniffers may be present at any time.\n* Ensure that all sensitive data transmission uses reliable encryption.\n* Implement security measures so that sensitive results are never returned in plain text.\n* Implement multiple-factor authentication methods to validate remote instances.\n* Use SSL not only at logon but throughout communications.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/ME1312/SubServers-2/commit/9a219a7d0fd259870a94d1f875f3cbb3c942ec1e?diff=split#diff-4a76c605749ad18708be15720e8fac67L57",
                    "lines": [
                      {
                        "line": "public SubDataClient(SubPlugin plugin, InetAddress address, int port, Encryption encryption) throws IOException {",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (Util.isNull(plugin, address, port)) throw new NullPointerException();",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "    socket = new Socket(address, port);",
                        "lineNumber": 56,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    socket = new NamedContainer<>(false, new Socket(address, port));",
                        "lineNumber": 60,
                        "lineChange": "added"
                      },
                      {
                        "line": "    this.plugin = plugin;",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.writer = new PrintWriter(socket.getOutputStream(), true);",
                        "lineNumber": 58,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    this.writer = new PrintWriter(socket.get().getOutputStream(), true);",
                        "lineNumber": 62,
                        "lineChange": "added"
                      },
                      {
                        "line": "    this.encryption = encryption;",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.queue = new LinkedList<NamedContainer<String, PacketOut>>();",
                        "lineNumber": 64,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/dddpaul/android-SimpleNetCat/commit/3235f85ae26fa31e1e36739c608668e15c53a04c?diff=split#diff-6689eedf89cc41d9c93933ea7ff5ebf4L62",
                    "lines": [
                      {
                        "line": "    int port = Integer.parseInt( params[2] );",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Log.d( CLASS_NAME, String.format( \"Connecting to %s:%d\", host, port ) );",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "    socket = new Socket( host, port );",
                        "lineNumber": 61,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    result.object = new Socket( host, port );",
                        "lineNumber": 65,
                        "lineChange": "added"
                      },
                      {
                        "line": "    break;",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "case RECEIVE:",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "{",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "    BufferedReader reader = new BufferedReader( new InputStreamReader( input ) );",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "    PrintWriter writer = new PrintWriter( socket.getOutputStream() );",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "    transferStreams( reader, writer );",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 114,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/rancher/cattle/commit/b06df6f37fdfe906b7804fbba41d2c02d472f8ab?diff=split#diff-125505ce5e24cbf259a0267dd1d3af77L314",
                    "lines": [
                      {
                        "line": "String[] parts = master.getConfig().getAdvertiseAddress().split(\":\");",
                        "lineNumber": 311,
                        "lineChange": "none"
                      },
                      {
                        "line": "try (",
                        "lineNumber": 312,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Socket socket = new Socket(parts[0], Integer.parseInt(parts[1]));",
                        "lineNumber": 313,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    OutputStream os = socket.getOutputStream();",
                        "lineNumber": 314,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    Socket socket = new Socket();",
                        "lineNumber": 313,
                        "lineChange": "added"
                      },
                      {
                        "line": ") {",
                        "lineNumber": 315,
                        "lineChange": "none"
                      },
                      {
                        "line": "    socket.connect(new InetSocketAddress(parts[0], Integer.parseInt(parts[1])), 5000);",
                        "lineNumber": 315,
                        "lineChange": "added"
                      },
                      {
                        "line": "    log.info(\"Connection test to master\");",
                        "lineNumber": 316,
                        "lineChange": "none"
                      },
                      {
                        "line": " } catch (IOException e) {",
                        "lineNumber": 317,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Use thread local sockets for everything except IDLE and STATUS.",
                  "- Adding a test that a locator can shut itself down\nwith SSL.",
                  "Added support for SSL secured Manager connections"
                ],
                "precision": "very-high",
                "repoDatasetSize": 108,
                "cwe": [
                  "CWE-319"
                ]
              }
            },
            {
              "id": "java/PT",
              "name": "PT",
              "shortDescription": {
                "text": "Path Traversal"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/google/j2objc/commit/1b271d8b25c99a91547a19f16f71c048c3164156?diff=split#diff-33b6b27033cb88022415e8cd32b1807cL244",
                    "lines": [
                      {
                        "line": " * Extract a ZipEntry to the specified directory.",
                        "lineNumber": 241,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 242,
                        "lineChange": "none"
                      },
                      {
                        "line": "public File extractZipEntry(File dir, ZipFile zipFile, ZipEntry entry) throws IOException {",
                        "lineNumber": 243,
                        "lineChange": "none"
                      },
                      {
                        "line": "  File outputFile = new File(dir, entry.getName());",
                        "lineNumber": 244,
                        "lineChange": "none"
                      },
                      {
                        "line": "  File parentFile = outputFile.getParentFile();",
                        "lineNumber": 245,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (!parentFile.isDirectory() && !parentFile.mkdirs()) {",
                        "lineNumber": 246,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    throw new IOException(\"Could not extract file to \" + dir.getPath());",
                        "lineNumber": 247,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  if (!outputFile.getCanonicalPath().startsWith(dir.getCanonicalPath() + File.separator)",
                        "lineNumber": 246,
                        "lineChange": "added"
                      },
                      {
                        "line": "      || (!parentFile.isDirectory() && !parentFile.mkdirs())) {",
                        "lineNumber": 247,
                        "lineChange": "added"
                      },
                      {
                        "line": "    throw new IOException(\"Could not extract \" + entry.getName() + \" to \" + dir.getPath());",
                        "lineNumber": 248,
                        "lineChange": "added"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 249,
                        "lineChange": "none"
                      },
                      {
                        "line": "  try (InputStream inputStream = zipFile.getInputStream(entry);",
                        "lineNumber": 250,
                        "lineChange": "none"
                      },
                      {
                        "line": "      FileOutputStream outputStream = new FileOutputStream(outputFile)) {",
                        "lineNumber": 251,
                        "lineChange": "none"
                      },
                      {
                        "line": "    byte[] buf = new byte[1024];",
                        "lineNumber": 252,
                        "lineChange": "none"
                      },
                      {
                        "line": "    int n;",
                        "lineNumber": 253,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/blackducksoftware/synopsys-detect/commit/36555b9322986e9560f241d05f2262c29a17663b?diff=split#diff-bc0b5be9b9918488d8fe1dc64584df62L48",
                    "lines": [
                      {
                        "line": "Enumeration<? extends ZipEntry> entries = zipFile.entries();",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "while (entries.hasMoreElements()) {",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "    ZipEntry entry = entries.nextElement();",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Path entryPath = destPath.resolve(entry.getName());",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!entryPath.normalize().startsWith(dest.toPath()))",
                        "lineNumber": 49,
                        "lineChange": "added"
                      },
                      {
                        "line": "        throw new IOException(\"Zip entry contained path traversal\");",
                        "lineNumber": 50,
                        "lineChange": "added"
                      },
                      {
                        "line": "    if (entry.isDirectory()) {",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Files.createDirectories(entryPath);",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "        Files.createDirectories(entryPath.getParent());",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try (InputStream in = zipFile.getInputStream(entry)) {",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "            try (OutputStream out = new FileOutputStream(entryPath.toFile())) {",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "                IOUtils.copy(in, out);",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }",
                        "lineNumber": 58,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/azkaban/azkaban/commit/3b74a4127c9086cd525252edabc3621febab0428?diff=split#diff-c892cca6401b1e0be4cbca3261b47098L201",
                    "lines": [
                      {
                        "line": "final Enumeration<?> entries = source.entries();",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "while (entries.hasMoreElements()) {",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "  final ZipEntry entry = (ZipEntry) entries.nextElement();",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "  final File newFile = new File(dest, entry.getName());",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (!newFile.getCanonicalPath().startsWith(dest.getCanonicalPath())) {",
                        "lineNumber": 202,
                        "lineChange": "added"
                      },
                      {
                        "line": "    throw new IOException(",
                        "lineNumber": 203,
                        "lineChange": "added"
                      },
                      {
                        "line": "        \"Extracting zip entry would have resulted in a file outside the specified destination\"",
                        "lineNumber": 204,
                        "lineChange": "added"
                      },
                      {
                        "line": "if (entry.isDirectory()) {",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "  newFile.mkdirs();",
                        "lineNumber": 209,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 210,
                        "lineChange": "none"
                      },
                      {
                        "line": "  newFile.getParentFile().mkdirs();",
                        "lineNumber": 211,
                        "lineChange": "none"
                      },
                      {
                        "line": "  final InputStream src = source.getInputStream(entry);",
                        "lineNumber": 212,
                        "lineChange": "none"
                      },
                      {
                        "line": "  try {",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "    final OutputStream output =",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "        new BufferedOutputStream(new FileOutputStream(newFile));",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "      IOUtils.copy(src, output);",
                        "lineNumber": 217,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Test changed key to file.",
                  "* more code cleanup, some tests",
                  "Add option --xcode for Xcode translation testing"
                ],
                "precision": "very-high",
                "repoDatasetSize": 948,
                "cwe": [
                  "CWE-23"
                ]
              }
            },
            {
              "id": "java/NonCryptoHardcodedSecret/test",
              "name": "NonCryptoHardcodedSecret/test",
              "shortDescription": {
                "text": "Use of Hardcoded, Security-relevant Constants"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nWhen constants are hardcoded into applications, this information could easily be reverse-engineered and become known to attackers. For example, if a breached authentication token is hardcoded in multiple places in the application, it may lead to components of the application remaining vulnerable if not all instances are changed.\nAnother negative effect of hard-coding constants is potential unpredictability in the application's performance if the development team fails to update every single instance of the hardcoded constant throughout the code. For these reasons, hard-coding security-relevant constants is considered bad coding practice and should be remedied if present and avoided in future.\n\n### Best practices for prevention\n* Never hard code security-related constants; use symbolic names or configuration lookup files.\n* As hard coding is often done by coders working alone on a small scale, examine all legacy code components and test carefully when scaling.\n* Adopt a \"future-proof code\" mindset: While use of constants may save a little time now and make development simpler in the short term, it could cost time and money adapting to scale or other unforeseen circumstances (such as new hardware) in the future.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/RocketChat/Rocket.Chat.Java.SDK/commit/6f17474770cd120650daa9945ed65273aaa5ec5c?diff=split#diff-fc51f9a049d8a8cd9df2a4226b87c214L19",
                    "lines": [
                      {
                        "line": "String username = \"sachin.shinde\";",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "String password = \"sachin9924\";",
                        "lineNumber": 18,
                        "lineChange": "removed"
                      },
                      {
                        "line": "String password = \"sachin123\";",
                        "lineNumber": 23,
                        "lineChange": "added"
                      },
                      {
                        "line": "private static String serverurl = \"wss://demo.rocket.chat\";",
                        "lineNumber": 25,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/wso2-attic/ballerina-message-broker/commit/8d606a4838b057411b7226e4651f7ca59d9746ce?diff=split#diff-2d8482e5c13da266ce6e6196d45bdf1eL66",
                    "lines": [
                      {
                        "line": "private String user = \"wso2carbon\";",
                        "lineNumber": 63,
                        "lineChange": "removed"
                      },
                      {
                        "line": "private String user = \"ballerina\";",
                        "lineNumber": 63,
                        "lineChange": "added"
                      },
                      {
                        "line": "private String password = \"wso2carbon\";",
                        "lineNumber": 65,
                        "lineChange": "removed"
                      },
                      {
                        "line": "private String password = \"ballerina\";",
                        "lineNumber": 65,
                        "lineChange": "added"
                      },
                      {
                        "line": "public String getUrl() {",
                        "lineNumber": 67,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/games647/FlexibleLogin/commit/9ea9726f145063f4436ca47ef864735e247c34c1?diff=split#diff-02a91e75dcc99d9c759ee4d9e0c88734L26",
                    "lines": [
                      {
                        "line": "@Setting(comment = \"Password in order to login\")",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "private String password = \"password123456789\";",
                        "lineNumber": 25,
                        "lineChange": "removed"
                      },
                      {
                        "line": "private String password = \"\";",
                        "lineNumber": 25,
                        "lineChange": "added"
                      },
                      {
                        "line": "public SQLType getType() {",
                        "lineNumber": 27,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Removed test keys",
                  "Remove API keys",
                  "Remove DropBox sync API libraries and dependencies"
                ],
                "precision": "very-high",
                "repoDatasetSize": 158,
                "cwe": [
                  "CWE-547"
                ]
              }
            },
            {
              "id": "java/TooPermissiveHostnameVerifier/test",
              "name": "TooPermissiveHostnameVerifier/test",
              "shortDescription": {
                "text": "Improper Certificate Validation"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nCommunication through encrypted TLS/SSL protocols can only take place when the server bears a valid certificate associating that server with a valid public-key identity issued by a third-party authority. If certificate validation is cursory or incomplete, this creates a weakness whereby an attacker can spoof one or more certificate details (e.g., expiration date), gaining unauthorized access to confidential data and privileged actions.\n\n### Best practices for prevention\n* Verify all aspects of any certificate provided, particularly chain of trust (issuing authority), host identity, and expiration.\n* Limit the validity period for certificates.\n* Avoid using self-signed certificates, certificate pinning, and wildcard certificates, as these all add levels of convenience but can also lead to loss of control over site/app security.\n* Disable older and insecure protocols (for example, SSL 2.0/3.0, MD5, and 3DES).\n* Ensure that all team members are familiar with current best practices and approaches, such as current TLS protocols.\n* Implement automated and manual testing using current tools and techniques designed to reveal this and related SSL weaknesses (for example, web application scanners).",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/bonigarcia/webdrivermanager/commit/90dedd67b71d59a9a15a9b11892be3cd0a1c2e4e?diff=split#diff-5fd27e182b6d09ea7f5901daab03449dL114",
                    "lines": [
                      {
                        "line": "HostnameVerifier allHostsValid = new HostnameVerifier() {",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public boolean verify(String hostname, SSLSession session) {",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return true;",
                        "lineNumber": 114,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        return hostname.equalsIgnoreCase(session.getPeerHost());",
                        "lineNumber": 114,
                        "lineChange": "added"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "};",
                        "lineNumber": 116,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/wso2-attic/product-private-paas/commit/a42df7abce437ad996fad1097a74ca7bf83da0c0?diff=split#diff-7568b7c1be7d23d9a86361e05ff18598L47",
                    "lines": [
                      {
                        "line": "if (Constants.ENABLE_SELF_CERTIFIED) {",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "    HttpsURLConnection.setDefaultHostnameVerifier(new HostnameVerifier() {",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "        @Override public boolean verify(String s, SSLSession sslSession) {",
                        "lineNumber": 46,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            return true;",
                        "lineNumber": 47,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        public boolean verify(String hostname, SSLSession session) {",
                        "lineNumber": 40,
                        "lineChange": "added"
                      },
                      {
                        "line": "            return hostname.equals(System.getProperty(Constants.HOSTNAME));",
                        "lineNumber": 41,
                        "lineChange": "added"
                      },
                      {
                        "line": "        }",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "    });",
                        "lineNumber": 49,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Liberuman/SimpleProject/commit/f7afc6477bcfb9b2f78f742df913aa9a86d251d1?diff=split#diff-68c680467370001ab531d6c88431244dL95",
                    "lines": [
                      {
                        "line": ".sslSocketFactory(sslContext.getSocketFactory(), trustManager)",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": ".hostnameVerifier(new HostnameVerifier() {",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "  @Override",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public boolean verify(String hostname, SSLSession session) {",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return true;",
                        "lineNumber": 96,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    if (!TextUtils.isEmpty(baseUrl) && baseUrl.contains(hostname)) {",
                        "lineNumber": 98,
                        "lineChange": "added"
                      },
                      {
                        "line": "      return true;",
                        "lineNumber": 99,
                        "lineChange": "added"
                      },
                      {
                        "line": "    } else {",
                        "lineNumber": 100,
                        "lineChange": "added"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "})",
                        "lineNumber": 105,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "merged the rest client and test cases according to the new folder structure",
                  "workaround for SSL verify",
                  "Smarter hostname verifier"
                ],
                "precision": "very-high",
                "repoDatasetSize": 53,
                "cwe": [
                  "CWE-295"
                ]
              }
            },
            {
              "id": "java/InsecureHash",
              "name": "InsecureHash",
              "shortDescription": {
                "text": "Use of Password Hash With Insufficient Computational Effort"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nSensitive information should never be stored in plain text, since this makes it very easy for unauthorized users, whether malicious insiders or outside attackers, to access. Hashing methods are used to make stored passwords and other sensitive data unreadable to users. For example, when a password is defined for the first time, it is hashed and then stored. The next time that user attempts to log on, the password they enter is hashed following the same procedure and compared with the stored value. In this way, the original password never needs to be stored in the system.\n\nHashing is a one-way scheme, meaning a hashed password cannot be reverse engineered. However, if an outdated or custom programmed hashing scheme is used, it becomes simple for an attacker with powerful modern computing power to gain access to the hashes used. This opens up access to all stored password information, leading to breached security. Therefore, it is essential for developers to understand modern, secure password hashing techniques.\n\n### Best practices for prevention\n* Use strong standard algorithms for hashing rather than simpler but outdated methods or DIY hashing schemes, which may have inherent weaknesses.\n* Use modular design for all code dealing with hashing so it can be swapped out as security standards change over time.\n* Use salting in combination with hashing (While this places more demands on resources, it is an essential step for tighter security.).\n* Implement zero-trust architecture to ensure that access to password data is granted only for legitimate business purposes.\n* Increase developer awareness of current standards in data security and cryptography.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/tita/tita/commit/398f6b776a2aea7f20bf604768b8721beff8d93a?diff=split#diff-dd34c5e6a15ca48bff6f9ca749e68243L164",
                    "lines": [
                      {
                        "line": " */",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "private String getHashedPassword(String pwd) throws NoSuchAlgorithmException {",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "    MessageDigest md = MessageDigest.getInstance(\"SHA-1\");",
                        "lineNumber": 163,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    MessageDigest md = MessageDigest.getInstance(\"SHA-256\");",
                        "lineNumber": 103,
                        "lineChange": "added"
                      },
                      {
                        "line": "    byte[] encryptMsg = md.digest(pwd.getBytes());",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return new String(encryptMsg);",
                        "lineNumber": 165,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    return bytes2String(encryptMsg);",
                        "lineNumber": 105,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/devonfw/my-thai-star/commit/095a3fb6bb860a2411cb51e812121ec2a6b99894?diff=split#diff-4f73d1042058dd462057744068125d4eL242",
                    "lines": [
                      {
                        "line": "    + String.format(\"%02d\", ldt1.getSecond());",
                        "lineNumber": 240,
                        "lineChange": "none"
                      },
                      {
                        "line": "MessageDigest md = MessageDigest.getInstance(\"MD5\");",
                        "lineNumber": 241,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MessageDigest md = MessageDigest.getInstance(\"SHA-256\");",
                        "lineNumber": 242,
                        "lineChange": "added"
                      },
                      {
                        "line": "md.update((email + date + time).getBytes());",
                        "lineNumber": 243,
                        "lineChange": "none"
                      },
                      {
                        "line": "byte[] digest = md.digest();",
                        "lineNumber": 244,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/SecurityCompass/AndroidLabs/commit/5608f75dd665beac85dbad08f80b91d73b27904a?diff=split#diff-ffc047d4a5f84de13e373f2392bfb11bL148",
                    "lines": [
                      {
                        "line": "byte[] passwordBytes = (password).getBytes(\"UTF-8\");",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "MessageDigest md = MessageDigest.getInstance(\"SHA-1\");",
                        "lineNumber": 147,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MessageDigest md = MessageDigest.getInstance(\"SHA-256\");",
                        "lineNumber": 147,
                        "lineChange": "added"
                      },
                      {
                        "line": "md.reset();",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "md.update(salt);",
                        "lineNumber": 149,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Added an enum for the supported encryption algorithms",
                  "Added #hash(byte[], String)",
                  "Added support for\nsha256 and nonce token."
                ],
                "precision": "very-high",
                "repoDatasetSize": 122,
                "cwe": [
                  "CWE-916"
                ]
              }
            },
            {
              "id": "java/InsecureHash/test",
              "name": "InsecureHash/test",
              "shortDescription": {
                "text": "Use of Password Hash With Insufficient Computational Effort"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nSensitive information should never be stored in plain text, since this makes it very easy for unauthorized users, whether malicious insiders or outside attackers, to access. Hashing methods are used to make stored passwords and other sensitive data unreadable to users. For example, when a password is defined for the first time, it is hashed and then stored. The next time that user attempts to log on, the password they enter is hashed following the same procedure and compared with the stored value. In this way, the original password never needs to be stored in the system.\n\nHashing is a one-way scheme, meaning a hashed password cannot be reverse engineered. However, if an outdated or custom programmed hashing scheme is used, it becomes simple for an attacker with powerful modern computing power to gain access to the hashes used. This opens up access to all stored password information, leading to breached security. Therefore, it is essential for developers to understand modern, secure password hashing techniques.\n\n### Best practices for prevention\n* Use strong standard algorithms for hashing rather than simpler but outdated methods or DIY hashing schemes, which may have inherent weaknesses.\n* Use modular design for all code dealing with hashing so it can be swapped out as security standards change over time.\n* Use salting in combination with hashing (While this places more demands on resources, it is an essential step for tighter security.).\n* Implement zero-trust architecture to ensure that access to password data is granted only for legitimate business purposes.\n* Increase developer awareness of current standards in data security and cryptography.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/tita/tita/commit/398f6b776a2aea7f20bf604768b8721beff8d93a?diff=split#diff-dd34c5e6a15ca48bff6f9ca749e68243L164",
                    "lines": [
                      {
                        "line": " */",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "private String getHashedPassword(String pwd) throws NoSuchAlgorithmException {",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "    MessageDigest md = MessageDigest.getInstance(\"SHA-1\");",
                        "lineNumber": 163,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    MessageDigest md = MessageDigest.getInstance(\"SHA-256\");",
                        "lineNumber": 103,
                        "lineChange": "added"
                      },
                      {
                        "line": "    byte[] encryptMsg = md.digest(pwd.getBytes());",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return new String(encryptMsg);",
                        "lineNumber": 165,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    return bytes2String(encryptMsg);",
                        "lineNumber": 105,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/devonfw/my-thai-star/commit/095a3fb6bb860a2411cb51e812121ec2a6b99894?diff=split#diff-4f73d1042058dd462057744068125d4eL242",
                    "lines": [
                      {
                        "line": "    + String.format(\"%02d\", ldt1.getSecond());",
                        "lineNumber": 240,
                        "lineChange": "none"
                      },
                      {
                        "line": "MessageDigest md = MessageDigest.getInstance(\"MD5\");",
                        "lineNumber": 241,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MessageDigest md = MessageDigest.getInstance(\"SHA-256\");",
                        "lineNumber": 242,
                        "lineChange": "added"
                      },
                      {
                        "line": "md.update((email + date + time).getBytes());",
                        "lineNumber": 243,
                        "lineChange": "none"
                      },
                      {
                        "line": "byte[] digest = md.digest();",
                        "lineNumber": 244,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/SecurityCompass/AndroidLabs/commit/5608f75dd665beac85dbad08f80b91d73b27904a?diff=split#diff-ffc047d4a5f84de13e373f2392bfb11bL148",
                    "lines": [
                      {
                        "line": "byte[] passwordBytes = (password).getBytes(\"UTF-8\");",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "MessageDigest md = MessageDigest.getInstance(\"SHA-1\");",
                        "lineNumber": 147,
                        "lineChange": "removed"
                      },
                      {
                        "line": "MessageDigest md = MessageDigest.getInstance(\"SHA-256\");",
                        "lineNumber": 147,
                        "lineChange": "added"
                      },
                      {
                        "line": "md.reset();",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "md.update(salt);",
                        "lineNumber": 149,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Added an enum for the supported encryption algorithms",
                  "Added #hash(byte[], String)",
                  "Added support for\nsha256 and nonce token."
                ],
                "precision": "very-high",
                "repoDatasetSize": 122,
                "cwe": [
                  "CWE-916"
                ]
              }
            },
            {
              "id": "java/WebCookieMissesCallToSetHttpOnly/test",
              "name": "WebCookieMissesCallToSetHttpOnly/test",
              "shortDescription": {
                "text": "Sensitive Cookie Without 'HttpOnly' Flag"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nThe `HttpOnly` flag is a simple parameter used when setting a user cookie to ensure that cookies with sensitive session data are visible only to the browser rather than to scripts. This helps prevent cross-site scripting attacks, in which an attacker gains access to sensitive session information and uses this information to trick legitimate web-based applications into disclosing confidential information or accepting illegitimate requests. When developers use the `HttpOnly` flag to set the cookie, they ensure that this sensitive session information is not readable or writable except by the browser (read) and server (write), respectively. While most modern browsers and versions now recognize the HttpOnly flag, some legacy and custom browsers still do not.\n\n### Best practices for prevention\n* Include the `HttpOnly` attribute in the response header when setting cookies on the client side. Be aware, however, that this crucial step provides only partial remediation.\n* Integrate client-side scripts to determine browser version; require browser compatibility or avoid transmitting sensitive data to browsers that do not support `HttpOnly`.\n* Understand and evaluate risks of third-party components or plugins, which may expose cookies.\n* Educate developers in a zero-trust approach, understanding the risks and best practices to prevent cross-site scripting, such as sanitizing all user input for code and special characters.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/417511458/jbone/commit/af32abbc24e2e27aad90f60f96cb9de5d1794a6b?diff=split#diff-a896741011f3ab283be812e19dc1cdb1L167",
                    "lines": [
                      {
                        "line": "@Bean",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "public SimpleCookie getCookie(){",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "    SimpleCookie cookie = new SimpleCookie();",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cookie.setName(\"jbone.session.id\");",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cookie.setHttpOnly(false);",
                        "lineNumber": 168,
                        "lineChange": "added"
                      },
                      {
                        "line": "    return cookie;",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 170,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Dreampie/Resty/commit/2808658b3e7d46ebac839fa9620b84bc7eb38e55?diff=split#diff-6c1831bb7349c574c1ec5a92f5ca0072L60",
                    "lines": [
                      {
                        "line": "  }",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "  Cookie c = new Cookie(cookie, value);",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "  c.setPath(\"/\");",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "  c.setMaxAge(expiration);",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "  c.setHttpOnly(httpOnly);",
                        "lineNumber": 68,
                        "lineChange": "added"
                      },
                      {
                        "line": "  response.addCookie(c);",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 70,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/igniterealtime/Openfire/commit/db32bf15648e53d810be358f6fe8bb914544dad9?diff=split#diff-ccf715fb4529c9f89d175d29aef63cf5L127",
                    "lines": [
                      {
                        "line": "        path = \"/\";",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Cookie cookie = new Cookie(name, value);",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cookie.setMaxAge(maxAge);",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cookie.setPath(path);",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cookie.setHttpOnly(true);",
                        "lineNumber": 129,
                        "lineChange": "added"
                      },
                      {
                        "line": "    response.addCookie(cookie);",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 131,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Implemented Cookie HttpOnly support."
                ],
                "precision": "very-high",
                "repoDatasetSize": 103,
                "cwe": [
                  "CWE-1004"
                ]
              }
            },
            {
              "id": "java/WebCookieMissesCallToSetSecure",
              "name": "WebCookieMissesCallToSetSecure",
              "shortDescription": {
                "text": "Sensitive Cookie in HTTPS Session Without 'Secure' Attribute"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nIn a session hijacking attack, if a cookie containing sensitive data is set without the `secure` attribute, an attacker might be able to intercept that cookie. Once the attacker has this information, they can potentially impersonate a user, accessing confidential data and performing actions that they would not normally be authorized to do. Attackers often gain access to this sensitive cookie data when it is transmitted insecurely in plain text over a standard HTTP session, rather than being encrypted and sent over an HTTPS session. This type of attack is highly preventable by following best practices when setting sensitive session cookies.\n\n### Best practices for prevention\n* Set the `secure` attribute in the response header when setting cookies on the client side, and use a test tool to verify that secure cookie transmission is in place.\n* Always use HTTPS for all login pages and never redirect from HTTP to HTTPS, which leaves secure session data open to interception.\n* Follow other best practices when it comes to session cookies, such as setting the HttpOnly flag and maintaining highly time-limited sessions.\n* Consider implementing browser checks and providing secure data only within a browser that supports tight cookie security.\n* Generate session IDs in a way that is not easily predictable, invalidate sessions upon logout, and never reuse session IDs.\n* Educate developers to use built-in secure session-management functionality within the development environment instead of taking a DIY approach.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/pippo-java/pippo/commit/baa786cf11e875461090175df964a88ac7d4ecd5?diff=split#diff-8aed5e116d7d7ad41bf04c851e1d5dc7L269",
                    "lines": [
                      {
                        "line": " */",
                        "lineNumber": 266,
                        "lineChange": "none"
                      },
                      {
                        "line": "private Cookie generateLanguageCookie(String language) {",
                        "lineNumber": 267,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Cookie cookie = new Cookie(applicationCookiePrefix + \"_LANG\", language);",
                        "lineNumber": 268,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cookie.setSecure(true);",
                        "lineNumber": 269,
                        "lineChange": "added"
                      },
                      {
                        "line": "    cookie.setMaxAge(TEN_YEARS);",
                        "lineNumber": 270,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return cookie;",
                        "lineNumber": 271,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 272,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/eclipse/rap/commit/bec1d767c1435f13c923c90a578473e02aa24996?diff=split#diff-a8821336a5cc73da073db6bbfff0ae4eL87",
                    "lines": [
                      {
                        "line": "}",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "// (2+3) do refresh cookie, to ensure it expires in COOKIE_MAX_AGE_SEC  ",
                        "lineNumber": 85,
                        "lineChange": "removed"
                      },
                      {
                        "line": "// (2+3) do refresh cookie, to ensure it expires in COOKIE_MAX_AGE_SEC",
                        "lineNumber": 86,
                        "lineChange": "added"
                      },
                      {
                        "line": "Cookie cookie = new Cookie( COOKIE_NAME, result );",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "cookie.setSecure( RWT.getRequest().isSecure() );",
                        "lineNumber": 88,
                        "lineChange": "added"
                      },
                      {
                        "line": "cookie.setMaxAge( COOKIE_MAX_AGE_SEC );",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "ContextProvider.getResponse().addCookie( cookie );",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "// (2+3) update storeId stored in session",
                        "lineNumber": 91,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/InnovateUKGitHub/innovation-funding-service/commit/a770f11236a0a40bfdd1e6b181d5a80e0da970ea?diff=split#diff-e27b77e438734a64c56eb279998f82b3L80",
                    "lines": [
                      {
                        "line": "public void removeAuthentication(HttpServletResponse response) {",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Cookie cookie = new Cookie(AUTH_TOKEN, null);",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cookie.setMaxAge(0);",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cookie.setSecure(cookieSecure);",
                        "lineNumber": 88,
                        "lineChange": "added"
                      },
                      {
                        "line": "    cookie.setHttpOnly(cookieHttpOnly);",
                        "lineNumber": 89,
                        "lineChange": "added"
                      },
                      {
                        "line": "    response.addCookie(cookie);",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 91,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Added cookie support in HttpRequest/Response",
                  "Set secure user cookies and only for HTTP."
                ],
                "precision": "very-high",
                "repoDatasetSize": 88,
                "cwe": [
                  "CWE-614"
                ]
              }
            },
            {
              "id": "java/InsecureCipher/test",
              "name": "InsecureCipher/test",
              "shortDescription": {
                "text": "Use of a Broken or Risky Cryptographic Algorithm"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nWhen sensitive information is transmitted with weak encryption, attackers are potentially able to intercept the information and decrypt it, with a wide range of negative consequences. This includes accessing code or content they are not authorized to view and changing or taking down a site or app, often with a demand for ransom. Every developer is aware of the risks of transmitting sensitive information in plain text. Yet many still use outdated or inferior cryptographic methods to protect information under their control. As cryptographic methods grow stronger with time, code must be updated to incorporate more modern and secure cryptography.\n\n### Best practices for prevention\n* Avoid using DES, and use AES (in a secure mode, such as Galois/Counter Mode) or another strong encryption algorithm instead.\n* Be aware of outdated hashes, such as MD5 and SHA1 (along with many others); recognize and implement current cryptographic standards instead.\n* Never use custom or DIY security and cryptographic methods; instead, use methods that are part of an accepted library or framework.\n* Ensure that code dealing with cryptographic methods is highly modular and can be easily replaced as security standards change.\n* Increase developer awareness of proper encryption key management and protection to ensure best practices throughout the application.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/matthewmccullough/encryption-jvm-bootcamp/commit/de0bb8bb6143d1c24c7d31c238f04b6eae009393?diff=split#diff-cb0790c00644741f9df5a7f311aec96aL36",
                    "lines": [
                      {
                        "line": "//Set up the cipher",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "final Cipher desCipher = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");",
                        "lineNumber": 35,
                        "lineChange": "removed"
                      },
                      {
                        "line": "final Cipher desCipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");",
                        "lineNumber": 35,
                        "lineChange": "added"
                      },
                      {
                        "line": "//////////////////////////////////////",
                        "lineNumber": 37,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/TrsstProject/trsst/commit/50df034a0214314137898d9abb41ddf9770f0d67?diff=split#diff-93779de8272688c3ecb0711530fa8fa3L634",
                    "lines": [
                      {
                        "line": " IESCipher cipher = new IESCipher(new IESEngine(",
                        "lineNumber": 632,
                        "lineChange": "none"
                      },
                      {
                        "line": "        new ECDHBasicAgreement(), new KDF2BytesGenerator(",
                        "lineNumber": 633,
                        "lineChange": "none"
                      },
                      {
                        "line": "                new SHA1Digest()), new HMac(new SHA1Digest()),",
                        "lineNumber": 632,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        new PaddedBufferedBlockCipher(new DESEngine())));",
                        "lineNumber": 633,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                new SHA1Digest()), new HMac(new SHA256Digest()),",
                        "lineNumber": 634,
                        "lineChange": "added"
                      },
                      {
                        "line": "        new PaddedBufferedBlockCipher(new AESEngine())));",
                        "lineNumber": 635,
                        "lineChange": "added"
                      },
                      {
                        "line": "cipher.engineInit(Cipher.ENCRYPT_MODE, publicKey,",
                        "lineNumber": 636,
                        "lineChange": "none"
                      },
                      {
                        "line": "        new SecureRandom());",
                        "lineNumber": 637,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/apache/cloudstack/commit/34f8f795e15b89477f72aa6f1e69f7797c930db4?diff=split#diff-56788b012a7afc046f3c8de66500236aL55",
                    "lines": [
                      {
                        "line": "try {",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "  Cipher cipher = Cipher.getInstance(\"DES\");",
                        "lineNumber": 54,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  int maxKeySize = 8;",
                        "lineNumber": 55,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  SecretKeySpec keySpec = new SecretKeySpec(normalizeKey(password.getBytes(), maxKeySize), \"DES\");",
                        "lineNumber": 56,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");",
                        "lineNumber": 56,
                        "lineChange": "added"
                      },
                      {
                        "line": "  SecretKeySpec keySpec = new SecretKeySpec(keyIvPair.getKeyBytes(), \"AES\");",
                        "lineNumber": 57,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Adding AES example and unit test",
                  "Removed IDEA and RC2 CipherSuites to make it clear they are not\nsupported.",
                  "- added *_AES_* cipher suites to SSLEngine (and therefore Java SSLSocketImpl)"
                ],
                "precision": "very-high",
                "repoDatasetSize": 50,
                "cwe": [
                  "CWE-327"
                ]
              }
            },
            {
              "id": "java/WebCookieMissesCallToSetSecure/test",
              "name": "WebCookieMissesCallToSetSecure/test",
              "shortDescription": {
                "text": "Sensitive Cookie in HTTPS Session Without 'Secure' Attribute"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nIn a session hijacking attack, if a cookie containing sensitive data is set without the `secure` attribute, an attacker might be able to intercept that cookie. Once the attacker has this information, they can potentially impersonate a user, accessing confidential data and performing actions that they would not normally be authorized to do. Attackers often gain access to this sensitive cookie data when it is transmitted insecurely in plain text over a standard HTTP session, rather than being encrypted and sent over an HTTPS session. This type of attack is highly preventable by following best practices when setting sensitive session cookies.\n\n### Best practices for prevention\n* Set the `secure` attribute in the response header when setting cookies on the client side, and use a test tool to verify that secure cookie transmission is in place.\n* Always use HTTPS for all login pages and never redirect from HTTP to HTTPS, which leaves secure session data open to interception.\n* Follow other best practices when it comes to session cookies, such as setting the HttpOnly flag and maintaining highly time-limited sessions.\n* Consider implementing browser checks and providing secure data only within a browser that supports tight cookie security.\n* Generate session IDs in a way that is not easily predictable, invalidate sessions upon logout, and never reuse session IDs.\n* Educate developers to use built-in secure session-management functionality within the development environment instead of taking a DIY approach.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/pippo-java/pippo/commit/baa786cf11e875461090175df964a88ac7d4ecd5?diff=split#diff-8aed5e116d7d7ad41bf04c851e1d5dc7L269",
                    "lines": [
                      {
                        "line": " */",
                        "lineNumber": 266,
                        "lineChange": "none"
                      },
                      {
                        "line": "private Cookie generateLanguageCookie(String language) {",
                        "lineNumber": 267,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Cookie cookie = new Cookie(applicationCookiePrefix + \"_LANG\", language);",
                        "lineNumber": 268,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cookie.setSecure(true);",
                        "lineNumber": 269,
                        "lineChange": "added"
                      },
                      {
                        "line": "    cookie.setMaxAge(TEN_YEARS);",
                        "lineNumber": 270,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return cookie;",
                        "lineNumber": 271,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 272,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/eclipse/rap/commit/bec1d767c1435f13c923c90a578473e02aa24996?diff=split#diff-a8821336a5cc73da073db6bbfff0ae4eL87",
                    "lines": [
                      {
                        "line": "}",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "// (2+3) do refresh cookie, to ensure it expires in COOKIE_MAX_AGE_SEC  ",
                        "lineNumber": 85,
                        "lineChange": "removed"
                      },
                      {
                        "line": "// (2+3) do refresh cookie, to ensure it expires in COOKIE_MAX_AGE_SEC",
                        "lineNumber": 86,
                        "lineChange": "added"
                      },
                      {
                        "line": "Cookie cookie = new Cookie( COOKIE_NAME, result );",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "cookie.setSecure( RWT.getRequest().isSecure() );",
                        "lineNumber": 88,
                        "lineChange": "added"
                      },
                      {
                        "line": "cookie.setMaxAge( COOKIE_MAX_AGE_SEC );",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "ContextProvider.getResponse().addCookie( cookie );",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "// (2+3) update storeId stored in session",
                        "lineNumber": 91,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/InnovateUKGitHub/innovation-funding-service/commit/a770f11236a0a40bfdd1e6b181d5a80e0da970ea?diff=split#diff-e27b77e438734a64c56eb279998f82b3L80",
                    "lines": [
                      {
                        "line": "public void removeAuthentication(HttpServletResponse response) {",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Cookie cookie = new Cookie(AUTH_TOKEN, null);",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cookie.setMaxAge(0);",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cookie.setSecure(cookieSecure);",
                        "lineNumber": 88,
                        "lineChange": "added"
                      },
                      {
                        "line": "    cookie.setHttpOnly(cookieHttpOnly);",
                        "lineNumber": 89,
                        "lineChange": "added"
                      },
                      {
                        "line": "    response.addCookie(cookie);",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 91,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Added cookie support in HttpRequest/Response",
                  "Set secure user cookies and only for HTTP."
                ],
                "precision": "very-high",
                "repoDatasetSize": 88,
                "cwe": [
                  "CWE-614"
                ]
              }
            },
            {
              "id": "java/HardcodedPassword/test",
              "name": "HardcodedPassword/test",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n### Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/utluiz/spring-examples/commit/56e44932a3a004c3ac96ce1caa3e6d8817230f6e?diff=split#diff-19d771f687bc8ca37d378c39d20ed425L26",
                    "lines": [
                      {
                        "line": "  ds.setUrl(\"jdbc:mysql://localhost:3311/agenda\");",
                        "lineNumber": 23,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  ds.setUrl(\"jdbc:mysql://localhost/agenda\");",
                        "lineNumber": 20,
                        "lineChange": "added"
                      },
                      {
                        "line": "  ds.setUser(\"root\");",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "  ds.setPassword(\"root\");",
                        "lineNumber": 25,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  ds.setPassword(\"\");",
                        "lineNumber": 22,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return ds;",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 27,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Evolveum/midpoint/commit/9ce1d7ff1e78ca65d6b614c52035e1971d1187cd?diff=split#diff-0003b3a408395a5640011d7c8422d19bL43",
                    "lines": [
                      {
                        "line": "      // set the password for our message.",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "      pc.setPassword(\"5ecr3t\");",
                        "lineNumber": 42,
                        "lineChange": "removed"
                      },
                      {
                        "line": "      pc.setPassword(Main.ADM_PASSWORD);",
                        "lineNumber": 42,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 43,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/theonedev/onedev/commit/ee60c786981347fc5ab6685656f3de2ea67045f7?diff=split#diff-7f6f95fdc3f39c216b4bd099d0ca65b6L60",
                    "lines": [
                      {
                        "line": "  System.exit(1);",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "root.setPassword(\"12345\");",
                        "lineNumber": 59,
                        "lineChange": "removed"
                      },
                      {
                        "line": "String password = Bootstrap.command.getArgs()[0];",
                        "lineNumber": 63,
                        "lineChange": "added"
                      },
                      {
                        "line": "root.setPassword(password);",
                        "lineNumber": 64,
                        "lineChange": "added"
                      },
                      {
                        "line": "accountManager.save(root);",
                        "lineNumber": 65,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Added user/password configuration from YML file.",
                  "Added ability to configure databases to run tests against."
                ],
                "precision": "very-high",
                "repoDatasetSize": 383,
                "cwe": [
                  "CWE-798",
                  "CWE-259"
                ]
              }
            },
            {
              "id": "java/WebCookieMissesCallToSetHttpOnly",
              "name": "WebCookieMissesCallToSetHttpOnly",
              "shortDescription": {
                "text": "Sensitive Cookie Without 'HttpOnly' Flag"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nThe `HttpOnly` flag is a simple parameter used when setting a user cookie to ensure that cookies with sensitive session data are visible only to the browser rather than to scripts. This helps prevent cross-site scripting attacks, in which an attacker gains access to sensitive session information and uses this information to trick legitimate web-based applications into disclosing confidential information or accepting illegitimate requests. When developers use the `HttpOnly` flag to set the cookie, they ensure that this sensitive session information is not readable or writable except by the browser (read) and server (write), respectively. While most modern browsers and versions now recognize the HttpOnly flag, some legacy and custom browsers still do not.\n\n### Best practices for prevention\n* Include the `HttpOnly` attribute in the response header when setting cookies on the client side. Be aware, however, that this crucial step provides only partial remediation.\n* Integrate client-side scripts to determine browser version; require browser compatibility or avoid transmitting sensitive data to browsers that do not support `HttpOnly`.\n* Understand and evaluate risks of third-party components or plugins, which may expose cookies.\n* Educate developers in a zero-trust approach, understanding the risks and best practices to prevent cross-site scripting, such as sanitizing all user input for code and special characters.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/417511458/jbone/commit/af32abbc24e2e27aad90f60f96cb9de5d1794a6b?diff=split#diff-a896741011f3ab283be812e19dc1cdb1L167",
                    "lines": [
                      {
                        "line": "@Bean",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "public SimpleCookie getCookie(){",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "    SimpleCookie cookie = new SimpleCookie();",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cookie.setName(\"jbone.session.id\");",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cookie.setHttpOnly(false);",
                        "lineNumber": 168,
                        "lineChange": "added"
                      },
                      {
                        "line": "    return cookie;",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 170,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Dreampie/Resty/commit/2808658b3e7d46ebac839fa9620b84bc7eb38e55?diff=split#diff-6c1831bb7349c574c1ec5a92f5ca0072L60",
                    "lines": [
                      {
                        "line": "  }",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else {",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "  Cookie c = new Cookie(cookie, value);",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "  c.setPath(\"/\");",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "  c.setMaxAge(expiration);",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "  c.setHttpOnly(httpOnly);",
                        "lineNumber": 68,
                        "lineChange": "added"
                      },
                      {
                        "line": "  response.addCookie(c);",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 70,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/igniterealtime/Openfire/commit/db32bf15648e53d810be358f6fe8bb914544dad9?diff=split#diff-ccf715fb4529c9f89d175d29aef63cf5L127",
                    "lines": [
                      {
                        "line": "        path = \"/\";",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Cookie cookie = new Cookie(name, value);",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cookie.setMaxAge(maxAge);",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cookie.setPath(path);",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cookie.setHttpOnly(true);",
                        "lineNumber": 129,
                        "lineChange": "added"
                      },
                      {
                        "line": "    response.addCookie(cookie);",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 131,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Implemented Cookie HttpOnly support."
                ],
                "precision": "very-high",
                "repoDatasetSize": 103,
                "cwe": [
                  "CWE-1004"
                ]
              }
            },
            {
              "id": "java/ReturnsPassword/test",
              "name": "ReturnsPassword/test",
              "shortDescription": {
                "text": "Unprotected Storage of Credentials"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nIf credentials are not protected or not sufficiently protected through strong encryption, attackers can access this information in a number of ways. Developers may rely on plain-text storage of credentials when they believe the system is completely secure from attack or only accessible to insiders. This confidence is misguided and dangerous. If a malicious insider-such as a former employee-or a hostile attacker using SQL injection, XML injection, or a brute-force attack accesses the system, they can access this credential information to gain unauthorized permissions within the system and to export other confidential and secure information.\n\n### Best practices for prevention\n* Ensure that passwords are never stored in plain text, even for \"purely internal\" use.\n* Never rely on password encoding, such as base 64 encoding; choose a complex encryption algorithm that includes salting, then hashing.\n* Implement zero-trust approaches in which users have access only to information needed for legitimate business purposes.\n* To the greatest extent possible, secure the application against injection attacks and other types of weaknesses.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/Raysmond/SpringBlog/commit/3fbcae1e4627151fef017182e2be25404efb6778?diff=split#diff-5db28c34e3a8215d068e1650562a5e85L78",
                    "lines": [
                      {
                        "line": "logger.info(\"\" + passwordEncoder.matches(password, user.getPassword()));",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (!user.getPassword().equals(passwordEncoder.encode(password)))",
                        "lineNumber": 77,
                        "lineChange": "removed"
                      },
                      {
                        "line": "boolean match = passwordEncoder.matches(password, user.getPassword());",
                        "lineNumber": 77,
                        "lineChange": "added"
                      },
                      {
                        "line": "if (!match)",
                        "lineNumber": 78,
                        "lineChange": "added"
                      },
                      {
                        "line": "    return false;",
                        "lineNumber": 79,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/linlinjava/litemall/commit/62964b8be5856976d673e0942a3457d252147d47?diff=split#diff-350e06b09af70876f8b603fb1d33080fL64",
                    "lines": [
                      {
                        "line": "}",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "if(!user.getPassword().equals(password)){",
                        "lineNumber": 63,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    return ResponseUtil.badArgumentValue();",
                        "lineNumber": 64,
                        "lineChange": "removed"
                      },
                      {
                        "line": "BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();",
                        "lineNumber": 64,
                        "lineChange": "added"
                      },
                      {
                        "line": "if(!encoder.matches(password, user.getPassword())){",
                        "lineNumber": 65,
                        "lineChange": "added"
                      },
                      {
                        "line": "    return ResponseUtil.fail(403, \"Þ┤ªÕÅÀÕ»åþáüõ©ìÕ»╣\");",
                        "lineNumber": 66,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 67,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/guchengwuyue/yshopmall/commit/28985ae95e09e9433788475d8bef2a10a197d0ec?diff=split#diff-3eddbc993068925ffebe6bd98b170164L155",
                    "lines": [
                      {
                        "line": "    throw new BadRequestException(\"õ┐«µö╣Õñ▒Þ┤Ñ´╝îµùºÕ»åþáüÚöÖÞ»»\");",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "if(userDetails.getPassword().equals(EncryptUtils.encryptPassword(user.getNewPass()))){",
                        "lineNumber": 154,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if(passwordEncoder.matches(newPass, user.getPassword())){",
                        "lineNumber": 178,
                        "lineChange": "added"
                      },
                      {
                        "line": "    throw new BadRequestException(\"µû░Õ»åþáüõ©ìÞâ¢õ©ÄµùºÕ»åþáüþø©ÕÉî\");",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 180,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Rollback to Password File instead of password"
                ],
                "precision": "very-high",
                "repoDatasetSize": 147,
                "cwe": [
                  "CWE-256"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "java/TLS/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Implement secure HTTPS communication. Consider using latest TLSv1.2 instead of javax.net.ssl.SSLContext.getInstance.",
            "markdown": "Implement secure HTTPS communication. Consider using latest TLSv1.2 instead of {0}.",
            "arguments": [
              "[javax.net.ssl.SSLContext.getInstance](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/RemotingLoginModuleUseNewClientCertTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 226,
                  "endLine": 226,
                  "startColumn": 33,
                  "endColumn": 55
                }
              }
            }
          ],
          "fingerprints": {
            "0": "83d7268f828c9ceda4036a356221c301bcb29b55d6745d467785459edcb68c64",
            "1": "19689298.1cbd3ff4.011b8e79.b2f7d106.178caa9c.67356b77.3d39ca0c.54d46e25.19689298.1cbd3ff4.011b8e79.b2f7d106.178caa9c.67356b77.3d39ca0c.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/RemotingLoginModuleUseNewClientCertTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 226,
                            "endLine": 226,
                            "startColumn": 33,
                            "endColumn": 55
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/TLS/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Implement secure HTTPS communication. Consider using latest TLSv1.2 instead of javax.net.ssl.SSLContext.getInstance.",
            "markdown": "Implement secure HTTPS communication. Consider using latest TLSv1.2 instead of {0}.",
            "arguments": [
              "[javax.net.ssl.SSLContext.getInstance](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/manualmode/src/test/java/org/apache/directory/server/ldap/handlers/ssl/LdapsInitializer.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 341,
                  "endLine": 341,
                  "startColumn": 44,
                  "endColumn": 66
                }
              }
            }
          ],
          "fingerprints": {
            "0": "73b2627d37d38e138e1bdeec87c372afd7d9acfbe01a69f65c9d04874ffd9c33",
            "1": "19689298.7797192f.011b8e79.82e76c82.408180c7.afca3b91.a6108c8a.54d46e25.19689298.7797192f.011b8e79.82e76c82.408180c7.afca3b91.df7e59ba.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/manualmode/src/test/java/org/apache/directory/server/ldap/handlers/ssl/LdapsInitializer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 341,
                            "endLine": 341,
                            "startColumn": 44,
                            "endColumn": 66
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 351,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/TLS/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Implement secure HTTPS communication. Consider using latest TLSv1.2 instead of javax.net.ssl.SSLContext.getInstance.",
            "markdown": "Implement secure HTTPS communication. Consider using latest TLSv1.2 instead of {0}.",
            "arguments": [
              "[javax.net.ssl.SSLContext.getInstance](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/logging/syslogserver/TLSSyslogServer.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 84,
                  "endLine": 84,
                  "startColumn": 26,
                  "endColumn": 48
                }
              }
            }
          ],
          "fingerprints": {
            "0": "91f54999db37f0f704d432c7c481ca2ddfb7c27f881ce061105bf37685c715e0",
            "1": "ca9876a9.1cbd3ff4.33fa5dbe.e22980a8.178caa9c.7fda7c5e.3d39ca0c.54d46e25.ca9876a9.1cbd3ff4.33fa5dbe.e22980a8.178caa9c.7fda7c5e.3d39ca0c.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/logging/syslogserver/TLSSyslogServer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 84,
                            "endLine": 84,
                            "startColumn": 26,
                            "endColumn": 48
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 351,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/TLS/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Implement secure HTTPS communication. Consider using latest TLSv1.2 instead of javax.net.ssl.SSLContext.getInstance.",
            "markdown": "Implement secure HTTPS communication. Consider using latest TLSv1.2 instead of {0}.",
            "arguments": [
              "[javax.net.ssl.SSLContext.getInstance](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/handlers/RequestDumpingHandlerTestImpl.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 345,
                  "endLine": 345,
                  "startColumn": 29,
                  "endColumn": 51
                }
              }
            }
          ],
          "fingerprints": {
            "0": "277e460b5b63214e4263c3098de2d490c52f37b1508a4f5920b5ee23ab5c5d8e",
            "1": "19689298.1cbd3ff4.011b8e79.20d1e4da.178caa9c.afca3b91.01fae08d.54d46e25.19689298.1cbd3ff4.011b8e79.20d1e4da.178caa9c.afca3b91.df7e59ba.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/handlers/RequestDumpingHandlerTestImpl.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 345,
                            "endLine": 345,
                            "startColumn": 29,
                            "endColumn": 51
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/TLS/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Implement secure HTTPS communication. Consider using latest TLSv1.2 instead of javax.net.ssl.SSLContext.getInstance.",
            "markdown": "Implement secure HTTPS communication. Consider using latest TLSv1.2 instead of {0}.",
            "arguments": [
              "[javax.net.ssl.SSLContext.getInstance](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/shared/src/main/java/org/jboss/as/test/http/util/TestHttpClientUtils.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 104,
                  "endLine": 104,
                  "startColumn": 26,
                  "endColumn": 48
                }
              }
            }
          ],
          "fingerprints": {
            "0": "954dd5d40f426cb92c28f3b241bab0c055207852aa4c94e6ca040e24f356aed7",
            "1": "19689298.1cbd3ff4.011b8e79.b6ca27fe.6441080e.afca3b91.01fae08d.54d46e25.19689298.1cbd3ff4.011b8e79.b6ca27fe.6441080e.afca3b91.df7e59ba.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/http/util/TestHttpClientUtils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 104,
                            "endLine": 104,
                            "startColumn": 26,
                            "endColumn": 48
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/TLS/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Implement secure HTTPS communication. Consider using latest TLSv1.2 instead of javax.net.ssl.SSLContext.getInstance.",
            "markdown": "Implement secure HTTPS communication. Consider using latest TLSv1.2 instead of {0}.",
            "arguments": [
              "[javax.net.ssl.SSLContext.getInstance](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/security/cert/WebSecurityCERTTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 89,
                  "endLine": 89,
                  "startColumn": 30,
                  "endColumn": 52
                }
              }
            }
          ],
          "fingerprints": {
            "0": "549fd04fd7df17bfeb2be119a6bd65e3d9e90cd4429b6ecbe49fb74a9efcb79b",
            "1": "19689298.1cbd3ff4.011b8e79.ede9cf8e.6441080e.afca3b91.01fae08d.54d46e25.19689298.1cbd3ff4.011b8e79.ede9cf8e.6441080e.afca3b91.df7e59ba.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/security/cert/WebSecurityCERTTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 89,
                            "endLine": 89,
                            "startColumn": 30,
                            "endColumn": 52
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/TLS/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Implement secure HTTPS communication. Consider using latest TLSv1.2 instead of javax.net.ssl.SSLContext.getInstance.",
            "markdown": "Implement secure HTTPS communication. Consider using latest TLSv1.2 instead of {0}.",
            "arguments": [
              "[javax.net.ssl.SSLContext.getInstance](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/RemotingLoginModuleTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 226,
                  "endLine": 226,
                  "startColumn": 33,
                  "endColumn": 55
                }
              }
            }
          ],
          "fingerprints": {
            "0": "625c286fca24b28e192ecf39a5d34a311ae785ec50b1511ea4159899a3e51d3b",
            "1": "19689298.1cbd3ff4.011b8e79.b2f7d106.178caa9c.67356b77.3d39ca0c.54d46e25.19689298.1cbd3ff4.011b8e79.b2f7d106.178caa9c.67356b77.3d39ca0c.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/RemotingLoginModuleTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 226,
                            "endLine": 226,
                            "startColumn": 33,
                            "endColumn": 55
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/TrustBoundaryViolation/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into setAttribute where it is used to modify the HTTP session object. This could result in mixing trusted and untrusted data in the same data structure, thus increasing the likelihood to mistakenly trust unvalidated data.",
            "markdown": "Unsanitized input from {0} {1} into {2} where it is used to modify the HTTP session object. This could result in mixing trusted and untrusted data in the same data structure, thus increasing the likelihood to mistakenly trust unvalidated data.",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11)",
              "[setAttribute](12)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/ejb/stateful/servlet/StatefulServlet.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 77,
                  "endLine": 77,
                  "startColumn": 13,
                  "endColumn": 33
                }
              }
            }
          ],
          "fingerprints": {
            "0": "cf87e6b3f289ac9f0f0436cfe38a47d22558b2ffd327c082355dd210f0f41477",
            "1": "bbbd7c96.bd289d03.33fa5dbe.6483b32f.53e0e770.7fda7c5e.5fa5ecf9.54d46e25.bbbd7c96.c5d10016.4cfad47b.9e223445.53e0e770.7fda7c5e.3617f5f1.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/ejb/stateful/servlet/StatefulServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 86,
                            "endLine": 86,
                            "startColumn": 24,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/ejb/stateful/servlet/StatefulServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 86,
                            "endLine": 86,
                            "startColumn": 24,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/ejb/stateful/servlet/StatefulServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 86,
                            "endLine": 86,
                            "startColumn": 16,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/ejb/stateful/servlet/StatefulServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 16,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/ejb/stateful/servlet/StatefulServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 64,
                            "endLine": 64,
                            "startColumn": 16,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/ejb/stateful/servlet/StatefulServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 69,
                            "endLine": 69,
                            "startColumn": 52,
                            "endColumn": 69
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/ejb/stateful/servlet/StatefulServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 69,
                            "endLine": 69,
                            "startColumn": 36,
                            "endColumn": 77
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/ejb/stateful/servlet/StatefulServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 31,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/ejb/stateful/servlet/StatefulServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 31,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/ejb/stateful/servlet/StatefulServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 17,
                            "endColumn": 80
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/ejb/stateful/servlet/StatefulServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 76,
                            "endLine": 76,
                            "startColumn": 50,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/ejb/stateful/servlet/StatefulServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 77,
                            "endLine": 77,
                            "startColumn": 40,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/ejb/stateful/servlet/StatefulServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 77,
                            "endLine": 77,
                            "startColumn": 13,
                            "endColumn": 33
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/TrustBoundaryViolation/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into setAttribute where it is used to modify the HTTP session object. This could result in mixing trusted and untrusted data in the same data structure, thus increasing the likelihood to mistakenly trust unvalidated data.",
            "markdown": "Unsanitized input from {0} {1} into {2} where it is used to modify the HTTP session object. This could result in mixing trusted and untrusted data in the same data structure, thus increasing the likelihood to mistakenly trust unvalidated data.",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3),(4)",
              "[setAttribute](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/passivation/SessionOperationServlet.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 110,
                  "endLine": 110,
                  "startColumn": 17,
                  "endColumn": 37
                }
              }
            }
          ],
          "fingerprints": {
            "0": "188277c5e1e8f42a534486ee0af5a24ee4ecac1810e99cc181ab62540813c001",
            "1": "4e696cbd.1fa5d9ec.72aa0a4f.6c52ae28.53e0e770.9d777c91.5fa5ecf9.54d46e25.1393abbb.c5d10016.fdbc0497.9e223445.53e0e770.5b29c616.d11a1cde.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/passivation/SessionOperationServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 109,
                            "endLine": 109,
                            "startColumn": 32,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/passivation/SessionOperationServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 109,
                            "endLine": 109,
                            "startColumn": 32,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/passivation/SessionOperationServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 109,
                            "endLine": 109,
                            "startColumn": 24,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/passivation/SessionOperationServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 110,
                            "endLine": 110,
                            "startColumn": 66,
                            "endColumn": 87
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/passivation/SessionOperationServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 110,
                            "endLine": 110,
                            "startColumn": 44,
                            "endColumn": 101
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/passivation/SessionOperationServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 110,
                            "endLine": 110,
                            "startColumn": 17,
                            "endColumn": 37
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/TrustBoundaryViolation/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into setAttribute where it is used to modify the HTTP session object. This could result in mixing trusted and untrusted data in the same data structure, thus increasing the likelihood to mistakenly trust unvalidated data.",
            "markdown": "Unsanitized input from {0} {1} into {2} where it is used to modify the HTTP session object. This could result in mixing trusted and untrusted data in the same data structure, thus increasing the likelihood to mistakenly trust unvalidated data.",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[setAttribute](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/expiration/SessionOperationServlet.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 116,
                  "endLine": 116,
                  "startColumn": 17,
                  "endColumn": 37
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0223e0e79e51ba375ae6c84bc43132211ee0a88d6f6b7cc9be2fdd5ecf1734f8",
            "1": "19689298.1fa5d9ec.58d1257f.9e223445.53e0e770.2534968c.5fa5ecf9.54d46e25.1393abbb.c5d10016.fdbc0497.9e223445.53e0e770.5b29c616.d11a1cde.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/expiration/SessionOperationServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 166,
                            "endLine": 166,
                            "startColumn": 24,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/expiration/SessionOperationServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 166,
                            "endLine": 166,
                            "startColumn": 24,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/expiration/SessionOperationServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 166,
                            "endLine": 166,
                            "startColumn": 16,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/expiration/SessionOperationServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 170,
                            "endLine": 170,
                            "startColumn": 16,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/expiration/SessionOperationServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 112,
                            "endLine": 112,
                            "startColumn": 20,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/expiration/SessionOperationServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 116,
                            "endLine": 116,
                            "startColumn": 38,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/expiration/SessionOperationServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 116,
                            "endLine": 116,
                            "startColumn": 17,
                            "endColumn": 37
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/TrustBoundaryViolation/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into setAttribute where it is used to modify the HTTP session object. This could result in mixing trusted and untrusted data in the same data structure, thus increasing the likelihood to mistakenly trust unvalidated data.",
            "markdown": "Unsanitized input from {0} {1} into {2} where it is used to modify the HTTP session object. This could result in mixing trusted and untrusted data in the same data structure, thus increasing the likelihood to mistakenly trust unvalidated data.",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[setAttribute](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/expiration/SessionOperationServlet.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 121,
                  "endLine": 121,
                  "startColumn": 17,
                  "endColumn": 37
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8d94a5f5b70b34b45720a259873573d7bfc77fc035e8e61c47f51ccf5f113757",
            "1": "19689298.1fa5d9ec.58d1257f.9e223445.53e0e770.2534968c.5fa5ecf9.54d46e25.1393abbb.c5d10016.fdbc0497.9e223445.53e0e770.5b29c616.d11a1cde.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/expiration/SessionOperationServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 166,
                            "endLine": 166,
                            "startColumn": 24,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/expiration/SessionOperationServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 166,
                            "endLine": 166,
                            "startColumn": 24,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/expiration/SessionOperationServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 166,
                            "endLine": 166,
                            "startColumn": 16,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/expiration/SessionOperationServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 170,
                            "endLine": 170,
                            "startColumn": 16,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/expiration/SessionOperationServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 112,
                            "endLine": 112,
                            "startColumn": 20,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/expiration/SessionOperationServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 121,
                            "endLine": 121,
                            "startColumn": 38,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/expiration/SessionOperationServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 121,
                            "endLine": 121,
                            "startColumn": 17,
                            "endColumn": 37
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/ServerInformationExposure/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "The stack trace from printStackTrace flows into HTTP response and is leaked to the user. This may disclose sensitive server information to the attackers.",
            "markdown": "The stack trace from {0} flows into {1} and is leaked to the user. This may disclose sensitive server information to the attackers.",
            "arguments": [
              "[printStackTrace](0)",
              "[HTTP response](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/management/util/SimpleServlet.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 59,
                  "endLine": 59,
                  "startColumn": 17,
                  "endColumn": 34
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3128b1fa39acaa5de850ec83ce666cb8e6afa875906317ec1f1bdcf96b1c68e4",
            "1": "f9545bfc.97acdc08.cd271e66.e22980a8.f1d9f854.ca28b068.62adb608.54d46e25.f9545bfc.7f413d6f.72733c23.e22980a8.408180c7.95df3f17.5ab84f02.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/management/util/SimpleServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 17,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/management/util/SimpleServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 17,
                            "endColumn": 34
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/ServerInformationExposure/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "The stack trace from printStackTrace flows into HTTP response and is leaked to the user. This may disclose sensitive server information to the attackers.",
            "markdown": "The stack trace from {0} flows into {1} and is leaked to the user. This may disclose sensitive server information to the attackers.",
            "arguments": [
              "[printStackTrace](0)",
              "[HTTP response](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/manualmode/src/test/java/org/wildfly/test/manual/elytron/seccontext/EntryServlet.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82,
                  "endLine": 82,
                  "startColumn": 13,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2fc7064aae031c925cb208bea89380738f4d1a285b4b30e7376b61cebb46cb4e",
            "1": "e26de584.8bd3557c.cd271e66.e22980a8.f1d9f854.730a5695.62adb608.54d46e25.e12df969.c5d10016.fdbc0497.e22980a8.408180c7.730a5695.5ac02bbc.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/manualmode/src/test/java/org/wildfly/test/manual/elytron/seccontext/EntryServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 82,
                            "endLine": 82,
                            "startColumn": 13,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/manualmode/src/test/java/org/wildfly/test/manual/elytron/seccontext/EntryServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 82,
                            "endLine": 82,
                            "startColumn": 13,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/ServerInformationExposure/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "The stack trace from printStackTrace flows into HTTP response and is leaked to the user. This may disclose sensitive server information to the attackers.",
            "markdown": "The stack trace from {0} flows into {1} and is leaked to the user. This may disclose sensitive server information to the attackers.",
            "arguments": [
              "[printStackTrace](0)",
              "[HTTP response](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/messaging/jms/localtransaction/MessagingServlet.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82,
                  "endLine": 82,
                  "startColumn": 13,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f01e9d37448c7e97fbae0339ef7366f38ab724809d99d2b14578eed8a7d5d9bc",
            "1": "9e748df4.c5d10016.cd271e66.e22980a8.93da83f0.34c3b532.62adb608.54d46e25.e2f7af83.c5d10016.fdbc0497.e22980a8.83192735.95df3f17.5ac02bbc.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/messaging/jms/localtransaction/MessagingServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 82,
                            "endLine": 82,
                            "startColumn": 13,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/messaging/jms/localtransaction/MessagingServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 82,
                            "endLine": 82,
                            "startColumn": 13,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/LdapInjection/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into search, where it is used as an LDAP query. This may result in an LDAP Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an LDAP query. This may result in an LDAP Injection vulnerability.",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11)",
              "[search](12)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/naming/ldap/LdapUrlTestServlet.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 111,
                  "endLine": 111,
                  "startColumn": 55,
                  "endColumn": 68
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9f3e080b368a57bc9bf33f7c6677319eebf67146573850cf7cef22903f8dc95d",
            "1": "53f83298.4778df37.219a9753.4a56dd62.3e606cf2.08ac53a8.4f862060.24d61d5b.e1d7cd7c.c5d10016.df604cdb.4a56dd62.c41fd899.7fda7c5e.b2ed367a.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/naming/ldap/LdapUrlTestServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 72,
                            "endLine": 72,
                            "startColumn": 27,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/naming/ldap/LdapUrlTestServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 72,
                            "endLine": 72,
                            "startColumn": 27,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/naming/ldap/LdapUrlTestServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 72,
                            "endLine": 72,
                            "startColumn": 20,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/naming/ldap/LdapUrlTestServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 73,
                            "endLine": 73,
                            "startColumn": 36,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/naming/ldap/LdapUrlTestServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 87,
                            "endLine": 87,
                            "startColumn": 36,
                            "endColumn": 57
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/naming/ldap/LdapUrlTestServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 89,
                            "endLine": 89,
                            "startColumn": 78,
                            "endColumn": 86
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/naming/ldap/LdapUrlTestServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 89,
                            "endLine": 89,
                            "startColumn": 44,
                            "endColumn": 87
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/naming/ldap/LdapUrlTestServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 89,
                            "endLine": 89,
                            "startColumn": 32,
                            "endColumn": 87
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/naming/ldap/LdapUrlTestServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 89,
                            "endLine": 89,
                            "startColumn": 32,
                            "endColumn": 98
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/naming/ldap/LdapUrlTestServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 89,
                            "endLine": 89,
                            "startColumn": 22,
                            "endColumn": 98
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/naming/ldap/LdapUrlTestServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 111,
                            "endLine": 111,
                            "startColumn": 69,
                            "endColumn": 76
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/naming/ldap/LdapUrlTestServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 111,
                            "endLine": 111,
                            "startColumn": 69,
                            "endColumn": 97
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/naming/ldap/LdapUrlTestServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 111,
                            "endLine": 111,
                            "startColumn": 55,
                            "endColumn": 68
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/Ssrf",
          "ruleIndex": 4,
          "level": "error",
          "message": {
            "text": "Unsanitized input from a command line argument flows into openConnection, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23)",
              "[openConnection](24)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 302,
                  "endLine": 302,
                  "startColumn": 24,
                  "endColumn": 42
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4d5c1210f19bbe40f061dbf80562780578a280695886733ce9951785ec5a0de7",
            "1": "6d351a63.9a87848e.bb993ef0.e22980a8.2294f7fc.7fda7c5e.731915f6.54d46e25.8df8fa68.684aff32.bb993ef0.de031890.d31a8364.7fda7c5e.800ea7f4.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 200,
                            "endLine": 200,
                            "startColumn": 49,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 200,
                            "endLine": 200,
                            "startColumn": 49,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 297,
                            "endLine": 297,
                            "startColumn": 64,
                            "endColumn": 84
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 300,
                            "endLine": 300,
                            "startColumn": 27,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 315,
                            "endLine": 315,
                            "startColumn": 32,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 316,
                            "endLine": 316,
                            "startColumn": 19,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 316,
                            "endLine": 316,
                            "startColumn": 19,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 316,
                            "endLine": 316,
                            "startColumn": 9,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 321,
                            "endLine": 321,
                            "startColumn": 23,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 321,
                            "endLine": 321,
                            "startColumn": 13,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 322,
                            "endLine": 322,
                            "startColumn": 17,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 324,
                            "endLine": 324,
                            "startColumn": 38,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 324,
                            "endLine": 324,
                            "startColumn": 38,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 324,
                            "endLine": 324,
                            "startColumn": 33,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 324,
                            "endLine": 324,
                            "startColumn": 29,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 324,
                            "endLine": 324,
                            "startColumn": 29,
                            "endColumn": 69
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 324,
                            "endLine": 324,
                            "startColumn": 22,
                            "endColumn": 71
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 325,
                            "endLine": 325,
                            "startColumn": 23,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 325,
                            "endLine": 325,
                            "startColumn": 23,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 325,
                            "endLine": 325,
                            "startColumn": 23,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 325,
                            "endLine": 325,
                            "startColumn": 17,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 337,
                            "endLine": 337,
                            "startColumn": 16,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 300,
                            "endLine": 300,
                            "startColumn": 13,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 302,
                            "endLine": 302,
                            "startColumn": 24,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 24,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 302,
                            "endLine": 302,
                            "startColumn": 24,
                            "endColumn": 42
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 801,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword",
          "ruleIndex": 5,
          "level": "warning",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "security/subsystem/src/main/java/org/jboss/as/security/vault/VaultSession.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 175,
                  "endLine": 175,
                  "startColumn": 34,
                  "endColumn": 44
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1430afbf1eaa8825bf5285b91667cb4d76e02bb6053efa355cfde619f13989d9",
            "1": "a75b04d3.7cd4917b.71a71d19.6c52ae28.abd776fc.dd62fee0.45428c9d.d6405d7e.4d9dffb9.7cd4917b.71a71d19.d6ab05b5.abd776fc.dd62fee0.45428c9d.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/subsystem/src/main/java/org/jboss/as/security/vault/VaultSession.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 173,
                            "endLine": 173,
                            "startColumn": 27,
                            "endColumn": 70
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 551,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/XSS/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into write, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3)",
              "[write](4)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/manualmode/src/test/java/org/wildfly/test/manual/elytron/seccontext/EntryServlet.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 80,
                  "endLine": 80,
                  "startColumn": 13,
                  "endColumn": 25
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3b80ad9567a815d2cb029bb67bd64c250f1e6c2ab9df2ba318c15ff054e3a4a7",
            "1": "ca9876a9.49766a9f.71a71d19.25ba5c76.390f960b.dd62fee0.ec290f27.54d46e25.e1d7cd7c.277c621c.15a4c9aa.c58c3b0f.408180c7.dd62fee0.d11a1cde.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/manualmode/src/test/java/org/wildfly/test/manual/elytron/seccontext/EntryServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 60,
                            "endLine": 60,
                            "startColumn": 33,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/manualmode/src/test/java/org/wildfly/test/manual/elytron/seccontext/EntryServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 60,
                            "endLine": 60,
                            "startColumn": 33,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/manualmode/src/test/java/org/wildfly/test/manual/elytron/seccontext/EntryServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 60,
                            "endLine": 60,
                            "startColumn": 22,
                            "endColumn": 65
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/manualmode/src/test/java/org/wildfly/test/manual/elytron/seccontext/EntryServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 26,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/manualmode/src/test/java/org/wildfly/test/manual/elytron/seccontext/EntryServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 13,
                            "endColumn": 25
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/XSS/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into write, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3)",
              "[write](4)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/smoke/web/SimpleServlet.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56,
                  "startColumn": 9,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8384f5c2189f0206c76ac6d726236759e5ca845a7ca127934c0c59e4301d9726",
            "1": "19689298.09bdbc11.47fecb9c.de031890.390f960b.ce109560.ec290f27.54d46e25.fa7b1076.c5d10016.fdbc0497.de031890.390f960b.ce109560.5ac02bbc.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/smoke/web/SimpleServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 53,
                            "endLine": 53,
                            "startColumn": 22,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/smoke/web/SimpleServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 53,
                            "endLine": 53,
                            "startColumn": 22,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/smoke/web/SimpleServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 53,
                            "endLine": 53,
                            "startColumn": 16,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/smoke/web/SimpleServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 22,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/smoke/web/SimpleServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 9,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 351,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/XSS/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into write, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3)",
              "[write](4)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/smoke/web/SimpleLegacyServlet.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 47,
                  "endLine": 47,
                  "startColumn": 9,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c968c5b3b400befb92f3aa0dad49451ea462884cfc5c76065d23d86537322905",
            "1": "19689298.49766a9f.47fecb9c.2fd87fd1.390f960b.9c18f199.ec290f27.54d46e25.fa7b1076.c5d10016.fdbc0497.e22980a8.390f960b.9c18f199.5ac02bbc.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/smoke/web/SimpleLegacyServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 22,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/smoke/web/SimpleLegacyServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 22,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/smoke/web/SimpleLegacyServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 16,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/smoke/web/SimpleLegacyServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 22,
                            "endColumn": 70
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/smoke/web/SimpleLegacyServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 9,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 351,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/XSS/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into write, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3)",
              "[write](4)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/web/injection/SimpleServlet.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 52,
                  "endLine": 52,
                  "startColumn": 9,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ad441197796b027e8c90f9bd1f3e96f119779e69c9acac2efbe4213c92836bc1",
            "1": "dd2c726b.49766a9f.47fecb9c.de031890.390f960b.ce109560.ec290f27.54d46e25.fa7b1076.c5d10016.fdbc0497.de031890.390f960b.ce109560.5ac02bbc.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/web/injection/SimpleServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 50,
                            "endLine": 50,
                            "startColumn": 22,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/web/injection/SimpleServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 50,
                            "endLine": 50,
                            "startColumn": 22,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/web/injection/SimpleServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 50,
                            "endLine": 50,
                            "startColumn": 16,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/web/injection/SimpleServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 52,
                            "endLine": 52,
                            "startColumn": 22,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/web/injection/SimpleServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 52,
                            "endLine": 52,
                            "startColumn": 9,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 351,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/XSS/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into println, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3),(4)",
              "[println](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/management/util/SimpleServlet.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56,
                  "startColumn": 17,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "56e136232a9f9eb3971ebd570be8c1a94491613ff3ad6190311f6aa5aa0a1c6b",
            "1": "f9545bfc.c5667b7a.33fa5dbe.6c52ae28.c41fd899.7fda7c5e.36de4586.54d46e25.f9545bfc.32dbc115.72733c23.e22980a8.c41fd899.7fda7c5e.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/management/util/SimpleServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 46,
                            "startColumn": 33,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/management/util/SimpleServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 46,
                            "startColumn": 33,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/management/util/SimpleServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 46,
                            "startColumn": 22,
                            "endColumn": 66
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/management/util/SimpleServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 40,
                            "endColumn": 68
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/management/util/SimpleServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 29,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/management/util/SimpleServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 17,
                            "endColumn": 28
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/XSS/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Unsanitized input from an HTTP header flows into println, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[an HTTP header](0)",
              "[flows](1),(2),(3),(4)",
              "[println](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/web/security/authentication/deployment/SecuredEJBServlet.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 59,
                  "endLine": 59,
                  "startColumn": 9,
                  "endColumn": 23
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4406f90f5fec402bed8aa365b0b208b1c122c5808a42a49b54b3a6500e498ece",
            "1": "e6fcc0e0.b87061c5.17b344b3.25ba5c76.ae63d11c.78e3e679.c5db7da3.54d46e25.e12df969.c5d10016.fdbc0497.e22980a8.f0e1baa5.95df3f17.c5db7da3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/web/security/authentication/deployment/SecuredEJBServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 53,
                            "endLine": 53,
                            "startColumn": 29,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/web/security/authentication/deployment/SecuredEJBServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 53,
                            "endLine": 53,
                            "startColumn": 29,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/web/security/authentication/deployment/SecuredEJBServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 53,
                            "endLine": 53,
                            "startColumn": 16,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/web/security/authentication/deployment/SecuredEJBServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 24,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/web/security/authentication/deployment/SecuredEJBServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 24,
                            "endColumn": 69
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/web/security/authentication/deployment/SecuredEJBServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 9,
                            "endColumn": 23
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 351,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/XSS/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into print, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3)",
              "[print](4)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/ws/src/test/java/org/jboss/as/test/integration/ws/serviceref/ServletClient.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 114,
                  "endLine": 114,
                  "startColumn": 9,
                  "endColumn": 31
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0fb51ab4120f4e5d13fab075ff9fb92bf5fa9ded1ebc06c76fc69408c85a1dd9",
            "1": "1c1c3043.d7e602a4.fdbc0497.280e977c.b51cb3e9.0d476878.5ac02bbc.3cf7c2ae.8ab8a99f.c5d10016.fdbc0497.280e977c.f0e1baa5.9957506a.ab796345.3cf7c2ae"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/ws/src/test/java/org/jboss/as/test/integration/ws/serviceref/ServletClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 96,
                            "endLine": 96,
                            "startColumn": 26,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/ws/src/test/java/org/jboss/as/test/integration/ws/serviceref/ServletClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 96,
                            "endLine": 96,
                            "startColumn": 26,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/ws/src/test/java/org/jboss/as/test/integration/ws/serviceref/ServletClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 96,
                            "endLine": 96,
                            "startColumn": 16,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/ws/src/test/java/org/jboss/as/test/integration/ws/serviceref/ServletClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 114,
                            "endLine": 114,
                            "startColumn": 32,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/ws/src/test/java/org/jboss/as/test/integration/ws/serviceref/ServletClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 114,
                            "endLine": 114,
                            "startColumn": 9,
                            "endColumn": 31
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/XSS/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into print, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3),(4)",
              "[print](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/deployment/classloading/ear/subdeployments/servlet/EjbInvokeClassloaderToStringServlet.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56,
                  "startColumn": 13,
                  "endColumn": 41
                }
              }
            }
          ],
          "fingerprints": {
            "0": "aeb1b54cc0963586eac54b4dca200f60c75e1be3277081bcee50379e5bc80cac",
            "1": "922a908d.4d5aa63a.33fa5dbe.ea316d04.d4ccc8b8.7fda7c5e.f2877c8e.54d46e25.bbbd7c96.c5d10016.fdbc0497.477e3892.408180c7.7fda7c5e.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/deployment/classloading/ear/subdeployments/servlet/EjbInvokeClassloaderToStringServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 46,
                            "startColumn": 34,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/deployment/classloading/ear/subdeployments/servlet/EjbInvokeClassloaderToStringServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 46,
                            "startColumn": 34,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/deployment/classloading/ear/subdeployments/servlet/EjbInvokeClassloaderToStringServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 46,
                            "startColumn": 22,
                            "endColumn": 72
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/deployment/classloading/ear/subdeployments/servlet/EjbInvokeClassloaderToStringServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 42,
                            "endColumn": 94
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/deployment/classloading/ear/subdeployments/servlet/EjbInvokeClassloaderToStringServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 42,
                            "endColumn": 140
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/deployment/classloading/ear/subdeployments/servlet/EjbInvokeClassloaderToStringServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 13,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 351,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/XSS/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Unsanitized input from an HTTP header flows into write, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[an HTTP header](0)",
              "[flows](1),(2),(3)",
              "[write](4)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/security/SecuredServlet.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 50,
                  "endLine": 50,
                  "startColumn": 9,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1383a6c78e4303d5445f320de963949095936c3a6beb43749de0402001ae2ca1",
            "1": "6ba64e3e.49766a9f.fdbc0497.25ba5c76.390f960b.4026da1a.5ac02bbc.54d46e25.dcd7ff17.c5d10016.fdbc0497.e22980a8.390f960b.95df3f17.5ac02bbc.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/security/SecuredServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 50,
                            "endLine": 50,
                            "startColumn": 40,
                            "endColumn": 57
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/security/SecuredServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 50,
                            "endLine": 50,
                            "startColumn": 40,
                            "endColumn": 57
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/security/SecuredServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 50,
                            "endLine": 50,
                            "startColumn": 22,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/security/SecuredServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 50,
                            "endLine": 50,
                            "startColumn": 22,
                            "endColumn": 66
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/security/SecuredServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 50,
                            "endLine": 50,
                            "startColumn": 9,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 351,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/XSS/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Unsanitized input from the request URL flows into println, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[the request URL](0)",
              "[flows](1),(2),(3),(4)",
              "[println](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/formauth/SecuredPostServlet.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 59,
                  "endLine": 59,
                  "startColumn": 9,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a3965f46082706a46e4ec0a85c2b0deeba422e602cbdea8e2014d3c90486b5c2",
            "1": "f9545bfc.2f7f4b4b.792070c9.e1c7b7e6.fde93a40.2f4e1548.36de4586.54d46e25.f9545bfc.7f413d6f.72733c23.e22980a8.f0e1baa5.95df3f17.58f0f8f9.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/formauth/SecuredPostServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 23,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/formauth/SecuredPostServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 23,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/formauth/SecuredPostServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 16,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/formauth/SecuredPostServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 21,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/formauth/SecuredPostServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 21,
                            "endColumn": 69
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/formauth/SecuredPostServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 9,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/XSS/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Unsanitized input from the request URL flows into println, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[the request URL](0)",
              "[flows](1),(2),(3),(4)",
              "[println](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/formauth/SecuredPostServlet.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 60,
                  "endLine": 60,
                  "startColumn": 9,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "91c3c42e407ba0f81e57a517dd678619e7c57e59982866c7ba1c57314b1f6c5a",
            "1": "f9545bfc.86d918b5.61fbd1e1.19a5fb65.a1491c54.2f4e1548.58f0f8f9.54d46e25.f9545bfc.7f413d6f.72733c23.e22980a8.f0e1baa5.95df3f17.58f0f8f9.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/formauth/SecuredPostServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 23,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/formauth/SecuredPostServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 23,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/formauth/SecuredPostServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 16,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/formauth/SecuredPostServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 60,
                            "endLine": 60,
                            "startColumn": 21,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/formauth/SecuredPostServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 60,
                            "endLine": 60,
                            "startColumn": 21,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/formauth/SecuredPostServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 60,
                            "endLine": 60,
                            "startColumn": 9,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/XSS/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Unsanitized input from cookies flows into println, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[cookies](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11)",
              "[println](12)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/CookieReadServlet.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56,
                  "startColumn": 17,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "600a2031017b4b569e8efafca88c094082d41f34b3647b87322ad19b83a3397a",
            "1": "f9545bfc.98dbaec4.73de8b2d.e1c7b7e6.ae63d11c.8c97c5f4.36de4586.54d46e25.8df8fa68.98dbaec4.61f87a96.e22980a8.025462d2.95df3f17.657bb8d3.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/CookieReadServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 28,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/CookieReadServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 28,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/CookieReadServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 18,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/CookieReadServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 33,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/CookieReadServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 28,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/CookieReadServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 28,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/CookieReadServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 24,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/CookieReadServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 54,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/CookieReadServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 54,
                            "endColumn": 63
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/CookieReadServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 29,
                            "endColumn": 65
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/CookieReadServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 29,
                            "endColumn": 77
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/CookieReadServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 29,
                            "endColumn": 92
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/CookieReadServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 17,
                            "endColumn": 28
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/XSS/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Unsanitized input from the request URL flows into write, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[the request URL](0)",
              "[flows](1),(2)",
              "[write](3)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/listener/EchoServlet.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 18,
                  "endLine": 18,
                  "startColumn": 9,
                  "endColumn": 31
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9089c1ead57cd49ed4e49f82f19c3202f3da7fb54c35d50e2618b2f1e808930e",
            "1": "69011c36.49766a9f.fdbc0497.8bdc56f8.390f960b.c03eb4a8.5ac02bbc.54d46e25.e6fcc0e0.c5d10016.fdbc0497.e22980a8.390f960b.95df3f17.5ac02bbc.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/listener/EchoServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 18,
                            "endLine": 18,
                            "startColumn": 42,
                            "endColumn": 57
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/listener/EchoServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 18,
                            "endLine": 18,
                            "startColumn": 42,
                            "endColumn": 57
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/listener/EchoServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 18,
                            "endLine": 18,
                            "startColumn": 32,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/listener/EchoServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 18,
                            "endLine": 18,
                            "startColumn": 9,
                            "endColumn": 31
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 351,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/XSS/test",
          "ruleIndex": 6,
          "level": "note",
          "message": {
            "text": "Unsanitized input from cookies flows into print, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[cookies](0)",
              "[flows](1),(2),(3),(4)",
              "[print](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/CookieEchoServlet.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 50,
                  "endLine": 50,
                  "startColumn": 13,
                  "endColumn": 22
                }
              }
            }
          ],
          "fingerprints": {
            "0": "52c74a0431f69c74d6be6344d5b305133140f2797e5398c77b452b9c53e128dc",
            "1": "f9545bfc.98dbaec4.f4d57abb.e1c7b7e6.60644571.2f4e1548.36de4586.54d46e25.8df8fa68.98dbaec4.72733c23.e22980a8.c41fd899.95df3f17.76a0da3b.633b4cdb"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/CookieEchoServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 49,
                            "endLine": 49,
                            "startColumn": 25,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/CookieEchoServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 49,
                            "endLine": 49,
                            "startColumn": 25,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/CookieEchoServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 49,
                            "endLine": 49,
                            "startColumn": 21,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/CookieEchoServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 50,
                            "endLine": 50,
                            "startColumn": 23,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/CookieEchoServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 50,
                            "endLine": 50,
                            "startColumn": 23,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/CookieEchoServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 50,
                            "endLine": 50,
                            "startColumn": 13,
                            "endColumn": 22
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 351,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/XXE",
          "ruleIndex": 7,
          "level": "error",
          "message": {
            "text": "Unsanitized input from a local file flows into createXMLStreamReader, which allows expansion of external entity references. This may result in a XXE attack leading to the disclosure of confidential data or denial of service.",
            "markdown": "Unsanitized input from a local file {0} into {1}, which allows expansion of external entity references. This may result in a XXE attack leading to the disclosure of confidential data or denial of service.",
            "arguments": [
              "[flows](0)",
              "[createXMLStreamReader](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ejb3/src/main/java/org/jboss/as/ejb3/timerservice/persistence/filestore/FileTimerPersistence.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 368,
                  "endLine": 368,
                  "startColumn": 54,
                  "endColumn": 88
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f75bda518e7ce25c79f4bd862bbe0e2cf1f5839178de48477f07769bd186da9d",
            "1": "f9545bfc.7635d0ec.33fa5dbe.c48320d7.f1d9f854.7fda7c5e.36de4586.54d46e25.e1d7cd7c.b7245990.1a835c28.33056f84.408180c7.ff341f71.4550e882.db501e71"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ejb3/src/main/java/org/jboss/as/ejb3/timerservice/persistence/filestore/FileTimerPersistence.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 368,
                            "endLine": 368,
                            "startColumn": 89,
                            "endColumn": 91
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ejb3/src/main/java/org/jboss/as/ejb3/timerservice/persistence/filestore/FileTimerPersistence.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 368,
                            "endLine": 368,
                            "startColumn": 54,
                            "endColumn": 88
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 751,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/XXE",
          "ruleIndex": 7,
          "level": "error",
          "message": {
            "text": "Unsanitized input from a local file flows into createXMLStreamReader, which allows expansion of external entity references. This may result in a XXE attack leading to the disclosure of confidential data or denial of service.",
            "markdown": "Unsanitized input from a local file {0} into {1}, which allows expansion of external entity references. This may result in a XXE attack leading to the disclosure of confidential data or denial of service.",
            "arguments": [
              "[flows](0),(1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16)",
              "[createXMLStreamReader](17)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFSharedTldsProcessor.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 89,
                  "endLine": 89,
                  "startColumn": 41,
                  "endColumn": 75
                }
              }
            }
          ],
          "fingerprints": {
            "0": "74e1fb7eea7d625f0508c127ad9e937a1d15a8f7eaaeac634aff646860f6ccda",
            "1": "b9f20c1f.c8c8034f.481cbae6.58a2ef45.c41fd899.0d476878.df7e59ba.da0da4b6.e1d7cd7c.84a68f4e.75390e00.12c9efe1.c41fd899.cc716412.6d74a0f2.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFModuleIdFactory.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 129,
                            "endLine": 129,
                            "startColumn": 31,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFModuleIdFactory.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 129,
                            "endLine": 129,
                            "startColumn": 31,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFModuleIdFactory.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 129,
                            "endLine": 129,
                            "startColumn": 20,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFModuleIdFactory.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 131,
                            "endLine": 131,
                            "startColumn": 33,
                            "endColumn": 56
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFModuleIdFactory.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 131,
                            "endLine": 131,
                            "startColumn": 13,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFModuleIdFactory.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 113,
                            "endLine": 113,
                            "startColumn": 48,
                            "endColumn": 83
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFModuleIdFactory.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 174,
                            "endLine": 174,
                            "startColumn": 16,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFModuleIdFactory.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 174,
                            "endLine": 174,
                            "startColumn": 16,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFSharedTldsProcessor.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 66,
                            "endLine": 66,
                            "startColumn": 80,
                            "endColumn": 106
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFSharedTldsProcessor.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 66,
                            "endLine": 66,
                            "startColumn": 41,
                            "endColumn": 79
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFSharedTldsProcessor.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 66,
                            "endLine": 66,
                            "startColumn": 41,
                            "endColumn": 128
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFSharedTldsProcessor.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 66,
                            "endLine": 66,
                            "startColumn": 35,
                            "endColumn": 130
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFSharedTldsProcessor.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 38,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFSharedTldsProcessor.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 38,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFSharedTldsProcessor.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 68,
                            "endLine": 68,
                            "startColumn": 33,
                            "endColumn": 80
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFSharedTldsProcessor.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 85,
                            "endLine": 85,
                            "startColumn": 34,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFSharedTldsProcessor.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 89,
                            "endLine": 89,
                            "startColumn": 76,
                            "endColumn": 78
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFSharedTldsProcessor.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 89,
                            "endLine": 89,
                            "startColumn": 41,
                            "endColumn": 75
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 751,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/XXE",
          "ruleIndex": 7,
          "level": "error",
          "message": {
            "text": "Unsanitized input from a local file flows into createXMLStreamReader, which allows expansion of external entity references. This may result in a XXE attack leading to the disclosure of confidential data or denial of service.",
            "markdown": "Unsanitized input from a local file {0} into {1}, which allows expansion of external entity references. This may result in a XXE attack leading to the disclosure of confidential data or denial of service.",
            "arguments": [
              "[flows](0)",
              "[createXMLStreamReader](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/deployment/MessagingXmlParsingDeploymentUnitProcessor.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 86,
                  "endLine": 86,
                  "startColumn": 58,
                  "endColumn": 92
                }
              }
            }
          ],
          "fingerprints": {
            "0": "efdca8aea209258a26c8c4ed4df3d528766c8ff0f3df03a896149dfea0dcd858",
            "1": "19689298.72f51d0f.481cbae6.e22980a8.6dbefcdf.7fda7c5e.fd422438.54d46e25.19689298.72f51d0f.284381e6.de031890.408180c7.ff341f71.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/deployment/MessagingXmlParsingDeploymentUnitProcessor.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 86,
                            "endLine": 86,
                            "startColumn": 93,
                            "endColumn": 102
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/deployment/MessagingXmlParsingDeploymentUnitProcessor.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 86,
                            "endLine": 86,
                            "startColumn": 58,
                            "endColumn": 92
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 751,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/XXE",
          "ruleIndex": 7,
          "level": "error",
          "message": {
            "text": "Unsanitized input from a local file flows into createXMLStreamReader, which allows expansion of external entity references. This may result in a XXE attack leading to the disclosure of confidential data or denial of service.",
            "markdown": "Unsanitized input from a local file {0} into {1}, which allows expansion of external entity references. This may result in a XXE attack leading to the disclosure of confidential data or denial of service.",
            "arguments": [
              "[flows](0)",
              "[createXMLStreamReader](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ee/src/main/java/org/jboss/as/ee/structure/EJBClientDescriptorParsingProcessor.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 149,
                  "endLine": 149,
                  "startColumn": 50,
                  "endColumn": 84
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e90b56e236e4cdf693ba58632934858d256dd401e4fa47185a226b97c28f66f8",
            "1": "f59351a7.97acdc08.481cbae6.3519ac88.6dbefcdf.7fda7c5e.fd422438.ac56be65.19689298.7ef9ab6e.284381e6.de031890.408180c7.ff341f71.bae646e8.2704db16"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ee/src/main/java/org/jboss/as/ee/structure/EJBClientDescriptorParsingProcessor.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 149,
                            "endLine": 149,
                            "startColumn": 85,
                            "endColumn": 91
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ee/src/main/java/org/jboss/as/ee/structure/EJBClientDescriptorParsingProcessor.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 149,
                            "endLine": 149,
                            "startColumn": 50,
                            "endColumn": 84
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 751,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/XXE",
          "ruleIndex": 7,
          "level": "error",
          "message": {
            "text": "Unsanitized input from a local file flows into createXMLStreamReader, which allows expansion of external entity references. This may result in a XXE attack leading to the disclosure of confidential data or denial of service.",
            "markdown": "Unsanitized input from a local file {0} into {1}, which allows expansion of external entity references. This may result in a XXE attack leading to the disclosure of confidential data or denial of service.",
            "arguments": [
              "[flows](0)",
              "[createXMLStreamReader](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "clustering/singleton/extension/src/main/java/org/wildfly/extension/clustering/singleton/deployment/SingletonDeploymentParsingProcessor.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82,
                  "endLine": 82,
                  "startColumn": 41,
                  "endColumn": 80
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f78d6946f64d15fbe7d032a80225d35a6313b6177f6c7acc3741af394d963f35",
            "1": "19689298.83dbfe52.757ab46f.6c52ae28.d31a8364.2f4e1548.bae646e8.2343ac7f.19689298.5b2d244d.284381e6.de031890.d31a8364.31c50941.ab570bf7.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clustering/singleton/extension/src/main/java/org/wildfly/extension/clustering/singleton/deployment/SingletonDeploymentParsingProcessor.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 82,
                            "endLine": 82,
                            "startColumn": 81,
                            "endColumn": 87
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clustering/singleton/extension/src/main/java/org/wildfly/extension/clustering/singleton/deployment/SingletonDeploymentParsingProcessor.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 82,
                            "endLine": 82,
                            "startColumn": 41,
                            "endColumn": 80
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 751,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/JndiInjection/test",
          "ruleIndex": 8,
          "level": "note",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into lookup, where it is used to look up data and resources (in the form of Java objects) via a name. This may result in a Java Naming and Directory Interface (JNDI) Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to look up data and resources (in the form of Java objects) via a name. This may result in a Java Naming and Directory Interface (JNDI) Injection vulnerability.",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13)",
              "[lookup](14)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/ejb/stateful/servlet/StatefulServlet.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 70,
                  "endLine": 70,
                  "startColumn": 31,
                  "endColumn": 55
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2b65229b68d57f84ba440b91ca98140dc550efff46f2716628d7d92b30606d0a",
            "1": "dd2c726b.1cbd3ff4.33fa5dbe.9e223445.b8da3983.7fda7c5e.c41e2a02.54d46e25.bbbd7c96.c5d10016.4cfad47b.9e223445.f0e1baa5.7fda7c5e.3617f5f1.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/ejb/stateful/servlet/StatefulServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 86,
                            "endLine": 86,
                            "startColumn": 24,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/ejb/stateful/servlet/StatefulServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 86,
                            "endLine": 86,
                            "startColumn": 24,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/ejb/stateful/servlet/StatefulServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 86,
                            "endLine": 86,
                            "startColumn": 16,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/ejb/stateful/servlet/StatefulServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 16,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/ejb/stateful/servlet/StatefulServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 65,
                            "endLine": 65,
                            "startColumn": 16,
                            "endColumn": 54
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/ejb/stateful/servlet/StatefulServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 56,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/ejb/NamingEJBDirectory.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 86,
                            "endLine": 86,
                            "startColumn": 33,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/ejb/NamingEJBDirectory.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 87,
                            "endLine": 87,
                            "startColumn": 28,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/ejb/NamingEJBDirectory.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 110,
                            "endLine": 110,
                            "startColumn": 28,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/ejb/NamingEJBDirectory.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 111,
                            "endLine": 111,
                            "startColumn": 48,
                            "endColumn": 56
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/ejb/NamingEJBDirectory.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 114,
                            "endLine": 114,
                            "startColumn": 37,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/ejb/NamingEJBDirectory.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 115,
                            "endLine": 115,
                            "startColumn": 16,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/ejb/NamingEJBDirectory.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 118,
                            "endLine": 118,
                            "startColumn": 28,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/ejb/NamingEJBDirectory.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 119,
                            "endLine": 119,
                            "startColumn": 53,
                            "endColumn": 57
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/ejb/NamingEJBDirectory.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 119,
                            "endLine": 119,
                            "startColumn": 33,
                            "endColumn": 52
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/JndiInjection/test",
          "ruleIndex": 8,
          "level": "note",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into lookup, where it is used to look up data and resources (in the form of Java objects) via a name. This may result in a Java Naming and Directory Interface (JNDI) Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to look up data and resources (in the form of Java objects) via a name. This may result in a Java Naming and Directory Interface (JNDI) Injection vulnerability.",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3)",
              "[lookup](4)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/management/util/SimpleServlet.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56,
                  "startColumn": 29,
                  "endColumn": 39
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fdec9aa8b609a0073d085cc0c5837a03b2f6f829452a016e15a61bf1f8bdf63d",
            "1": "bbbd7c96.32dbc115.3d017abd.ede9cf8e.6441080e.919a148b.b192288b.778f16a8.f9545bfc.32dbc115.72733c23.31b2d067.c41fd899.7fda7c5e.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/management/util/SimpleServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 46,
                            "startColumn": 33,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/management/util/SimpleServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 46,
                            "startColumn": 33,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/management/util/SimpleServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 46,
                            "startColumn": 22,
                            "endColumn": 66
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/management/util/SimpleServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 40,
                            "endColumn": 68
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/management/util/SimpleServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 29,
                            "endColumn": 39
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/JndiInjection/test",
          "ruleIndex": 8,
          "level": "note",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into lookup, where it is used to look up data and resources (in the form of Java objects) via a name. This may result in a Java Naming and Directory Interface (JNDI) Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to look up data and resources (in the form of Java objects) via a name. This may result in a Java Naming and Directory Interface (JNDI) Injection vulnerability.",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3)",
              "[lookup](4)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/jaas/HelloEJBCallServlet.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 78,
                  "endLine": 78,
                  "startColumn": 45,
                  "endColumn": 55
                }
              }
            }
          ],
          "fingerprints": {
            "0": "de9ea660d61574acff9083da95131b2ef9206e0a0c1239a9bd37a1c0c225d537",
            "1": "19689298.7797192f.fdbc0497.82e76c82.408180c7.89505584.5ac02bbc.54d46e25.19689298.c5d10016.fdbc0497.31b2d067.c41fd899.95df3f17.2a99b247.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/jaas/HelloEJBCallServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 33,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/jaas/HelloEJBCallServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 33,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/jaas/HelloEJBCallServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 22,
                            "endColumn": 66
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/jaas/HelloEJBCallServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 78,
                            "endLine": 78,
                            "startColumn": 56,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/jaas/HelloEJBCallServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 78,
                            "endLine": 78,
                            "startColumn": 45,
                            "endColumn": 55
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 351,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/JndiInjection/test",
          "ruleIndex": 8,
          "level": "note",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into lookup, where it is used to look up data and resources (in the form of Java objects) via a name. This may result in a Java Naming and Directory Interface (JNDI) Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to look up data and resources (in the form of Java objects) via a name. This may result in a Java Naming and Directory Interface (JNDI) Injection vulnerability.",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3),(4)",
              "[lookup](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/security/common/servlets/DataSourceTestServlet.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 84,
                  "endLine": 84,
                  "startColumn": 42,
                  "endColumn": 55
                }
              }
            }
          ],
          "fingerprints": {
            "0": "014efaff349db4026f6ef9698ddfef35e56d68263daed7d4b7a104e896ab002b",
            "1": "fd8c5265.5d48ae79.33fa5dbe.b1a709c0.39d91bc6.7fda7c5e.b11f13f6.54d46e25.fd8c5265.c5d10016.fdbc0497.de031890.70fd4494.e4d7b7ac.aa359f29.5f94632a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/security/common/servlets/DataSourceTestServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 74,
                            "endLine": 74,
                            "startColumn": 33,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/security/common/servlets/DataSourceTestServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 74,
                            "endLine": 74,
                            "startColumn": 33,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/security/common/servlets/DataSourceTestServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 74,
                            "endLine": 74,
                            "startColumn": 16,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/security/common/servlets/DataSourceTestServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 39,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/security/common/servlets/DataSourceTestServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 84,
                            "endLine": 84,
                            "startColumn": 56,
                            "endColumn": 98
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/security/common/servlets/DataSourceTestServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 84,
                            "endLine": 84,
                            "startColumn": 42,
                            "endColumn": 55
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/JndiInjection/test",
          "ruleIndex": 8,
          "level": "note",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into lookup, where it is used to look up data and resources (in the form of Java objects) via a name. This may result in a Java Naming and Directory Interface (JNDI) Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to look up data and resources (in the form of Java objects) via a name. This may result in a Java Naming and Directory Interface (JNDI) Injection vulnerability.",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3)",
              "[lookup](4)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/jacc/propagation/PropagationTestServlet.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 90,
                  "endLine": 90,
                  "startColumn": 48,
                  "endColumn": 58
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d71e228f33d11b96d10650030730aea01dbb04cd047d97c370623fb956ae0f98",
            "1": "ada776ea.81f4ef2c.56016534.2d6fbeb8.6441080e.9aff70a5.14e8334b.62fdbf1b.3447624d.c5d10016.d55f421b.31b2d067.c41fd899.7fda7c5e.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/jacc/propagation/PropagationTestServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 85,
                            "endLine": 85,
                            "startColumn": 33,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/jacc/propagation/PropagationTestServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 85,
                            "endLine": 85,
                            "startColumn": 33,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/jacc/propagation/PropagationTestServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 85,
                            "endLine": 85,
                            "startColumn": 22,
                            "endColumn": 66
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/jacc/propagation/PropagationTestServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 59,
                            "endColumn": 106
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/jacc/propagation/PropagationTestServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 90,
                            "startColumn": 48,
                            "endColumn": 58
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/JndiInjection/test",
          "ruleIndex": 8,
          "level": "note",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into lookup, where it is used to look up data and resources (in the form of Java objects) via a name. This may result in a Java Naming and Directory Interface (JNDI) Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to look up data and resources (in the form of Java objects) via a name. This may result in a Java Naming and Directory Interface (JNDI) Injection vulnerability.",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3)",
              "[lookup](4)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/common/JndiServlet.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 63,
                  "endLine": 63,
                  "startColumn": 19,
                  "endColumn": 29
                }
              }
            }
          ],
          "fingerprints": {
            "0": "195a6dda36354dcffb55ba53499cbdc698baac9f4f2465f948b8c27a16856d6e",
            "1": "ba91fb7f.1fa5d9ec.33fa5dbe.3ddf39e3.6441080e.7fda7c5e.b192288b.22835ebd.ba91fb7f.1fa5d9ec.72733c23.31b2d067.6441080e.7fda7c5e.76a0da3b.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/common/JndiServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 23,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/common/JndiServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 23,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/common/JndiServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 16,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/common/JndiServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 63,
                            "endLine": 63,
                            "startColumn": 30,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/common/JndiServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 63,
                            "endLine": 63,
                            "startColumn": 19,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 351,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/XXE/test",
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a local file flows into createXMLStreamReader, which allows expansion of external entity references. This may result in a XXE attack leading to the disclosure of confidential data or denial of service.",
            "markdown": "Unsanitized input from a local file {0} into {1}, which allows expansion of external entity references. This may result in a XXE attack leading to the disclosure of confidential data or denial of service.",
            "arguments": [
              "[flows](0)",
              "[createXMLStreamReader](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "sar/src/test/_java/org/jboss/as/service/JBossServiceXmlDescriptorParserTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 75,
                  "endLine": 75,
                  "startColumn": 44,
                  "endColumn": 78
                }
              }
            }
          ],
          "fingerprints": {
            "0": "add6d9e992598b9a3fdd503e1b818ecf25b9222c364f94cec6d79da079624321",
            "1": "9cf53582.c8c8034f.33fa5dbe.e22980a8.c41fd899.7fda7c5e.55c6f621.54d46e25.19689298.bf87cfa7.481cbae6.de031890.c41fd899.31c50941.c66d287d.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "sar/src/test/_java/org/jboss/as/service/JBossServiceXmlDescriptorParserTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 79,
                            "endColumn": 90
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "sar/src/test/_java/org/jboss/as/service/JBossServiceXmlDescriptorParserTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 44,
                            "endColumn": 78
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 351,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/XXE/test",
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a local file flows into parse, which allows expansion of external entity references. This may result in a XXE attack leading to the disclosure of confidential data or denial of service.",
            "markdown": "Unsanitized input from a local file {0} into {1}, which allows expansion of external entity references. This may result in a XXE attack leading to the disclosure of confidential data or denial of service.",
            "arguments": [
              "[flows](0)",
              "[parse](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dist/src/test/java/org/wildfly/dist/subsystem/xml/XSDValidationUnitTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 60,
                  "endLine": 60,
                  "startColumn": 29,
                  "endColumn": 41
                }
              }
            }
          ],
          "fingerprints": {
            "0": "20d0c23d13a25a295ce10784bde1cfe6e2de4bf6c61ba626bbfd21f9e8668221",
            "1": "fbd11574.936bdbbe.7b230950.3519ac88.bb61bed7.0d476878.41f73f90.43fa68b5.19689298.7f413d6f.74f7de8b.e22980a8.59c22177.0d476878.41f73f90.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dist/src/test/java/org/wildfly/dist/subsystem/xml/XSDValidationUnitTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 60,
                            "endLine": 60,
                            "startColumn": 42,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dist/src/test/java/org/wildfly/dist/subsystem/xml/XSDValidationUnitTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 60,
                            "endLine": 60,
                            "startColumn": 29,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 351,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/XXE/test",
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "Unsanitized input from a local file flows into parse, which allows expansion of external entity references. This may result in a XXE attack leading to the disclosure of confidential data or denial of service.",
            "markdown": "Unsanitized input from a local file {0} into {1}, which allows expansion of external entity references. This may result in a XXE attack leading to the disclosure of confidential data or denial of service.",
            "arguments": [
              "[flows](0)",
              "[parse](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dist-legacy/src/test/java/org/wildfly/dist/subsystem/xml/XSDValidationUnitTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 60,
                  "endLine": 60,
                  "startColumn": 29,
                  "endColumn": 41
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a0b33c2a90f7b3d9808eb74d8a08ebbca7159ab5d671ef863c5447d4e61debf3",
            "1": "fbd11574.936bdbbe.7b230950.3519ac88.bb61bed7.0d476878.41f73f90.43fa68b5.19689298.7f413d6f.74f7de8b.e22980a8.59c22177.0d476878.41f73f90.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dist-legacy/src/test/java/org/wildfly/dist/subsystem/xml/XSDValidationUnitTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 60,
                            "endLine": 60,
                            "startColumn": 42,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "dist-legacy/src/test/java/org/wildfly/dist/subsystem/xml/XSDValidationUnitTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 60,
                            "endLine": 60,
                            "startColumn": 29,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 351,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/TLS",
          "ruleIndex": 10,
          "level": "error",
          "message": {
            "text": "Implement secure HTTPS communication. Consider using latest TLSv1.2 instead of javax.net.ssl.SSLContext.getInstance.",
            "markdown": "Implement secure HTTPS communication. Consider using latest TLSv1.2 instead of {0}.",
            "arguments": [
              "[javax.net.ssl.SSLContext.getInstance](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/security/Util.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 46,
                  "endLine": 46,
                  "startColumn": 22,
                  "endColumn": 44
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5a3475ceae0e06e05c1eb1f2d6d078d2599d9d35075a50e51d5dee7bf83ed2c8",
            "1": "ca9876a9.1cbd3ff4.33fa5dbe.e22980a8.178caa9c.7fda7c5e.01fae08d.54d46e25.ca9876a9.1cbd3ff4.33fa5dbe.e22980a8.178caa9c.7fda7c5e.df7e59ba.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "iiop-openjdk/src/main/java/org/wildfly/iiop/openjdk/security/Util.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 46,
                            "startColumn": 22,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 751,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into java.io.PrintWriter, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3)",
              "[java.io.PrintWriter](4)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/web/security/runas/CallProtectedEjbServlet.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 110,
                  "endLine": 110,
                  "startColumn": 43,
                  "endColumn": 54
                }
              }
            }
          ],
          "fingerprints": {
            "0": "afa26cf113cd235dd6c86677c6b3a9c28454485c6a7f6e386aab3b77da969d9d",
            "1": "bbbd7c96.ea5caebd.39ec4357.de031890.cc2e77b7.ce109560.b192288b.00fb2ef7.bbbd7c96.c5d10016.39ec4357.de031890.f0e1baa5.7fda7c5e.5ac02bbc.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/web/security/runas/CallProtectedEjbServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 71,
                            "endLine": 71,
                            "startColumn": 20,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/web/security/runas/CallProtectedEjbServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 71,
                            "endLine": 71,
                            "startColumn": 20,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/web/security/runas/CallProtectedEjbServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 71,
                            "endLine": 71,
                            "startColumn": 9,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/web/security/runas/CallProtectedEjbServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 110,
                            "endLine": 110,
                            "startColumn": 55,
                            "endColumn": 63
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/web/security/runas/CallProtectedEjbServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 110,
                            "endLine": 110,
                            "startColumn": 43,
                            "endColumn": 54
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 351,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/PT/test",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "Unsanitized input from the request URL flows into getRequestDispatcher, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[the request URL](0)",
              "[flows](1),(2),(3)",
              "[getRequestDispatcher](4)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/customerrors/ContextForwardServlet.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 83,
                  "endLine": 83,
                  "startColumn": 36,
                  "endColumn": 59
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c1b9eed4de49912dd5f8474ace6ce372c9c083e1c7a772b8ad348c583401a242",
            "1": "19689298.a98006ea.e405a330.c81261c5.4a329747.5b486bba.76a0da3b.54d46e25.19689298.6dfb6a52.e405a330.24e13836.4a329747.95df3f17.9b26ff06.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/customerrors/ContextForwardServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 78,
                            "endLine": 78,
                            "startColumn": 23,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/customerrors/ContextForwardServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 78,
                            "endLine": 78,
                            "startColumn": 23,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/customerrors/ContextForwardServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 78,
                            "endLine": 78,
                            "startColumn": 16,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/customerrors/ContextForwardServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 60,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/customerrors/ContextForwardServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 36,
                            "endColumn": 59
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 351,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/Ssrf/test",
          "ruleIndex": 12,
          "level": "note",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into openConnection, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12)",
              "[openConnection](13)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/lifecycle/servlet/InitServlet.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 43,
                  "endLine": 43,
                  "startColumn": 13,
                  "endColumn": 38
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a6c2328d4e6c376bfc6344d46802678b5ee94d125837c2e4fbcd082db11a23d9",
            "1": "6d351a63.601f8825.f9444c3c.ede9cf8e.4a9c8cbc.f940a352.df7e59ba.54d46e25.6d351a63.601f8825.a224ef38.e22980a8.f0e1baa5.95df3f17.76a0da3b.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/lifecycle/servlet/InitServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 22,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/lifecycle/servlet/InitServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 22,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/lifecycle/servlet/InitServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 16,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/lifecycle/servlet/InitServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 39,
                            "endColumn": 56
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/lifecycle/servlet/InfoClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 39,
                            "endColumn": 57
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/lifecycle/servlet/InfoClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 32,
                            "endLine": 32,
                            "startColumn": 34,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/lifecycle/servlet/InfoClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 32,
                            "endLine": 32,
                            "startColumn": 9,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/lifecycle/servlet/InfoClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 48,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/lifecycle/servlet/InfoClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 48,
                            "endColumn": 75
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/lifecycle/servlet/InfoClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 48,
                            "endColumn": 87
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/lifecycle/servlet/InfoClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 48,
                            "endColumn": 95
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/lifecycle/servlet/InfoClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 44,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/lifecycle/servlet/InfoClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 40,
                            "endColumn": 96
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/lifecycle/servlet/InfoClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 40,
                            "endColumn": 111
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 351,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/TimingAttack",
          "ruleIndex": 13,
          "level": "warning",
          "message": {
            "text": "An attacker can guess the secret value of doFinal because it is compared using java.util.Arrays.equals, which is vulnerable to timing attacks. Use java.security.MessageDigest.isEqual to compare values securely.",
            "markdown": "An attacker can guess the secret value of {0} because it is compared using {1}, which is vulnerable to timing attacks. Use java.security.MessageDigest.isEqual to compare values securely.",
            "arguments": [
              "[doFinal](0)",
              "[java.util.Arrays.equals](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "clustering/jgroups/extension/src/main/java/org/jboss/as/clustering/jgroups/auth/CipherAuthToken.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 70,
                  "endLine": 70,
                  "startColumn": 20,
                  "endColumn": 33
                }
              }
            }
          ],
          "fingerprints": {
            "0": "844b0d022ee728816f3c17a8bac0bbc41cc3b12cb5343bff89dfeb0353d723b1",
            "1": "8c037dea.8ba1272f.54350824.b8440f76.5ce79164.0bdcf4c7.fa1cb7c0.e8ad4388.8c037dea.8ba1272f.54350824.b8440f76.5ce79164.0bdcf4c7.fa1cb7c0.e8ad4388"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clustering/jgroups/extension/src/main/java/org/jboss/as/clustering/jgroups/auth/CipherAuthToken.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 69,
                            "endLine": 69,
                            "startColumn": 32,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "clustering/jgroups/extension/src/main/java/org/jboss/as/clustering/jgroups/auth/CipherAuthToken.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 20,
                            "endColumn": 33
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 301,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureCipherNoIntegrity/test",
          "ruleIndex": 14,
          "level": "note",
          "message": {
            "text": "The ECB mode used in javax.crypto.KeyGenerator.getInstance does not provide integrity. Consided using Galois/Counter Mode.",
            "markdown": "The {0} mode used in {1} does not provide integrity. Consided using Galois/Counter Mode.",
            "arguments": [
              "[ECB](0)",
              "[javax.crypto.KeyGenerator.getInstance](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/security/common/VaultHandler.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 126,
                  "endLine": 126,
                  "startColumn": 45,
                  "endColumn": 69
                }
              }
            }
          ],
          "fingerprints": {
            "0": "018108966b1bb48a4d65d500fac4e9d1d5f7d8f0136eb7d320eb0a4ea84da676",
            "1": "19689298.776e0f82.ba832df5.ede9cf8e.178caa9c.b82e679f.ba0b7ac2.54d46e25.19689298.776e0f82.ba832df5.ede9cf8e.178caa9c.b82e679f.ba0b7ac2.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/security/common/VaultHandler.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 126,
                            "endLine": 126,
                            "startColumn": 70,
                            "endColumn": 75
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/security/common/VaultHandler.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 126,
                            "endLine": 126,
                            "startColumn": 45,
                            "endColumn": 69
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureCipherNoIntegrity/test",
          "ruleIndex": 14,
          "level": "note",
          "message": {
            "text": "The ECB mode used in javax.crypto.KeyGenerator.getInstance does not provide integrity. Consided using Galois/Counter Mode.",
            "markdown": "The {0} mode used in {1} does not provide integrity. Consided using Galois/Counter Mode.",
            "arguments": [
              "[ECB](0)",
              "[javax.crypto.KeyGenerator.getInstance](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "security/subsystem/src/test/java/org/jboss/as/security/vault/VaultToolTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 50,
                  "endLine": 50,
                  "startColumn": 35,
                  "endColumn": 59
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2e78f8bb34fdb654a7dca1408c499f5889012e5bc29eb6bb8ce9706e39ee1be3",
            "1": "19689298.776e0f82.ba832df5.ede9cf8e.178caa9c.b82e679f.ba0b7ac2.54d46e25.19689298.776e0f82.ba832df5.ede9cf8e.178caa9c.b82e679f.ba0b7ac2.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/subsystem/src/test/java/org/jboss/as/security/vault/VaultToolTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 50,
                            "endLine": 50,
                            "startColumn": 60,
                            "endColumn": 65
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/subsystem/src/test/java/org/jboss/as/security/vault/VaultToolTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 50,
                            "endLine": 50,
                            "startColumn": 35,
                            "endColumn": 59
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/TooSmallRsaKeySizeUsed/test",
          "ruleIndex": 15,
          "level": "note",
          "message": {
            "text": "Key size of 1024 bits used in initialize is considered insecure for RSA. Use a key with at least 2048 bits.",
            "markdown": "Key size of {0} bits used in {1} is considered insecure for RSA. Use a key with at least 2048 bits.",
            "arguments": [
              "[1024](0)",
              "[initialize](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/RemotingLoginModuleUseNewClientCertTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 410,
                  "endLine": 410,
                  "startColumn": 13,
                  "endColumn": 40
                }
              }
            }
          ],
          "fingerprints": {
            "0": "29ad0ebfbad0d97410af57f4ff0f25ec8bb62b00c8cc02c6a794428c183c3b67",
            "1": "19689298.5d786f85.55cff77a.e22980a8.f1d9f854.e61fb9f8.a3f0b3e7.54d46e25.19689298.5d786f85.55cff77a.8f744b73.408180c7.e61fb9f8.a3f0b3e7.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/RemotingLoginModuleUseNewClientCertTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 410,
                            "endLine": 410,
                            "startColumn": 41,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/RemotingLoginModuleUseNewClientCertTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 410,
                            "endLine": 410,
                            "startColumn": 13,
                            "endColumn": 40
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/TooSmallRsaKeySizeUsed/test",
          "ruleIndex": 15,
          "level": "note",
          "message": {
            "text": "Key size of 1024 bits used in initialize is considered insecure for RSA. Use a key with at least 2048 bits.",
            "markdown": "Key size of {0} bits used in {1} is considered insecure for RSA. Use a key with at least 2048 bits.",
            "arguments": [
              "[1024](0)",
              "[initialize](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/RemotingLoginModuleTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 409,
                  "endLine": 409,
                  "startColumn": 13,
                  "endColumn": 40
                }
              }
            }
          ],
          "fingerprints": {
            "0": "73d393111a9dd36251a41de26d301339f9eb7f35591b9a91c56cd49eea52f4ad",
            "1": "19689298.5d786f85.55cff77a.e22980a8.f1d9f854.e61fb9f8.a3f0b3e7.54d46e25.19689298.5d786f85.55cff77a.8f744b73.408180c7.e61fb9f8.a3f0b3e7.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/RemotingLoginModuleTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 409,
                            "endLine": 409,
                            "startColumn": 41,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/RemotingLoginModuleTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 409,
                            "endLine": 409,
                            "startColumn": 13,
                            "endColumn": 40
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/TooSmallRsaKeySizeUsed/test",
          "ruleIndex": 15,
          "level": "note",
          "message": {
            "text": "Key size of 1024 bits used in setKeySize is considered insecure for RSA. Use a key with at least 2048 bits.",
            "markdown": "Key size of {0} bits used in {1} is considered insecure for RSA. Use a key with at least 2048 bits.",
            "arguments": [
              "[1024](0)",
              "[setKeySize](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/security/common/Utils.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 141,
                  "endLine": 145,
                  "startColumn": 89,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3ab4166738236cdf1bf69f556159c53a7272574be5fc2957a489674f03288c31",
            "1": "19689298.acb39759.86a51d17.a09dd976.32202b5c.544902f7.7db725ac.6636651a.19689298.acb39759.d9d294f6.8f744b73.4a097322.544902f7.7db725ac.6636651a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/security/common/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 145,
                            "endLine": 145,
                            "startColumn": 29,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/security/common/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 141,
                            "endLine": 145,
                            "startColumn": 89,
                            "endColumn": 28
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/TooSmallRsaKeySizeUsed/test",
          "ruleIndex": 15,
          "level": "note",
          "message": {
            "text": "Key size of 1024 bits used in setKeySize is considered insecure for RSA. Use a key with at least 2048 bits.",
            "markdown": "Key size of {0} bits used in {1} is considered insecure for RSA. Use a key with at least 2048 bits.",
            "arguments": [
              "[1024](0)",
              "[setKeySize](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/ws/src/test/java/org/jboss/as/test/integration/ws/wsse/GenerateSignEncryptFiles.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 79,
                  "endLine": 83,
                  "startColumn": 16,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ffccae17dab5c587fcd48c8cee22af651b883eeaa8da79e948d9d6d5447a3a9c",
            "1": "19689298.8384ad8b.fc7d5400.e22980a8.32202b5c.544902f7.7db725ac.6636651a.19689298.8384ad8b.fc7d5400.8f744b73.32202b5c.544902f7.7db725ac.6636651a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/ws/src/test/java/org/jboss/as/test/integration/ws/wsse/GenerateSignEncryptFiles.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 29,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/ws/src/test/java/org/jboss/as/test/integration/ws/wsse/GenerateSignEncryptFiles.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 79,
                            "endLine": 83,
                            "startColumn": 16,
                            "endColumn": 28
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/TooSmallRsaKeySizeUsed/test",
          "ruleIndex": 15,
          "level": "note",
          "message": {
            "text": "Key size of 1024 bits used in setKeySize is considered insecure for RSA. Use a key with at least 2048 bits.",
            "markdown": "Key size of {0} bits used in {1} is considered insecure for RSA. Use a key with at least 2048 bits.",
            "arguments": [
              "[1024](0)",
              "[setKeySize](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/ws/src/test/java/org/jboss/as/test/integration/ws/wsse/GenerateSignEncryptFiles.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 88,
                  "endLine": 92,
                  "startColumn": 16,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "93608f9108b6ab3707bc7cb4fad430dcc975df152a005c70b45a6356d56b7ca7",
            "1": "ac4e7c8b.e18c5e06.961953f7.a09dd976.32202b5c.544902f7.7db725ac.6636651a.ca9876a9.e18c5e06.961953f7.8f744b73.32202b5c.544902f7.7db725ac.6636651a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/ws/src/test/java/org/jboss/as/test/integration/ws/wsse/GenerateSignEncryptFiles.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 92,
                            "endLine": 92,
                            "startColumn": 29,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/ws/src/test/java/org/jboss/as/test/integration/ws/wsse/GenerateSignEncryptFiles.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 88,
                            "endLine": 92,
                            "startColumn": 16,
                            "endColumn": 28
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/TooSmallRsaKeySizeUsed/test",
          "ruleIndex": 15,
          "level": "note",
          "message": {
            "text": "Key size of 1024 bits used in setKeySize is considered insecure for RSA. Use a key with at least 2048 bits.",
            "markdown": "Key size of {0} bits used in {1} is considered insecure for RSA. Use a key with at least 2048 bits.",
            "arguments": [
              "[1024](0)",
              "[setKeySize](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/manualmode/src/test/java/org/jboss/as/test/manualmode/ejb/ssl/GenerateJBossStores.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 61,
                  "endLine": 65,
                  "startColumn": 16,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "267bfe320597623a45c9b1ceac5340eef861727a88f857861118a685141f7319",
            "1": "9007ba0b.e18c5e06.961953f7.e22980a8.d730e185.f997f7ae.7db725ac.6636651a.9007ba0b.e18c5e06.961953f7.8f744b73.d730e185.f997f7ae.7db725ac.6636651a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/manualmode/src/test/java/org/jboss/as/test/manualmode/ejb/ssl/GenerateJBossStores.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 65,
                            "endLine": 65,
                            "startColumn": 29,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/manualmode/src/test/java/org/jboss/as/test/manualmode/ejb/ssl/GenerateJBossStores.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 61,
                            "endLine": 65,
                            "startColumn": 16,
                            "endColumn": 28
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/TooSmallRsaKeySizeUsed/test",
          "ruleIndex": 15,
          "level": "note",
          "message": {
            "text": "Key size of 1024 bits used in setKeySize is considered insecure for RSA. Use a key with at least 2048 bits.",
            "markdown": "Key size of {0} bits used in {1} is considered insecure for RSA. Use a key with at least 2048 bits.",
            "arguments": [
              "[1024](0)",
              "[setKeySize](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/picketlink/src/test/java/org/wildfly/test/integration/security/picketlink/federation/util/FederationArchiveUtil.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 62,
                  "startColumn": 16,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3e9e913368cc4bcda118a3265811a0dbbdf64135cbde062f670a6d9b076b7020",
            "1": "19689298.acb39759.fc7d5400.e22980a8.32202b5c.544902f7.7db725ac.6636651a.19689298.af43b6c3.fc7d5400.8f744b73.32202b5c.544902f7.7db725ac.6636651a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/picketlink/src/test/java/org/wildfly/test/integration/security/picketlink/federation/util/FederationArchiveUtil.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 62,
                            "endLine": 62,
                            "startColumn": 29,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/picketlink/src/test/java/org/wildfly/test/integration/security/picketlink/federation/util/FederationArchiveUtil.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 58,
                            "endLine": 62,
                            "startColumn": 16,
                            "endColumn": 28
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/TooSmallRsaKeySizeUsed/test",
          "ruleIndex": 15,
          "level": "note",
          "message": {
            "text": "Key size of 1024 bits used in setKeySize is considered insecure for RSA. Use a key with at least 2048 bits.",
            "markdown": "Key size of {0} bits used in {1} is considered insecure for RSA. Use a key with at least 2048 bits.",
            "arguments": [
              "[1024](0)",
              "[setKeySize](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/ws/src/test/java/org/jboss/as/test/integration/ws/authentication/policy/GenerateSTSKeystore.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 62,
                  "startColumn": 16,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f8b1dcdc78befd72b65e7884fe7fd038a6b3653958386267277607610015dfde",
            "1": "19689298.e18c5e06.d06764f5.e22980a8.b181aa5e.544902f7.7db725ac.6636651a.19689298.af43b6c3.d06764f5.8f744b73.b181aa5e.544902f7.7db725ac.6636651a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/ws/src/test/java/org/jboss/as/test/integration/ws/authentication/policy/GenerateSTSKeystore.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 62,
                            "endLine": 62,
                            "startColumn": 29,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/ws/src/test/java/org/jboss/as/test/integration/ws/authentication/policy/GenerateSTSKeystore.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 58,
                            "endLine": 62,
                            "startColumn": 16,
                            "endColumn": 28
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/TooSmallRsaKeySizeUsed/test",
          "ruleIndex": 15,
          "level": "note",
          "message": {
            "text": "Key size of 1024 bits used in setKeySize is considered insecure for RSA. Use a key with at least 2048 bits.",
            "markdown": "Key size of {0} bits used in {1} is considered insecure for RSA. Use a key with at least 2048 bits.",
            "arguments": [
              "[1024](0)",
              "[setKeySize](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/ws/src/test/java/org/jboss/as/test/integration/ws/wsse/GenerateJKSAndPropertiesFiles.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 81,
                  "endLine": 85,
                  "startColumn": 16,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d194e852ae79cf11e2374a103301a955b9fa11cffd19ab6490854fe193502d8a",
            "1": "19689298.e18c5e06.5c4ef873.e22980a8.dce4469f.544902f7.ab908d50.6636651a.d1a8d3ca.98aea8b2.5c4ef873.8f744b73.dce4469f.544902f7.ab908d50.c498d13b"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/ws/src/test/java/org/jboss/as/test/integration/ws/wsse/GenerateJKSAndPropertiesFiles.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 123,
                            "endLine": 123,
                            "startColumn": 145,
                            "endColumn": 149
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/ws/src/test/java/org/jboss/as/test/integration/ws/wsse/GenerateJKSAndPropertiesFiles.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 81,
                            "endLine": 85,
                            "startColumn": 16,
                            "endColumn": 28
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/TooSmallRsaKeySizeUsed/test",
          "ruleIndex": 15,
          "level": "note",
          "message": {
            "text": "Key size of 1024 bits used in setKeySize is considered insecure for RSA. Use a key with at least 2048 bits.",
            "markdown": "Key size of {0} bits used in {1} is considered insecure for RSA. Use a key with at least 2048 bits.",
            "arguments": [
              "[1024](0)",
              "[setKeySize](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/ws/src/test/java/org/jboss/as/test/integration/ws/wsse/GenerateJKSAndPropertiesFiles.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 90,
                  "endLine": 94,
                  "startColumn": 16,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ee3b97e2a6de4c414c5b7e78c4f0dc83d9c427bd460daf51ffe5ddea82cfeab3",
            "1": "199d74f0.e18c5e06.961953f7.a09dd976.32202b5c.544902f7.7db725ac.6636651a.199d74f0.e18c5e06.961953f7.8f744b73.32202b5c.544902f7.7db725ac.6636651a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/ws/src/test/java/org/jboss/as/test/integration/ws/wsse/GenerateJKSAndPropertiesFiles.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 94,
                            "endLine": 94,
                            "startColumn": 29,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/ws/src/test/java/org/jboss/as/test/integration/ws/wsse/GenerateJKSAndPropertiesFiles.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 90,
                            "endLine": 94,
                            "startColumn": 16,
                            "endColumn": 28
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/TooSmallRsaKeySizeUsed/test",
          "ruleIndex": 15,
          "level": "note",
          "message": {
            "text": "Key size of 1024 bits used in setKeySize is considered insecure for RSA. Use a key with at least 2048 bits.",
            "markdown": "Key size of {0} bits used in {1} is considered insecure for RSA. Use a key with at least 2048 bits.",
            "arguments": [
              "[1024](0)",
              "[setKeySize](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/GenerateLDAPSJKSStore.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 51,
                  "endLine": 55,
                  "startColumn": 16,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "aa2c88eaf0c38968584de977f2e426e28ff27c2ad66866f2f46d97534a4174e4",
            "1": "19689298.acb39759.961953f7.e22980a8.32202b5c.544902f7.7db725ac.6636651a.19689298.acb39759.961953f7.8f744b73.32202b5c.544902f7.7db725ac.6636651a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/GenerateLDAPSJKSStore.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 29,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/GenerateLDAPSJKSStore.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 51,
                            "endLine": 55,
                            "startColumn": 16,
                            "endColumn": 28
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HttpResponseSplitting/test",
          "ruleIndex": 16,
          "level": "note",
          "message": {
            "text": "Unsanitized input from cookies flows into addCookie and reaches an HTTP header returned to the user. This may allow a malicious input that contain CR/LF to split the http response into two responses and the second response to be controlled by the attacker. This may be used to mount a range of attacks such as cross-site scripting or cache poisoning.",
            "markdown": "Unsanitized input from {0} {1} into {2} and reaches an HTTP header returned to the user. This may allow a malicious input that contain CR/LF to split the http response into two responses and the second response to be controlled by the attacker. This may be used to mount a range of attacks such as cross-site scripting or cache poisoning.",
            "arguments": [
              "[cookies](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13)",
              "[addCookie](14)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/web/sso/SSOTestBase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 300,
                  "endLine": 300,
                  "startColumn": 21,
                  "endColumn": 42
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8e97cf0a8ce0629fc643acd91e9a2183dc5cbb384b9907937a672651644b3ea4",
            "1": "19689298.1cbd3ff4.6e92714d.96c60d0b.8e2527f2.f940a352.47784fe6.54d46e25.92762d9a.b2b6b83e.59997255.2ebce711.8e2527f2.7fda7c5e.ac8d0de9.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/web/sso/SSOTestBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 294,
                            "endLine": 294,
                            "startColumn": 30,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/web/sso/SSOTestBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 294,
                            "endLine": 294,
                            "startColumn": 30,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/web/sso/SSOTestBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 294,
                            "endLine": 294,
                            "startColumn": 21,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/web/sso/SSOTestBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 295,
                            "endLine": 295,
                            "startColumn": 50,
                            "endColumn": 56
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/web/sso/SSOTestBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 296,
                            "endLine": 296,
                            "startColumn": 25,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/web/sso/SSOTestBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 309,
                            "endLine": 309,
                            "startColumn": 37,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/web/sso/SSOTestBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 329,
                            "endLine": 329,
                            "startColumn": 56,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/web/sso/SSOTestBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 329,
                            "endLine": 329,
                            "startColumn": 56,
                            "endColumn": 70
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/web/sso/SSOTestBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 329,
                            "endLine": 329,
                            "startColumn": 38,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/web/sso/SSOTestBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 329,
                            "endLine": 329,
                            "startColumn": 27,
                            "endColumn": 92
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/web/sso/SSOTestBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 330,
                            "endLine": 330,
                            "startColumn": 9,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/web/sso/SSOTestBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 331,
                            "endLine": 331,
                            "startColumn": 16,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/web/sso/SSOTestBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 299,
                            "endLine": 299,
                            "startColumn": 28,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/web/sso/SSOTestBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 300,
                            "endLine": 300,
                            "startColumn": 43,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/web/sso/SSOTestBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 300,
                            "endLine": 300,
                            "startColumn": 21,
                            "endColumn": 42
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HttpResponseSplitting/test",
          "ruleIndex": 16,
          "level": "note",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into setHeader and reaches an HTTP header returned to the user. This may allow a malicious input that contain CR/LF to split the http response into two responses and the second response to be controlled by the attacker. This may be used to mount a range of attacks such as cross-site scripting or cache poisoning.",
            "markdown": "Unsanitized input from {0} {1} into {2} and reaches an HTTP header returned to the user. This may allow a malicious input that contain CR/LF to split the http response into two responses and the second response to be controlled by the attacker. This may be used to mount a range of attacks such as cross-site scripting or cache poisoning.",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9)",
              "[setHeader](10)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/passivation/SessionOperationServlet.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 126,
                  "endLine": 126,
                  "startColumn": 21,
                  "endColumn": 35
                }
              }
            }
          ],
          "fingerprints": {
            "0": "16b24c6136cbd75c3a5cadfc88c9f72883cdc1ee82f8dc1fb58faf17abdc1c15",
            "1": "2d06e3d6.c5d10016.98167ba1.6483b32f.b514f8e2.30a021a2.248814d4.54d46e25.1393abbb.c5d10016.fdbc0497.9e223445.0681ed2b.5b29c616.d11a1cde.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/passivation/SessionOperationServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 149,
                            "endLine": 149,
                            "startColumn": 24,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/passivation/SessionOperationServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 149,
                            "endLine": 149,
                            "startColumn": 24,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/passivation/SessionOperationServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 149,
                            "endLine": 149,
                            "startColumn": 16,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/passivation/SessionOperationServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 153,
                            "endLine": 153,
                            "startColumn": 16,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/passivation/SessionOperationServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 123,
                            "endLine": 123,
                            "startColumn": 24,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/passivation/SessionOperationServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 124,
                            "endLine": 124,
                            "startColumn": 71,
                            "endColumn": 91
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/passivation/SessionOperationServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 124,
                            "endLine": 124,
                            "startColumn": 47,
                            "endColumn": 97
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/passivation/SessionOperationServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 124,
                            "endLine": 124,
                            "startColumn": 39,
                            "endColumn": 97
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/passivation/SessionOperationServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 126,
                            "endLine": 126,
                            "startColumn": 44,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/passivation/SessionOperationServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 126,
                            "endLine": 126,
                            "startColumn": 44,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/passivation/SessionOperationServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 126,
                            "endLine": 126,
                            "startColumn": 21,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HttpResponseSplitting/test",
          "ruleIndex": 16,
          "level": "note",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into setHeader and reaches an HTTP header returned to the user. This may allow a malicious input that contain CR/LF to split the http response into two responses and the second response to be controlled by the attacker. This may be used to mount a range of attacks such as cross-site scripting or cache poisoning.",
            "markdown": "Unsanitized input from {0} {1} into {2} and reaches an HTTP header returned to the user. This may allow a malicious input that contain CR/LF to split the http response into two responses and the second response to be controlled by the attacker. This may be used to mount a range of attacks such as cross-site scripting or cache poisoning.",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9)",
              "[setHeader](10)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/expiration/SessionOperationServlet.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 132,
                  "endLine": 132,
                  "startColumn": 17,
                  "endColumn": 31
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b26daf59d90ef2dc1a797dde908f7be2a01c63f99e1a8248229c3553d32fdc43",
            "1": "2d06e3d6.c5d10016.98167ba1.6483b32f.b514f8e2.30a021a2.248814d4.54d46e25.1393abbb.c5d10016.fdbc0497.9e223445.0681ed2b.5b29c616.d11a1cde.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/expiration/SessionOperationServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 166,
                            "endLine": 166,
                            "startColumn": 24,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/expiration/SessionOperationServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 166,
                            "endLine": 166,
                            "startColumn": 24,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/expiration/SessionOperationServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 166,
                            "endLine": 166,
                            "startColumn": 16,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/expiration/SessionOperationServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 170,
                            "endLine": 170,
                            "startColumn": 16,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/expiration/SessionOperationServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 129,
                            "endLine": 129,
                            "startColumn": 20,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/expiration/SessionOperationServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 130,
                            "endLine": 130,
                            "startColumn": 67,
                            "endColumn": 87
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/expiration/SessionOperationServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 130,
                            "endLine": 130,
                            "startColumn": 43,
                            "endColumn": 93
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/expiration/SessionOperationServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 130,
                            "endLine": 130,
                            "startColumn": 35,
                            "endColumn": 93
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/expiration/SessionOperationServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 132,
                            "endLine": 132,
                            "startColumn": 40,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/expiration/SessionOperationServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 132,
                            "endLine": 132,
                            "startColumn": 40,
                            "endColumn": 54
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/expiration/SessionOperationServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 132,
                            "endLine": 132,
                            "startColumn": 17,
                            "endColumn": 31
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureDefaultAesCipher/test",
          "ruleIndex": 17,
          "level": "note",
          "message": {
            "text": "Default AES/ECB algorithm (AES) used in javax.crypto.KeyGenerator.getInstance may be insecure, because equal messages get encrypted to equal data. Consider using Galois/Counter Mode (algorithm AES/GCM/NoPadding).",
            "markdown": "Default AES/ECB algorithm ({0}) used in {1} may be insecure, because equal messages get encrypted to equal data. Consider using Galois/Counter Mode (algorithm AES/GCM/NoPadding).",
            "arguments": [
              "[AES](0)",
              "[javax.crypto.KeyGenerator.getInstance](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/security/common/VaultHandler.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 126,
                  "endLine": 126,
                  "startColumn": 45,
                  "endColumn": 69
                }
              }
            }
          ],
          "fingerprints": {
            "0": "68c49cc793988c4510c00965b7675c818c9c33e71d9138a8a122eb94e4af1ac8",
            "1": "19689298.776e0f82.ba832df5.ede9cf8e.178caa9c.b82e679f.ba0b7ac2.54d46e25.19689298.776e0f82.ba832df5.ede9cf8e.178caa9c.b82e679f.ba0b7ac2.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/security/common/VaultHandler.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 126,
                            "endLine": 126,
                            "startColumn": 70,
                            "endColumn": 75
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/security/common/VaultHandler.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 126,
                            "endLine": 126,
                            "startColumn": 45,
                            "endColumn": 69
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureDefaultAesCipher/test",
          "ruleIndex": 17,
          "level": "note",
          "message": {
            "text": "Default AES/ECB algorithm (AES) used in javax.crypto.KeyGenerator.getInstance may be insecure, because equal messages get encrypted to equal data. Consider using Galois/Counter Mode (algorithm AES/GCM/NoPadding).",
            "markdown": "Default AES/ECB algorithm ({0}) used in {1} may be insecure, because equal messages get encrypted to equal data. Consider using Galois/Counter Mode (algorithm AES/GCM/NoPadding).",
            "arguments": [
              "[AES](0)",
              "[javax.crypto.KeyGenerator.getInstance](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "security/subsystem/src/test/java/org/jboss/as/security/vault/VaultToolTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 50,
                  "endLine": 50,
                  "startColumn": 35,
                  "endColumn": 59
                }
              }
            }
          ],
          "fingerprints": {
            "0": "720f28c4b37c809614189b43204173e570b3193969cee07ecd593d4a305764fa",
            "1": "19689298.776e0f82.ba832df5.ede9cf8e.178caa9c.b82e679f.ba0b7ac2.54d46e25.19689298.776e0f82.ba832df5.ede9cf8e.178caa9c.b82e679f.ba0b7ac2.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/subsystem/src/test/java/org/jboss/as/security/vault/VaultToolTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 50,
                            "endLine": 50,
                            "startColumn": 60,
                            "endColumn": 65
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/subsystem/src/test/java/org/jboss/as/security/vault/VaultToolTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 50,
                            "endLine": 50,
                            "startColumn": 35,
                            "endColumn": 59
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/TooPermissiveTrustManager/test",
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "TrustManager might be too permissive: all servers are trusted.",
            "markdown": "TrustManager might be too permissive: {0}.",
            "arguments": [
              "[all servers are trusted](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/handlers/RequestDumpingHandlerTestImpl.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 337,
                  "endLine": 337,
                  "startColumn": 29,
                  "endColumn": 47
                }
              }
            }
          ],
          "fingerprints": {
            "0": "667fa2c060bcc61e62754109b6d21be16d3583f363856d581910ee9883eb5bba",
            "1": "d3279c65.528e35bc.bf05a696.e22980a8.f0e1baa5.eacd09e2.7011a60a.d9e01f64.d3279c65.528e35bc.bf05a696.e22980a8.f0e1baa5.eacd09e2.7011a60a.d9e01f64"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/handlers/RequestDumpingHandlerTestImpl.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 337,
                            "endLine": 337,
                            "startColumn": 29,
                            "endColumn": 47
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/TooPermissiveTrustManager/test",
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "TrustManager might be too permissive: all servers are trusted.",
            "markdown": "TrustManager might be too permissive: {0}.",
            "arguments": [
              "[all servers are trusted](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/shared/src/main/java/org/jboss/as/test/http/util/TestHttpClientUtils.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 110,
                  "endLine": 110,
                  "startColumn": 25,
                  "endColumn": 43
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ecc077de2a97bf45fd05843bc3403708baca092bd5f6c5abbc225c5f5963373e",
            "1": "8df8fa68.528e35bc.8c56ae10.280e977c.f0e1baa5.eacd09e2.7c63a4f9.16a5abf8.8df8fa68.528e35bc.8c56ae10.280e977c.f0e1baa5.eacd09e2.7c63a4f9.16a5abf8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/http/util/TestHttpClientUtils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 110,
                            "endLine": 110,
                            "startColumn": 25,
                            "endColumn": 43
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/TooPermissiveTrustManager/test",
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "TrustManager might be too permissive: all clients are trusted.",
            "markdown": "TrustManager might be too permissive: {0}.",
            "arguments": [
              "[all clients are trusted](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/handlers/RequestDumpingHandlerTestImpl.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 341,
                  "endLine": 341,
                  "startColumn": 29,
                  "endColumn": 47
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1a6239510ac0fe2ad91e9403c941060c453663f43c9977640bc665b498772117",
            "1": "d3279c65.528e35bc.bf05a696.e22980a8.f0e1baa5.eacd09e2.7011a60a.d9e01f64.d3279c65.528e35bc.bf05a696.e22980a8.f0e1baa5.eacd09e2.7011a60a.d9e01f64"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/handlers/RequestDumpingHandlerTestImpl.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 341,
                            "endLine": 341,
                            "startColumn": 29,
                            "endColumn": 47
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/TooPermissiveTrustManager/test",
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "TrustManager might be too permissive: all clients are trusted.",
            "markdown": "TrustManager might be too permissive: {0}.",
            "arguments": [
              "[all clients are trusted](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/shared/src/main/java/org/jboss/as/test/http/util/TestHttpClientUtils.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 107,
                  "endLine": 107,
                  "startColumn": 25,
                  "endColumn": 43
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e149a6196077ae9d065b210d4c2ffacf5d7dfb2cfe03f90bcbb66988a6fbca35",
            "1": "8df8fa68.528e35bc.8c56ae10.280e977c.f0e1baa5.eacd09e2.7c63a4f9.16a5abf8.8df8fa68.528e35bc.8c56ae10.280e977c.f0e1baa5.eacd09e2.7c63a4f9.16a5abf8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/http/util/TestHttpClientUtils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 107,
                            "endLine": 107,
                            "startColumn": 25,
                            "endColumn": 43
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/TooPermissiveTrustManager/test",
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "TrustManager might be too permissive: all Certificate Authorities are trusted.",
            "markdown": "TrustManager might be too permissive: {0}.",
            "arguments": [
              "[all Certificate Authorities are trusted](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/shared/src/main/java/org/jboss/as/test/http/util/TestHttpClientUtils.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 113,
                  "endLine": 113,
                  "startColumn": 38,
                  "endColumn": 56
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a309f50d62b07dbc5c1771183739753903c72566aba9c0bf3ac561fbdbe39be8",
            "1": "8df8fa68.528e35bc.8c56ae10.e22980a8.f0e1baa5.eacd09e2.f1ccdb3e.1d874c72.8df8fa68.528e35bc.8c56ae10.e22980a8.6441080e.eacd09e2.f1ccdb3e.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/http/util/TestHttpClientUtils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 114,
                            "endLine": 114,
                            "startColumn": 24,
                            "endColumn": 28
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/IndirectCommandInjection/test",
          "ruleIndex": 19,
          "level": "note",
          "message": {
            "text": "Unsanitized input from an environment path variable flows into exec, where it is used to build a shell command. Forwarding command-line arguments or file paths from the local environment to a function that executes a system command can change the meaning of the command unexpectedly due to unescaped special characters, which may result in a Indirect Command Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to build a shell command. Forwarding command-line arguments or file paths from the local environment to a function that executes a system command can change the meaning of the command unexpectedly due to unescaped special characters, which may result in a Indirect Command Injection vulnerability.",
            "arguments": [
              "[an environment path variable](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12)",
              "[exec](13)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/deployment/jcedeployment/JarSignerUtil.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 66,
                  "endLine": 66,
                  "startColumn": 31,
                  "endColumn": 56
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6d7488f16ae0eae9167140abf6649aa6c07ab59c9777ed081356585fa82ba6aa",
            "1": "54a059af.83dbfe52.0df92210.6c52ae28.fcb647f9.a95e10b8.e022c501.54d46e25.54a059af.c62608d0.33fa5dbe.c61ab696.fcb647f9.7fda7c5e.89dd5edb.22918495"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/deployment/jcedeployment/JarSignerUtil.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 27,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/deployment/jcedeployment/JarSignerUtil.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 27,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/deployment/jcedeployment/JarSignerUtil.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 56,
                            "endLine": 56,
                            "startColumn": 20,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/deployment/jcedeployment/JarSignerUtil.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 61,
                            "endLine": 61,
                            "startColumn": 32,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/deployment/jcedeployment/JarSignerUtil.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 61,
                            "endLine": 61,
                            "startColumn": 32,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/deployment/jcedeployment/JarSignerUtil.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 61,
                            "endLine": 61,
                            "startColumn": 32,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/deployment/jcedeployment/JarSignerUtil.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 61,
                            "endLine": 61,
                            "startColumn": 32,
                            "endColumn": 78
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/deployment/jcedeployment/JarSignerUtil.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 61,
                            "endLine": 61,
                            "startColumn": 32,
                            "endColumn": 92
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/deployment/jcedeployment/JarSignerUtil.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 61,
                            "endLine": 61,
                            "startColumn": 20,
                            "endColumn": 92
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/deployment/jcedeployment/JarSignerUtil.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 62,
                            "endLine": 62,
                            "startColumn": 41,
                            "endColumn": 54
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/deployment/jcedeployment/JarSignerUtil.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 62,
                            "endLine": 62,
                            "startColumn": 27,
                            "endColumn": 65
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/deployment/jcedeployment/JarSignerUtil.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 66,
                            "endLine": 66,
                            "startColumn": 57,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/deployment/jcedeployment/JarSignerUtil.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 66,
                            "endLine": 66,
                            "startColumn": 57,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/deployment/jcedeployment/JarSignerUtil.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 66,
                            "endLine": 66,
                            "startColumn": 31,
                            "endColumn": 56
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 351,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedSecret",
          "ruleIndex": 20,
          "level": "error",
          "message": {
            "text": "Hardcoded value string is used as a cipher key. Generate the value with a cryptographically strong random number generator such as java.security.SecureRandom instead.",
            "markdown": "Hardcoded value {0} is used as a {1}. Generate the value with a cryptographically strong random number generator such as java.security.SecureRandom instead.",
            "arguments": [
              "[string](0)",
              "[cipher key](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "security/subsystem/src/main/java/org/jboss/as/security/vault/VaultSession.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 175,
                  "endLine": 175,
                  "startColumn": 34,
                  "endColumn": 44
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a1a1aabe49abbd4fe5fb76dc928185a0c179a511bd5cb513968c202de3350b76",
            "1": "a75b04d3.7cd4917b.71a71d19.6c52ae28.abd776fc.dd62fee0.45428c9d.d6405d7e.4d9dffb9.7cd4917b.71a71d19.d6ab05b5.abd776fc.dd62fee0.45428c9d.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/subsystem/src/main/java/org/jboss/as/security/vault/VaultSession.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 173,
                            "endLine": 173,
                            "startColumn": 27,
                            "endColumn": 70
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/subsystem/src/main/java/org/jboss/as/security/vault/VaultSession.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 175,
                            "endLine": 175,
                            "startColumn": 34,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 801,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket/test",
          "ruleIndex": 21,
          "level": "note",
          "message": {
            "text": "Writing to an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Writing to](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/negotiation/GSSTestClient.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 83,
                  "endLine": 83,
                  "startColumn": 57,
                  "endColumn": 79
                }
              }
            }
          ],
          "fingerprints": {
            "0": "147ea95b902ff5e237f812d68bdc0fcdb5602b46186ca2c563a4fcb20f2e79e0",
            "1": "3b542730.c6f63401.bb993ef0.6c52ae28.32bd8b25.48eeb24b.ab5a2e1a.0f01a149.3b542730.83dbfe52.bb993ef0.6c52ae28.32bd8b25.85d83993.ab5a2e1a.0f01a149"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/negotiation/GSSTestClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 57,
                            "endColumn": 79
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/negotiation/GSSTestClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 57,
                            "endColumn": 79
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket/test",
          "ruleIndex": 21,
          "level": "note",
          "message": {
            "text": "Writing to an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Writing to](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/negotiation/GSSTestServer.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 173,
                  "endLine": 173,
                  "startColumn": 57,
                  "endColumn": 79
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e52674343c5a97f4b48473807bbb7403c20115de10bc95f91e4a9074ef905259",
            "1": "3b542730.c6f63401.6906ef50.6c52ae28.c41fd899.48eeb24b.ab5a2e1a.0f01a149.3b542730.83dbfe52.6906ef50.6c52ae28.c41fd899.85d83993.ab5a2e1a.0f01a149"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/negotiation/GSSTestServer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 173,
                            "endLine": 173,
                            "startColumn": 57,
                            "endColumn": 79
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/negotiation/GSSTestServer.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 173,
                            "endLine": 173,
                            "startColumn": 57,
                            "endColumn": 79
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket/test",
          "ruleIndex": 21,
          "level": "note",
          "message": {
            "text": "Writing to an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Writing to](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/listener/UnescapedURITestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 101,
                  "endLine": 101,
                  "startColumn": 13,
                  "endColumn": 35
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0e96ca1c17a0f523fe9e143dd87e88d89630aa336734c6dd2a769f1d33851e22",
            "1": "3b542730.49766a9f.bb993ef0.44ab356c.390f960b.85d83993.ec290f27.54d46e25.3b542730.49766a9f.bb993ef0.44ab356c.390f960b.85d83993.ed1ab504.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/listener/UnescapedURITestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 101,
                            "endLine": 101,
                            "startColumn": 13,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/listener/UnescapedURITestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 101,
                            "endLine": 101,
                            "startColumn": 13,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket/test",
          "ruleIndex": 21,
          "level": "note",
          "message": {
            "text": "Writing to an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Writing to](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/management/api/web/ListenerTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 289,
                  "endLine": 289,
                  "startColumn": 13,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "811d0fa596f86a96d570d82588779afd90d3e2dd3714e790e76edfcf460a5283",
            "1": "19689298.49766a9f.bb993ef0.44ab356c.e27b77c0.85d83993.ec290f27.54d46e25.19689298.49766a9f.bb993ef0.44ab356c.e27b77c0.85d83993.ed1ab504.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/management/api/web/ListenerTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 289,
                            "endLine": 289,
                            "startColumn": 13,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/management/api/web/ListenerTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 289,
                            "endLine": 289,
                            "startColumn": 13,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket/test",
          "ruleIndex": 21,
          "level": "note",
          "message": {
            "text": "Writing to an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Writing to](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/management/api/web/ListenerTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 302,
                  "endLine": 302,
                  "startColumn": 13,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "14730dcceed441e634ccc848c99624dcf110383cbd0515ca2126b50e56b5f798",
            "1": "19689298.49766a9f.fc7d5400.44ab356c.e27b77c0.85d83993.ec290f27.54d46e25.19689298.49766a9f.e198041f.44ab356c.e27b77c0.85d83993.ed1ab504.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/management/api/web/ListenerTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 302,
                            "endLine": 302,
                            "startColumn": 13,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/management/api/web/ListenerTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 302,
                            "endLine": 302,
                            "startColumn": 13,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket/test",
          "ruleIndex": 21,
          "level": "note",
          "message": {
            "text": "Writing to an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Writing to](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/injection/support/servlet/HttpUpgradeHandlerInjectionSupportTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 86,
                  "endLine": 86,
                  "startColumn": 61,
                  "endColumn": 83
                }
              }
            }
          ],
          "fingerprints": {
            "0": "67c78b0fd2ff4810b6cede9a6f60835ec22fc242db5a7f6dc6b3b995f49ba3ae",
            "1": "14b0258f.b0741e73.bb993ef0.6c52ae28.32bd8b25.7fda7c5e.ffec8e26.54d46e25.14b0258f.b0741e73.bb993ef0.6c52ae28.50314e63.7fda7c5e.9589bd2d.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/injection/support/servlet/HttpUpgradeHandlerInjectionSupportTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 86,
                            "endLine": 86,
                            "startColumn": 61,
                            "endColumn": 83
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/injection/support/servlet/HttpUpgradeHandlerInjectionSupportTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 86,
                            "endLine": 86,
                            "startColumn": 61,
                            "endColumn": 83
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket/test",
          "ruleIndex": 21,
          "level": "note",
          "message": {
            "text": "Writing to an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Writing to](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ejb/mdb/dynamic/DynamicMessageListenerTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 95,
                  "endLine": 95,
                  "startColumn": 38,
                  "endColumn": 60
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6493f9a2a026a783aa2a4dbc083f4b62b66b97289fda8ae82a24a35ab52cafac",
            "1": "3b542730.7797192f.bb993ef0.6c52ae28.408180c7.85d83993.5ef2310d.54d46e25.3b542730.7797192f.bb993ef0.6c52ae28.408180c7.85d83993.ed1ab504.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ejb/mdb/dynamic/DynamicMessageListenerTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 95,
                            "endLine": 95,
                            "startColumn": 38,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ejb/mdb/dynamic/DynamicMessageListenerTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 95,
                            "endLine": 95,
                            "startColumn": 38,
                            "endColumn": 60
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket/test",
          "ruleIndex": 21,
          "level": "note",
          "message": {
            "text": "Reading from an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Reading from](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/negotiation/GSSTestClient.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 84,
                  "endLine": 84,
                  "startColumn": 55,
                  "endColumn": 76
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1e37547b391b196e9b4c87b99bb87d49fe4f38d86d0cba9d5af5d2e1c6fad9af",
            "1": "3b542730.50ceb839.bb993ef0.6c52ae28.c41fd899.05f431a2.61657381.0f01a149.3b542730.50ceb839.bb993ef0.6c52ae28.c41fd899.85d83993.61657381.0f01a149"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/negotiation/GSSTestClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 84,
                            "endLine": 84,
                            "startColumn": 55,
                            "endColumn": 76
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/negotiation/GSSTestClient.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 84,
                            "endLine": 84,
                            "startColumn": 55,
                            "endColumn": 76
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket/test",
          "ruleIndex": 21,
          "level": "note",
          "message": {
            "text": "Reading from an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Reading from](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/listener/UnescapedURITestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 102,
                  "endLine": 102,
                  "startColumn": 39,
                  "endColumn": 60
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4fa75ed1665ebcc06140ec19c3b3be88cc60dd6d30f5acb2b451e8d9b665e223",
            "1": "3b542730.1cbd3ff4.bb993ef0.ea4568bb.ae8dc900.a5a81a87.3241443d.0f01a149.3b542730.1cbd3ff4.bb993ef0.6c52ae28.50314e63.85d83993.3241443d.0f01a149"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/listener/UnescapedURITestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 102,
                            "endLine": 102,
                            "startColumn": 39,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/listener/UnescapedURITestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 102,
                            "endLine": 102,
                            "startColumn": 39,
                            "endColumn": 60
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket/test",
          "ruleIndex": 21,
          "level": "note",
          "message": {
            "text": "Reading from an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Reading from](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/management/api/web/ListenerTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 290,
                  "endLine": 290,
                  "startColumn": 48,
                  "endColumn": 64
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d11df3494482814cc21761f2ba6bd893cb8cce395d7b424824828bbfff5efd48",
            "1": "ca9876a9.c6436c56.bb993ef0.ea4568bb.e27b77c0.f940a352.b8060686.0f01a149.19689298.c6436c56.bb993ef0.6c52ae28.e27b77c0.85d83993.ed1ab504.0f01a149"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/management/api/web/ListenerTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 290,
                            "endLine": 290,
                            "startColumn": 48,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/management/api/web/ListenerTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 290,
                            "endLine": 290,
                            "startColumn": 48,
                            "endColumn": 64
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket/test",
          "ruleIndex": 21,
          "level": "note",
          "message": {
            "text": "Reading from an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Reading from](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/injection/support/servlet/HttpUpgradeHandlerInjectionSupportTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 97,
                  "endLine": 97,
                  "startColumn": 59,
                  "endColumn": 80
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7c5a042d2449fe31621411dc3848d4a04dfe581e4bcb8094319448840645ac42",
            "1": "af5086c5.c6f63401.bb993ef0.6c52ae28.32bd8b25.7fda7c5e.59032646.0f01a149.af5086c5.cd590ade.bb993ef0.6c52ae28.50314e63.7fda7c5e.9589bd2d.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/injection/support/servlet/HttpUpgradeHandlerInjectionSupportTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 97,
                            "endLine": 97,
                            "startColumn": 59,
                            "endColumn": 80
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/injection/support/servlet/HttpUpgradeHandlerInjectionSupportTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 97,
                            "endLine": 97,
                            "startColumn": 59,
                            "endColumn": 80
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/UsageOfUnencryptedSocket/test",
          "ruleIndex": 21,
          "level": "note",
          "message": {
            "text": "Reading from an unencrypted socket is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "markdown": "{0} an unencrypted {1} is insecure - a man-in-the-middle attacker can tamper the messages. Consider using SSL sockets.",
            "arguments": [
              "[Reading from](0)",
              "[socket](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ejb/mdb/dynamic/DynamicMessageListenerTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 96,
                  "endLine": 96,
                  "startColumn": 78,
                  "endColumn": 99
                }
              }
            }
          ],
          "fingerprints": {
            "0": "65edae742b687df46a4c82aeeef628289e95dc13dd441fd5a3d1ab54e07c2759",
            "1": "3b542730.c6f63401.bb993ef0.ac1fc88d.05415e13.05f431a2.5ef2310d.0f01a149.3b542730.83dbfe52.bb993ef0.ac1fc88d.05415e13.85d83993.ed1ab504.0f01a149"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ejb/mdb/dynamic/DynamicMessageListenerTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 96,
                            "endLine": 96,
                            "startColumn": 78,
                            "endColumn": 99
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ejb/mdb/dynamic/DynamicMessageListenerTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 96,
                            "endLine": 96,
                            "startColumn": 78,
                            "endColumn": 99
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/PT",
          "ruleIndex": 22,
          "level": "error",
          "message": {
            "text": "Unsanitized input from a command line argument flows into exists, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to bypass the logic of the application in the conditional expression.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to bypass the logic of the application in the {3}.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24),(25),(26),(27)",
              "[exists](28)",
              "[conditional expression](29)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 132,
                  "endLine": 132,
                  "startColumn": 22,
                  "endColumn": 37
                }
              }
            }
          ],
          "fingerprints": {
            "0": "39c000dfab10a6bea973e629f3ecddd37228f3447b80bb34587881625d047df9",
            "1": "3b621b06.c8c8034f.178ccbd4.9998adc9.dd06b926.9e8e6ede.2000d31e.54d46e25.e1d7cd7c.05160c16.9f9d2026.de031890.408180c7.e4d7b7ac.2000d31e.8ca5c11b"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 185,
                            "endLine": 185,
                            "startColumn": 32,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 185,
                            "endLine": 185,
                            "startColumn": 32,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 185,
                            "endLine": 185,
                            "startColumn": 26,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 203,
                            "endLine": 203,
                            "startColumn": 28,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 208,
                            "endLine": 208,
                            "startColumn": 28,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 213,
                            "endLine": 213,
                            "startColumn": 28,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 218,
                            "endLine": 218,
                            "startColumn": 28,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 218,
                            "endLine": 218,
                            "startColumn": 75,
                            "endColumn": 78
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 225,
                            "endLine": 225,
                            "startColumn": 28,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 232,
                            "endLine": 232,
                            "startColumn": 28,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 239,
                            "endLine": 239,
                            "startColumn": 28,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 245,
                            "endLine": 245,
                            "startColumn": 27,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 259,
                            "endLine": 259,
                            "startColumn": 28,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 264,
                            "endLine": 264,
                            "startColumn": 25,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 271,
                            "endLine": 271,
                            "startColumn": 21,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 188,
                            "endLine": 188,
                            "startColumn": 21,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 107,
                            "endLine": 107,
                            "startColumn": 45,
                            "endColumn": 68
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 107,
                            "endLine": 107,
                            "startColumn": 32,
                            "endColumn": 68
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 109,
                            "endLine": 109,
                            "startColumn": 17,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 116,
                            "endLine": 116,
                            "startColumn": 37,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 116,
                            "endLine": 116,
                            "startColumn": 37,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 116,
                            "endLine": 116,
                            "startColumn": 30,
                            "endColumn": 54
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 121,
                            "endLine": 121,
                            "startColumn": 27,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 123,
                            "endLine": 123,
                            "startColumn": 31,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 24,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 123,
                            "endLine": 123,
                            "startColumn": 21,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 25,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 130,
                            "endLine": 130,
                            "startColumn": 37,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 26,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 130,
                            "endLine": 130,
                            "startColumn": 22,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 27,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 132,
                            "endLine": 132,
                            "startColumn": 22,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 28,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 132,
                            "endLine": 132,
                            "startColumn": 22,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 29,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "appclient/src/main/java/org/jboss/as/appclient/subsystem/Main.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 132,
                            "endLine": 132,
                            "startColumn": 17,
                            "endColumn": 39
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 801,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/NonCryptoHardcodedSecret/test",
          "ruleIndex": 23,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found hardcoded secret.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found hardcoded {0}.",
            "arguments": [
              "[secret](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "security/subsystem/src/test/java/org/jboss/as/security/vault/VaultTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 18,
                  "endLine": 18,
                  "startColumn": 51,
                  "endColumn": 80
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ae161245376b877d36c66ee21db2c095cdf93663b7b863c1f56d640d7f7e390e",
            "1": "416089e6.31fb0e62.3c7d90aa.de031890.8b2d3351.ce109560.4959bbdc.87dfd8cc.01c29950.208ddb39.3c7d90aa.de031890.bb61bed7.ce109560.4959bbdc.87dfd8cc"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/subsystem/src/test/java/org/jboss/as/security/vault/VaultTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 18,
                            "endLine": 18,
                            "startColumn": 51,
                            "endColumn": 80
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/NonCryptoHardcodedSecret/test",
          "ruleIndex": 23,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found hardcoded secret.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found hardcoded {0}.",
            "arguments": [
              "[secret](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "security/subsystem/src/test/java/org/jboss/as/security/vault/VaultTest.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 19,
                  "endLine": 19,
                  "startColumn": 61,
                  "endColumn": 89
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8130607606290852e86808b39af2135d1d98be5afb032402b9260f48f6673c6f",
            "1": "416089e6.dd05ec30.3c7d90aa.de031890.415b6696.ce109560.e4580e17.19802c05.01c29950.208ddb39.3c7d90aa.de031890.bb61bed7.ce109560.7115c551.19802c05"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/subsystem/src/test/java/org/jboss/as/security/vault/VaultTest.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 19,
                            "endLine": 19,
                            "startColumn": 61,
                            "endColumn": 89
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/NonCryptoHardcodedSecret/test",
          "ruleIndex": 23,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found hardcoded secret.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found hardcoded {0}.",
            "arguments": [
              "[secret](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/jca/security/DsWithMixedSecurityTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 77,
                  "endLine": 77,
                  "startColumn": 57,
                  "endColumn": 69
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9f4bfa54cab4110d3abded6de049686b77b1b9421af03fad60f7daff48e6fddc",
            "1": "416089e6.dd05ec30.3c7d90aa.de031890.db6769f0.ce109560.fef2f4be.87dfd8cc.8872a627.3fd79b36.3c7d90aa.de031890.db6769f0.ce109560.fef2f4be.87dfd8cc"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/jca/security/DsWithMixedSecurityTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 77,
                            "endLine": 77,
                            "startColumn": 57,
                            "endColumn": 69
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/NonCryptoHardcodedSecret/test",
          "ruleIndex": 23,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found hardcoded secret.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found hardcoded {0}.",
            "arguments": [
              "[secret](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/common/CustomLoginModule1.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 21,
                  "startColumn": 53,
                  "endColumn": 69
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6a6d4c40db9cf046bc3392878a469edd3fce67497d08837ae146a9378a2ec88c",
            "1": "416089e6.dd05ec30.9787d929.de031890.8b2d3351.ce109560.17d3a6e1.87dfd8cc.7656a3d1.dd05ec30.9787d929.de031890.bb61bed7.ce109560.7115c551.cf2855c8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/common/CustomLoginModule1.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 21,
                            "endLine": 21,
                            "startColumn": 53,
                            "endColumn": 69
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/NonCryptoHardcodedSecret/test",
          "ruleIndex": 23,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found hardcoded secret.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found hardcoded {0}.",
            "arguments": [
              "[secret](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/common/CustomLoginModule1.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 23,
                  "endLine": 23,
                  "startColumn": 52,
                  "endColumn": 67
                }
              }
            }
          ],
          "fingerprints": {
            "0": "be19497ff9c32c2a390dd38f5ae8bf36b69e81c290e99f0305d754ca5e4fd26b",
            "1": "416089e6.f622cf32.f1dfdea5.de031890.8b2d3351.ce109560.e4580e17.87dfd8cc.7656a3d1.f622cf32.f1dfdea5.de031890.bb61bed7.ce109560.7115c551.cf2855c8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/common/CustomLoginModule1.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 23,
                            "endLine": 23,
                            "startColumn": 52,
                            "endColumn": 67
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/NonCryptoHardcodedSecret/test",
          "ruleIndex": 23,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found hardcoded secret.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found hardcoded {0}.",
            "arguments": [
              "[secret](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/jca/security/DsWithElytronAuthContextTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 60,
                  "endLine": 60,
                  "startColumn": 53,
                  "endColumn": 65
                }
              }
            }
          ],
          "fingerprints": {
            "0": "61b713f259effc178de9530ce143962d1cde5b6a3693a6d7b7a53b2a2818e00a",
            "1": "416089e6.dd05ec30.3c7d90aa.de031890.db6769f0.ce109560.fef2f4be.87dfd8cc.7656a3d1.3fd79b36.3c7d90aa.de031890.db6769f0.ce109560.fef2f4be.87dfd8cc"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/jca/security/DsWithElytronAuthContextTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 60,
                            "endLine": 60,
                            "startColumn": 53,
                            "endColumn": 65
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 351,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/NonCryptoHardcodedSecret/test",
          "ruleIndex": 23,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found hardcoded secret.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found hardcoded {0}.",
            "arguments": [
              "[secret](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/common/CustomLoginModule2.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 21,
                  "startColumn": 53,
                  "endColumn": 69
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ea4e86094fd337366817cfa78b07970016b46260603550d9359e59d7dbe26122",
            "1": "416089e6.dd05ec30.3c7d90aa.de031890.8b2d3351.ce109560.cec0cfb6.53d564e4.7656a3d1.dd05ec30.1cb11e00.de031890.bb61bed7.ce109560.cec0cfb6.53d564e4"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/common/CustomLoginModule2.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 21,
                            "endLine": 21,
                            "startColumn": 53,
                            "endColumn": 69
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/NonCryptoHardcodedSecret/test",
          "ruleIndex": 23,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found hardcoded secret.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found hardcoded {0}.",
            "arguments": [
              "[secret](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/common/CustomLoginModule2.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 23,
                  "endLine": 23,
                  "startColumn": 52,
                  "endColumn": 67
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8a836e653de783adfe10e8e23cbd559fb27956de0b111569b1378b18d5608c29",
            "1": "b214e70b.dd05ec30.3c7d90aa.de031890.8b2d3351.ce109560.e4580e17.87dfd8cc.b214e70b.dd05ec30.1cb11e00.de031890.bb61bed7.ce109560.9fdc2ec0.73d57a4a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/common/CustomLoginModule2.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 23,
                            "endLine": 23,
                            "startColumn": 52,
                            "endColumn": 67
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/NonCryptoHardcodedSecret/test",
          "ruleIndex": 23,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found hardcoded secret.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found hardcoded {0}.",
            "arguments": [
              "[secret](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ejb/security/MixedSecurityAnnotationAuthorizationTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 138,
                  "endLine": 138,
                  "startColumn": 39,
                  "endColumn": 57
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9fddf99cf7ba4b6601195e8faf9dea4eb908fd935162bce3c36fdcc6ae6322b2",
            "1": "c90cb73f.1cbd3ff4.71a71d19.8b54d7fd.f3008258.dd62fee0.53c2ced7.54d46e25.c90cb73f.f7cf62fe.71a71d19.d6ab05b5.f3008258.dd62fee0.df26342c.f840adcb"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ejb/security/MixedSecurityAnnotationAuthorizationTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 138,
                            "endLine": 138,
                            "startColumn": 39,
                            "endColumn": 57
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/NonCryptoHardcodedSecret/test",
          "ruleIndex": 23,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found hardcoded secret.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found hardcoded {0}.",
            "arguments": [
              "[secret](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ejb/security/MixedSecurityAnnotationAuthorizationTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 198,
                  "endLine": 198,
                  "startColumn": 39,
                  "endColumn": 57
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7e3e4dc40a63ad9c0605de2c5e8e174ff2eb2f633323a6004efcbccf8a5961e7",
            "1": "c90cb73f.f7cf62fe.71a71d19.8b54d7fd.f3008258.dd62fee0.53c2ced7.54d46e25.c90cb73f.f7cf62fe.71a71d19.d6ab05b5.f3008258.dd62fee0.df26342c.f840adcb"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ejb/security/MixedSecurityAnnotationAuthorizationTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 198,
                            "endLine": 198,
                            "startColumn": 39,
                            "endColumn": 57
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/NonCryptoHardcodedSecret/test",
          "ruleIndex": 23,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found hardcoded secret.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found hardcoded {0}.",
            "arguments": [
              "[secret](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ejb/security/MixedSecurityAnnotationAuthorizationTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 244,
                  "endLine": 244,
                  "startColumn": 39,
                  "endColumn": 57
                }
              }
            }
          ],
          "fingerprints": {
            "0": "cc8ffcc600eae7ed5d75b9e0eafadeeb6ef18b9b43eb56475ce89d710abd38e7",
            "1": "c90cb73f.1cbd3ff4.71a71d19.8b54d7fd.f3008258.dd62fee0.53c2ced7.54d46e25.c90cb73f.f7cf62fe.71a71d19.d6ab05b5.f3008258.dd62fee0.df26342c.f840adcb"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ejb/security/MixedSecurityAnnotationAuthorizationTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 244,
                            "endLine": 244,
                            "startColumn": 39,
                            "endColumn": 57
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/NonCryptoHardcodedSecret/test",
          "ruleIndex": 23,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found hardcoded secret.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found hardcoded {0}.",
            "arguments": [
              "[secret](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ejb/security/MixedSecurityAnnotationAuthorizationTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 290,
                  "endLine": 290,
                  "startColumn": 39,
                  "endColumn": 57
                }
              }
            }
          ],
          "fingerprints": {
            "0": "dd48107653c8ba886d89ffe72a0c5ac9b4dc63303a6032d1e8b02a1a3a5d645e",
            "1": "c90cb73f.1cbd3ff4.71a71d19.8b54d7fd.f3008258.dd62fee0.53c2ced7.54d46e25.c90cb73f.f7cf62fe.71a71d19.d6ab05b5.f3008258.dd62fee0.df26342c.f840adcb"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ejb/security/MixedSecurityAnnotationAuthorizationTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 290,
                            "endLine": 290,
                            "startColumn": 39,
                            "endColumn": 57
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/NonCryptoHardcodedSecret/test",
          "ruleIndex": 23,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found hardcoded secret.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found hardcoded {0}.",
            "arguments": [
              "[secret](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ejb/security/MixedSecurityAnnotationAuthorizationTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 307,
                  "endLine": 307,
                  "startColumn": 39,
                  "endColumn": 57
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ad47c8e959e318185cc48d08c979b633b1bd6200614cf8e6ef09e31798c8200f",
            "1": "c90cb73f.1cbd3ff4.71a71d19.8b54d7fd.f3008258.dd62fee0.53c2ced7.54d46e25.c90cb73f.f7cf62fe.71a71d19.d6ab05b5.f3008258.dd62fee0.df26342c.f840adcb"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ejb/security/MixedSecurityAnnotationAuthorizationTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 307,
                            "endLine": 307,
                            "startColumn": 39,
                            "endColumn": 57
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/TooPermissiveHostnameVerifier/test",
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The verify method always returns true, which means that any hostname is accepted. Such behaviour is insecure.",
            "markdown": "The {0} method always returns {1}, which means that any hostname is accepted. Such behaviour is insecure.",
            "arguments": [
              "[verify](0)",
              "[true](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/handlers/RequestDumpingHandlerTestImpl.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 355,
                  "endLine": 355,
                  "startColumn": 32,
                  "endColumn": 38
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d294470c8765b5570e585c9bb29974ddb7d96cae3ce265788cc624d98f854612",
            "1": "3577ba7a.528e35bc.df604cdb.e22980a8.0681ed2b.eacd09e2.f323b56d.9c4228d3.1532001e.fc584743.df604cdb.e22980a8.0681ed2b.eacd09e2.f323b56d.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/handlers/RequestDumpingHandlerTestImpl.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 355,
                            "endLine": 355,
                            "startColumn": 32,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/handlers/RequestDumpingHandlerTestImpl.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 356,
                            "endLine": 356,
                            "startColumn": 28,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureHash",
          "ruleIndex": 25,
          "level": "warning",
          "message": {
            "text": "The md5 hash (used in java.security.MessageDigest.getInstance) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The {0} hash (used in {1}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[md5](0)",
              "[java.security.MessageDigest.getInstance](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "jdr/jboss-as-jdr/src/main/java/org/jboss/as/jdr/commands/JarCheck.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 60,
                  "endLine": 60,
                  "startColumn": 33,
                  "endColumn": 58
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ace66319b12a8a3f775b1bffcf20c824714552ba59cba6fd392171beeb646d94",
            "1": "19689298.798840ad.55bc2058.5e6ab657.16e673ac.b70401ce.c1674761.54d46e25.19689298.798840ad.55bc2058.5e6ab657.16e673ac.b70401ce.c1674761.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "jdr/jboss-as-jdr/src/main/java/org/jboss/as/jdr/commands/JarCheck.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 60,
                            "endLine": 60,
                            "startColumn": 59,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "jdr/jboss-as-jdr/src/main/java/org/jboss/as/jdr/commands/JarCheck.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 60,
                            "endLine": 60,
                            "startColumn": 33,
                            "endColumn": 58
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 551,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureHash",
          "ruleIndex": 25,
          "level": "warning",
          "message": {
            "text": "The MD5 hash (used in java.security.MessageDigest.getInstance) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The {0} hash (used in {1}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[MD5](0)",
              "[java.security.MessageDigest.getInstance](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ee-9/source-transform/undertow/target/generated-sources/transformed/org/wildfly/extension/undertow/Server.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 182,
                  "endLine": 182,
                  "startColumn": 42,
                  "endColumn": 67
                }
              }
            }
          ],
          "fingerprints": {
            "0": "236d5728a201d6b0f62f1829affcd0465585a1b685235a8d34455c5438a0d38a",
            "1": "19689298.7797192f.e99130b3.82e76c82.408180c7.f53a5558.0a026dee.54d46e25.19689298.7797192f.e99130b3.82e76c82.408180c7.f53a5558.0a026dee.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ee-9/source-transform/undertow/target/generated-sources/transformed/org/wildfly/extension/undertow/Server.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 182,
                            "endLine": 182,
                            "startColumn": 68,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ee-9/source-transform/undertow/target/generated-sources/transformed/org/wildfly/extension/undertow/Server.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 182,
                            "endLine": 182,
                            "startColumn": 42,
                            "endColumn": 67
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 501,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureHash/test",
          "ruleIndex": 26,
          "level": "note",
          "message": {
            "text": "The MD5 hash (used in java.security.MessageDigest.getInstance) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The {0} hash (used in {1}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[MD5](0)",
              "[java.security.MessageDigest.getInstance](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/security/common/Utils.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 236,
                  "endLine": 236,
                  "startColumn": 18,
                  "endColumn": 43
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5071aac4a2027450c1a6e3aebe14080346de6c5291c76e73a1d02dc953ad3178",
            "1": "9faa7dab.1cbd3ff4.33fa5dbe.e22980a8.98fa8f9f.c80ba7fb.0a026dee.54d46e25.9faa7dab.ad74e40f.33fa5dbe.e22980a8.f0e1baa5.c80ba7fb.91fde10a.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/security/common/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 230,
                            "endLine": 230,
                            "startColumn": 72,
                            "endColumn": 77
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/security/common/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 236,
                            "endLine": 236,
                            "startColumn": 18,
                            "endColumn": 43
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureHash/test",
          "ruleIndex": 26,
          "level": "note",
          "message": {
            "text": "The MD5 hash (used in java.security.MessageDigest.getInstance) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The {0} hash (used in {1}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[MD5](0)",
              "[java.security.MessageDigest.getInstance](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ee-9/source-transform/undertow/target/generated-test-sources/transformed/org/wildfly/extension/undertow/ServerServiceTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 163,
                  "endLine": 163,
                  "startColumn": 34,
                  "endColumn": 59
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ba9389372485164e52a71d34bef58f80a660a3bfcf86c7484b8ca098437d2455",
            "1": "19689298.7797192f.e99130b3.82e76c82.408180c7.f53a5558.0a026dee.54d46e25.19689298.7797192f.e99130b3.82e76c82.408180c7.f53a5558.0a026dee.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ee-9/source-transform/undertow/target/generated-test-sources/transformed/org/wildfly/extension/undertow/ServerServiceTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 163,
                            "endLine": 163,
                            "startColumn": 60,
                            "endColumn": 65
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ee-9/source-transform/undertow/target/generated-test-sources/transformed/org/wildfly/extension/undertow/ServerServiceTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 163,
                            "endLine": 163,
                            "startColumn": 34,
                            "endColumn": 59
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureHash/test",
          "ruleIndex": 26,
          "level": "note",
          "message": {
            "text": "The MD5 hash (used in java.security.MessageDigest.getInstance) is insecure. Consider changing it to a secure hash algorithm",
            "markdown": "The {0} hash (used in {1}) is insecure. Consider changing it to a secure hash algorithm",
            "arguments": [
              "[MD5](0)",
              "[java.security.MessageDigest.getInstance](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ee-9/source-transform/undertow/target/generated-test-sources/transformed/org/wildfly/extension/undertow/ServerServiceTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 183,
                  "endLine": 183,
                  "startColumn": 34,
                  "endColumn": 59
                }
              }
            }
          ],
          "fingerprints": {
            "0": "abe8ffcfa0b53e166b5a0645bc9c9f2073a834df9e9e00fa5b7dc4205fb70f56",
            "1": "19689298.7797192f.e99130b3.82e76c82.408180c7.f53a5558.0a026dee.54d46e25.19689298.7797192f.e99130b3.82e76c82.408180c7.f53a5558.0a026dee.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ee-9/source-transform/undertow/target/generated-test-sources/transformed/org/wildfly/extension/undertow/ServerServiceTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 183,
                            "endLine": 183,
                            "startColumn": 60,
                            "endColumn": 65
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ee-9/source-transform/undertow/target/generated-test-sources/transformed/org/wildfly/extension/undertow/ServerServiceTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 183,
                            "endLine": 183,
                            "startColumn": 34,
                            "endColumn": 59
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/WebCookieMissesCallToSetHttpOnly/test",
          "ruleIndex": 27,
          "level": "note",
          "message": {
            "text": "Cookie misses a call to setHttpOnly. Set the HttpOnly flag to true to protect the cookie from possible malicious code on client side.",
            "markdown": "Cookie misses a call to setHttpOnly. Set the HttpOnly flag to true to protect the cookie from possible malicious code on client side.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/web/sso/SSOTestBase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 329,
                  "endLine": 329,
                  "startColumn": 38,
                  "endColumn": 55
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3d684fb07288d5faaa18868b418a1f99653eff0bad200d18fb0236321828df12",
            "1": "19689298.c85778d8.865c6eb7.6c52ae28.3d1b53a8.8753bfc7.ac8d0de9.203bd690.92762d9a.4f54314a.33fa5dbe.2ebce711.8e2527f2.7fda7c5e.ac8d0de9.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/web/sso/SSOTestBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 329,
                            "endLine": 329,
                            "startColumn": 38,
                            "endColumn": 55
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/WebCookieMissesCallToSetHttpOnly/test",
          "ruleIndex": 27,
          "level": "note",
          "message": {
            "text": "Cookie misses a call to setHttpOnly. Set the HttpOnly flag to true to protect the cookie from possible malicious code on client side.",
            "markdown": "Cookie misses a call to setHttpOnly. Set the HttpOnly flag to true to protect the cookie from possible malicious code on client side.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/CookieReadServlet.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 72,
                  "endLine": 72,
                  "startColumn": 32,
                  "endColumn": 38
                }
              }
            }
          ],
          "fingerprints": {
            "0": "88d63b3689229b30bdf5676524707e0f43a802989f79746fca40565d42de4f13",
            "1": "ac4e7c8b.c4c6285f.291583ec.6c52ae28.6bacdef5.b2af1c2f.47ef669e.3cab4ebf.c9e06c88.c9e261a9.a224ef38.e22980a8.f0e1baa5.95df3f17.dc0c5202.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/CookieReadServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 72,
                            "endLine": 72,
                            "startColumn": 32,
                            "endColumn": 38
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/WebCookieMissesCallToSetHttpOnly/test",
          "ruleIndex": 27,
          "level": "note",
          "message": {
            "text": "Cookie misses a call to setHttpOnly. Set the HttpOnly flag to true to protect the cookie from possible malicious code on client side.",
            "markdown": "Cookie misses a call to setHttpOnly. Set the HttpOnly flag to true to protect the cookie from possible malicious code on client side.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/CookieReadServlet.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 73,
                  "endLine": 73,
                  "startColumn": 32,
                  "endColumn": 38
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4943f696dcaee2ddab77653aa2ae6a79cb0090707008486aebaae1aad0c170e4",
            "1": "ac4e7c8b.c4c6285f.de9947ee.6c52ae28.a72c5a7f.4cedfdfe.47ef669e.4a86081e.c9e06c88.c9e261a9.a224ef38.e22980a8.f0e1baa5.95df3f17.dc0c5202.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/CookieReadServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 73,
                            "endLine": 73,
                            "startColumn": 32,
                            "endColumn": 38
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/WebCookieMissesCallToSetHttpOnly/test",
          "ruleIndex": 27,
          "level": "note",
          "message": {
            "text": "Cookie misses a call to setHttpOnly. Set the HttpOnly flag to true to protect the cookie from possible malicious code on client side.",
            "markdown": "Cookie misses a call to setHttpOnly. Set the HttpOnly flag to true to protect the cookie from possible malicious code on client side.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/SimpleCookieServlet.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 59,
                  "endLine": 59,
                  "startColumn": 29,
                  "endColumn": 35
                }
              }
            }
          ],
          "fingerprints": {
            "0": "59f4600b2888c22c2eea47c18e94f183e84bdddec9eb84699603ba637593a8ba",
            "1": "19689298.b2b6b83e.59997255.6c52ae28.4483622f.99961f89.cb55f4a2.c50f08e7.f9545bfc.b2b6b83e.59997255.e22980a8.f0e1baa5.99961f89.cb55f4a2.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/SimpleCookieServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 29,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/WebCookieMissesCallToSetHttpOnly/test",
          "ruleIndex": 27,
          "level": "note",
          "message": {
            "text": "Cookie misses a call to setHttpOnly. Set the HttpOnly flag to true to protect the cookie from possible malicious code on client side.",
            "markdown": "Cookie misses a call to setHttpOnly. Set the HttpOnly flag to true to protect the cookie from possible malicious code on client side.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/CookieServlet.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 57,
                  "endLine": 57,
                  "startColumn": 29,
                  "endColumn": 35
                }
              }
            }
          ],
          "fingerprints": {
            "0": "381e5ae6b731d9b58380f9606b3807db3cab7428c3cee1112ea799865c613f97",
            "1": "19689298.b2b6b83e.59997255.6c52ae28.4483622f.99961f89.cb55f4a2.c50f08e7.f9545bfc.b2b6b83e.59997255.e22980a8.f0e1baa5.99961f89.cb55f4a2.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/CookieServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 57,
                            "endLine": 57,
                            "startColumn": 29,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/WebCookieMissesCallToSetHttpOnly/test",
          "ruleIndex": 27,
          "level": "note",
          "message": {
            "text": "Cookie misses a call to setHttpOnly. Set the HttpOnly flag to true to protect the cookie from possible malicious code on client side.",
            "markdown": "Cookie misses a call to setHttpOnly. Set the HttpOnly flag to true to protect the cookie from possible malicious code on client side.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/CookieServlet.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 61,
                  "endLine": 61,
                  "startColumn": 22,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "11627d4043da1fbd3a1b3f9653b24da3608f1a8fe193a71f81f0b34519d0b7b9",
            "1": "ac4e7c8b.93eb5886.33fa5dbe.6c52ae28.cfd433b6.7fda7c5e.47ef669e.54d46e25.f9545bfc.93eb5886.72733c23.e22980a8.f0e1baa5.7fda7c5e.5ab84f02.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/CookieServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 61,
                            "endLine": 61,
                            "startColumn": 22,
                            "endColumn": 28
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/WebCookieMissesCallToSetHttpOnly/test",
          "ruleIndex": 27,
          "level": "note",
          "message": {
            "text": "Cookie misses a call to setHttpOnly. Set the HttpOnly flag to true to protect the cookie from possible malicious code on client side.",
            "markdown": "Cookie misses a call to setHttpOnly. Set the HttpOnly flag to true to protect the cookie from possible malicious code on client side.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/CookieServlet.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74,
                  "startColumn": 22,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e5a13f188cf52eb1249095874a86d1c5fa77a5f39fdd53757a104edf452163d8",
            "1": "1dbc0afb.93eb5886.33fa5dbe.6fc6c277.4a9c8cbc.7fda7c5e.47ef669e.54d46e25.732eeeb2.b2b6b83e.59997255.6fc6c277.f1d9f854.7fda7c5e.47ef669e.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/CookieServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 74,
                            "endLine": 74,
                            "startColumn": 22,
                            "endColumn": 28
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/WebCookieMissesCallToSetHttpOnly/test",
          "ruleIndex": 27,
          "level": "note",
          "message": {
            "text": "Cookie misses a call to setHttpOnly. Set the HttpOnly flag to true to protect the cookie from possible malicious code on client side.",
            "markdown": "Cookie misses a call to setHttpOnly. Set the HttpOnly flag to true to protect the cookie from possible malicious code on client side.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/CookieServlet.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 78,
                  "endLine": 78,
                  "startColumn": 22,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5b510aae4979d705b97c66c0f658f83f71d31373865f4bd85ba70326ac72caab",
            "1": "ac4e7c8b.93eb5886.33fa5dbe.6c52ae28.4a9c8cbc.7fda7c5e.47ef669e.54d46e25.f9545bfc.93eb5886.72733c23.e22980a8.f0e1baa5.7fda7c5e.5ab84f02.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/CookieServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 78,
                            "endLine": 78,
                            "startColumn": 22,
                            "endColumn": 28
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/WebCookieMissesCallToSetHttpOnly/test",
          "ruleIndex": 27,
          "level": "note",
          "message": {
            "text": "Cookie misses a call to setHttpOnly. Set the HttpOnly flag to true to protect the cookie from possible malicious code on client side.",
            "markdown": "Cookie misses a call to setHttpOnly. Set the HttpOnly flag to true to protect the cookie from possible malicious code on client side.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/CookieServlet.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 81,
                  "endLine": 81,
                  "startColumn": 22,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f2968b947f5b888264bf9270a45eae82c18a841c9232a1fa6ff6ce682ed1b91a",
            "1": "ac4e7c8b.93eb5886.33fa5dbe.6c52ae28.12aa18c2.7fda7c5e.2eeb3790.331aa3f0.732eeeb2.b2b6b83e.59997255.e22980a8.12aa18c2.7fda7c5e.2eeb3790.331aa3f0"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/CookieServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 81,
                            "endLine": 81,
                            "startColumn": 22,
                            "endColumn": 28
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/WebCookieMissesCallToSetHttpOnly/test",
          "ruleIndex": 27,
          "level": "note",
          "message": {
            "text": "Cookie misses a call to setHttpOnly. Set the HttpOnly flag to true to protect the cookie from possible malicious code on client side.",
            "markdown": "Cookie misses a call to setHttpOnly. Set the HttpOnly flag to true to protect the cookie from possible malicious code on client side.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/DefaultCookieVersionTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 137,
                  "endLine": 137,
                  "startColumn": 40,
                  "endColumn": 57
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1cc2b87d7e5fdbdb585179287e4336cfa73c1b961d135bb321355edd66c4602e",
            "1": "19689298.b2b6b83e.59997255.6c52ae28.3d1b53a8.99961f89.ac8d0de9.c50f08e7.92762d9a.b2b6b83e.59997255.e22980a8.6b8e317b.99961f89.ac8d0de9.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/DefaultCookieVersionTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 137,
                            "endLine": 137,
                            "startColumn": 40,
                            "endColumn": 57
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/WebCookieMissesCallToSetSecure",
          "ruleIndex": 28,
          "level": "warning",
          "message": {
            "text": "Cookie misses a call to setSecure. Set the Secure flag to true to protect the cookie from man-in-the-middle attacks.",
            "markdown": "Cookie misses a call to setSecure. Set the Secure flag to true to protect the cookie from man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ee-9/source-transform/undertow/target/generated-sources/transformed/org/wildfly/extension/undertow/RemoteHttpInvokerService.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 55,
                  "startColumn": 65,
                  "endColumn": 75
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7fb901267d2f93cc153eb59922addd5996ccd3ea2e3de76b911e2f6fe80329b3",
            "1": "ac4e7c8b.42f20912.fb7b7a0a.6c52ae28.6bacdef5.6c564a64.388a131d.a0332ecc.ac4e7c8b.c9d69798.fb7b7a0a.73c1d9dd.c6f7747a.7fda7c5e.388a131d.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ee-9/source-transform/undertow/target/generated-sources/transformed/org/wildfly/extension/undertow/RemoteHttpInvokerService.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 65,
                            "endColumn": 75
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 551,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/WebCookieMissesCallToSetSecure",
          "ruleIndex": 28,
          "level": "warning",
          "message": {
            "text": "Cookie misses a call to setSecure. Set the Secure flag to true to protect the cookie from man-in-the-middle attacks.",
            "markdown": "Cookie misses a call to setSecure. Set the Secure flag to true to protect the cookie from man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ee-9/source-transform/undertow/target/generated-sources/transformed/org/wildfly/extension/undertow/HttpInvokerHostService.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 100,
                  "endLine": 100,
                  "startColumn": 34,
                  "endColumn": 44
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8461b617215efd9b48822173db392727563a27fdcd515404769f70885cd12042",
            "1": "63c12074.93eb5886.fb7b7a0a.6c52ae28.4a9c8cbc.7fda7c5e.388a131d.54d46e25.63c12074.93eb5886.fb7b7a0a.e22980a8.d8a9f4f7.7fda7c5e.388a131d.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ee-9/source-transform/undertow/target/generated-sources/transformed/org/wildfly/extension/undertow/HttpInvokerHostService.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 34,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 551,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/WebCookieMissesCallToSetSecure",
          "ruleIndex": 28,
          "level": "warning",
          "message": {
            "text": "Cookie misses a call to setSecure. Set the Secure flag to true to protect the cookie from man-in-the-middle attacks.",
            "markdown": "Cookie misses a call to setSecure. Set the Secure flag to true to protect the cookie from man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "undertow/src/main/java/org/wildfly/extension/undertow/RemoteHttpInvokerService.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 55,
                  "startColumn": 65,
                  "endColumn": 75
                }
              }
            }
          ],
          "fingerprints": {
            "0": "53dc482138575b01821c96086712aa770386a3959e3c677e9e50b16e55202c39",
            "1": "ac4e7c8b.42f20912.fb7b7a0a.6c52ae28.6bacdef5.6c564a64.388a131d.a0332ecc.ac4e7c8b.c9d69798.fb7b7a0a.73c1d9dd.c6f7747a.7fda7c5e.388a131d.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "undertow/src/main/java/org/wildfly/extension/undertow/RemoteHttpInvokerService.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 65,
                            "endColumn": 75
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 551,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureCipher/test",
          "ruleIndex": 29,
          "level": "note",
          "message": {
            "text": "The DES cipher used in javax.crypto.KeyGenerator.getInstance (with algorithm string \"DES\") is insecure. Consider using AES.",
            "markdown": "The DES cipher used in {0} is insecure. Consider using AES.",
            "arguments": [
              "[javax.crypto.KeyGenerator.getInstance (with algorithm string \"DES\")](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/bc/BouncyCastleModuleTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 92,
                  "endLine": 92,
                  "startColumn": 37,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "28ba5288a9e881cc815d08c4783e48f7ffab9b799762fa61a140e01a5f0189e1",
            "1": "19689298.da3543c9.2b5643ec.5a6f9c24.71b13a29.f940a352.2b65e39f.54d46e25.19689298.da3543c9.2b5643ec.5a6f9c24.71b13a29.f940a352.df7e59ba.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/bc/BouncyCastleModuleTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 92,
                            "endLine": 92,
                            "startColumn": 37,
                            "endColumn": 61
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/InsecureCipher/test",
          "ruleIndex": 29,
          "level": "note",
          "message": {
            "text": "The DES cipher used in javax.crypto.Cipher.getInstance (with algorithm string \"DES/ECB/PKCS5Padding\") is insecure. Consider using AES.",
            "markdown": "The DES cipher used in {0} is insecure. Consider using AES.",
            "arguments": [
              "[javax.crypto.Cipher.getInstance (with algorithm string \"DES/ECB/PKCS5Padding\")](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/bc/BouncyCastleModuleTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 98,
                  "endLine": 98,
                  "startColumn": 21,
                  "endColumn": 39
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0d4185e078219bacdef23917f07a5207349a36ddd05e03752c927830bc96874f",
            "1": "0cedcad0.ed60c8fe.33fa5dbe.e22980a8.e5594575.7fda7c5e.10481169.54d46e25.0cedcad0.ed60c8fe.33fa5dbe.e22980a8.e5594575.7fda7c5e.10481169.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/bc/BouncyCastleModuleTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 98,
                            "endLine": 98,
                            "startColumn": 21,
                            "endColumn": 39
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/WebCookieMissesCallToSetSecure/test",
          "ruleIndex": 30,
          "level": "note",
          "message": {
            "text": "Cookie misses a call to setSecure. Set the Secure flag to true to protect the cookie from man-in-the-middle attacks.",
            "markdown": "Cookie misses a call to setSecure. Set the Secure flag to true to protect the cookie from man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/web/sso/SSOTestBase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 329,
                  "endLine": 329,
                  "startColumn": 38,
                  "endColumn": 55
                }
              }
            }
          ],
          "fingerprints": {
            "0": "aaacdb535ccb6f620d3e2431d145b354cdadb370e08ffb4d479739a99c40198f",
            "1": "19689298.c85778d8.865c6eb7.6c52ae28.3d1b53a8.8753bfc7.ac8d0de9.203bd690.92762d9a.4f54314a.33fa5dbe.2ebce711.8e2527f2.7fda7c5e.ac8d0de9.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/web/sso/SSOTestBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 329,
                            "endLine": 329,
                            "startColumn": 38,
                            "endColumn": 55
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/WebCookieMissesCallToSetSecure/test",
          "ruleIndex": 30,
          "level": "note",
          "message": {
            "text": "Cookie misses a call to setSecure. Set the Secure flag to true to protect the cookie from man-in-the-middle attacks.",
            "markdown": "Cookie misses a call to setSecure. Set the Secure flag to true to protect the cookie from man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/CookieReadServlet.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 72,
                  "endLine": 72,
                  "startColumn": 32,
                  "endColumn": 38
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f2dfc20c1dae6c70d825d42d66b9ea86daee2cbe9f43c8c8ba26bb67b423e3e3",
            "1": "ac4e7c8b.c4c6285f.291583ec.6c52ae28.6bacdef5.b2af1c2f.47ef669e.3cab4ebf.c9e06c88.c9e261a9.a224ef38.e22980a8.f0e1baa5.95df3f17.dc0c5202.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/CookieReadServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 72,
                            "endLine": 72,
                            "startColumn": 32,
                            "endColumn": 38
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/WebCookieMissesCallToSetSecure/test",
          "ruleIndex": 30,
          "level": "note",
          "message": {
            "text": "Cookie misses a call to setSecure. Set the Secure flag to true to protect the cookie from man-in-the-middle attacks.",
            "markdown": "Cookie misses a call to setSecure. Set the Secure flag to true to protect the cookie from man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/CookieReadServlet.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 73,
                  "endLine": 73,
                  "startColumn": 32,
                  "endColumn": 38
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d453349c301a8bc5f7694ec6d9883a2ee9a2e2f9207ded67b8fa2203706cd2d2",
            "1": "ac4e7c8b.c4c6285f.de9947ee.6c52ae28.a72c5a7f.4cedfdfe.47ef669e.4a86081e.c9e06c88.c9e261a9.a224ef38.e22980a8.f0e1baa5.95df3f17.dc0c5202.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/CookieReadServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 73,
                            "endLine": 73,
                            "startColumn": 32,
                            "endColumn": 38
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/WebCookieMissesCallToSetSecure/test",
          "ruleIndex": 30,
          "level": "note",
          "message": {
            "text": "Cookie misses a call to setSecure. Set the Secure flag to true to protect the cookie from man-in-the-middle attacks.",
            "markdown": "Cookie misses a call to setSecure. Set the Secure flag to true to protect the cookie from man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/SimpleCookieServlet.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 59,
                  "endLine": 59,
                  "startColumn": 29,
                  "endColumn": 35
                }
              }
            }
          ],
          "fingerprints": {
            "0": "86d4729706e35380c5891f904d67c6d00a7bb0499f9c6369e50ab079798f23fb",
            "1": "19689298.b2b6b83e.59997255.6c52ae28.4483622f.99961f89.cb55f4a2.c50f08e7.f9545bfc.b2b6b83e.59997255.e22980a8.f0e1baa5.99961f89.cb55f4a2.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/SimpleCookieServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 29,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/WebCookieMissesCallToSetSecure/test",
          "ruleIndex": 30,
          "level": "note",
          "message": {
            "text": "Cookie misses a call to setSecure. Set the Secure flag to true to protect the cookie from man-in-the-middle attacks.",
            "markdown": "Cookie misses a call to setSecure. Set the Secure flag to true to protect the cookie from man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/CookieServlet.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 57,
                  "endLine": 57,
                  "startColumn": 29,
                  "endColumn": 35
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c69e4d49492b84706edfafb9e272353eab1cf1327d36a13d959b9a64d04e41b2",
            "1": "19689298.b2b6b83e.59997255.6c52ae28.4483622f.99961f89.cb55f4a2.c50f08e7.f9545bfc.b2b6b83e.59997255.e22980a8.f0e1baa5.99961f89.cb55f4a2.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/CookieServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 57,
                            "endLine": 57,
                            "startColumn": 29,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/WebCookieMissesCallToSetSecure/test",
          "ruleIndex": 30,
          "level": "note",
          "message": {
            "text": "Cookie misses a call to setSecure. Set the Secure flag to true to protect the cookie from man-in-the-middle attacks.",
            "markdown": "Cookie misses a call to setSecure. Set the Secure flag to true to protect the cookie from man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/CookieServlet.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 61,
                  "endLine": 61,
                  "startColumn": 22,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5652df58ccdc2c607d0e6f5de99dcb0a50a36f3f1d930aabea15a7e0d347d978",
            "1": "ac4e7c8b.93eb5886.33fa5dbe.6c52ae28.cfd433b6.7fda7c5e.47ef669e.54d46e25.f9545bfc.93eb5886.72733c23.e22980a8.f0e1baa5.7fda7c5e.5ab84f02.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/CookieServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 61,
                            "endLine": 61,
                            "startColumn": 22,
                            "endColumn": 28
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/WebCookieMissesCallToSetSecure/test",
          "ruleIndex": 30,
          "level": "note",
          "message": {
            "text": "Cookie misses a call to setSecure. Set the Secure flag to true to protect the cookie from man-in-the-middle attacks.",
            "markdown": "Cookie misses a call to setSecure. Set the Secure flag to true to protect the cookie from man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/CookieServlet.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74,
                  "startColumn": 22,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f43c9878448cb9da2056840b1f202e112c2c71e4a7d7b4dd1a32d5aba786fafd",
            "1": "1dbc0afb.93eb5886.33fa5dbe.6fc6c277.4a9c8cbc.7fda7c5e.47ef669e.54d46e25.732eeeb2.b2b6b83e.59997255.6fc6c277.f1d9f854.7fda7c5e.47ef669e.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/CookieServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 74,
                            "endLine": 74,
                            "startColumn": 22,
                            "endColumn": 28
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/WebCookieMissesCallToSetSecure/test",
          "ruleIndex": 30,
          "level": "note",
          "message": {
            "text": "Cookie misses a call to setSecure. Set the Secure flag to true to protect the cookie from man-in-the-middle attacks.",
            "markdown": "Cookie misses a call to setSecure. Set the Secure flag to true to protect the cookie from man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/CookieServlet.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 78,
                  "endLine": 78,
                  "startColumn": 22,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "86c08420f2f8cfa359ac9c32c7c50bed36e11151a07a8e4e3682353f4d0807e0",
            "1": "ac4e7c8b.93eb5886.33fa5dbe.6c52ae28.4a9c8cbc.7fda7c5e.47ef669e.54d46e25.f9545bfc.93eb5886.72733c23.e22980a8.f0e1baa5.7fda7c5e.5ab84f02.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/CookieServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 78,
                            "endLine": 78,
                            "startColumn": 22,
                            "endColumn": 28
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/WebCookieMissesCallToSetSecure/test",
          "ruleIndex": 30,
          "level": "note",
          "message": {
            "text": "Cookie misses a call to setSecure. Set the Secure flag to true to protect the cookie from man-in-the-middle attacks.",
            "markdown": "Cookie misses a call to setSecure. Set the Secure flag to true to protect the cookie from man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/CookieServlet.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 81,
                  "endLine": 81,
                  "startColumn": 22,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4fa6607bf6a7357757405052d275ac28838f171eb0fb27b70167399b6ad00337",
            "1": "ac4e7c8b.93eb5886.33fa5dbe.6c52ae28.12aa18c2.7fda7c5e.2eeb3790.331aa3f0.732eeeb2.b2b6b83e.59997255.e22980a8.12aa18c2.7fda7c5e.2eeb3790.331aa3f0"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/CookieServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 81,
                            "endLine": 81,
                            "startColumn": 22,
                            "endColumn": 28
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/WebCookieMissesCallToSetSecure/test",
          "ruleIndex": 30,
          "level": "note",
          "message": {
            "text": "Cookie misses a call to setSecure. Set the Secure flag to true to protect the cookie from man-in-the-middle attacks.",
            "markdown": "Cookie misses a call to setSecure. Set the Secure flag to true to protect the cookie from man-in-the-middle attacks.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/DefaultCookieVersionTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 137,
                  "endLine": 137,
                  "startColumn": 40,
                  "endColumn": 57
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fb1aaab44e745ac2d8e51a8b0a77c1fea0e790e9cdfc35b0b8d214e6861f6f08",
            "1": "19689298.b2b6b83e.59997255.6c52ae28.3d1b53a8.99961f89.ac8d0de9.c50f08e7.92762d9a.b2b6b83e.59997255.e22980a8.6b8e317b.99961f89.ac8d0de9.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/cookie/DefaultCookieVersionTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 137,
                            "endLine": 137,
                            "startColumn": 40,
                            "endColumn": 57
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/RemotingLoginModuleUseNewClientCertTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 220,
                  "endLine": 220,
                  "startColumn": 9,
                  "endColumn": 31
                }
              }
            }
          ],
          "fingerprints": {
            "0": "581ed51bcf021cbf31850f8a213703d95420a7dd6df7ecc431e1a6cde18579ff",
            "1": "19689298.f6eebaf2.fc7d5400.d6ab05b5.079767d0.3965381b.1854910d.54d46e25.19689298.f6eebaf2.fc7d5400.de031890.079767d0.ce109560.1854910d.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/RemotingLoginModuleUseNewClientCertTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 118,
                            "endLine": 118,
                            "startColumn": 53,
                            "endColumn": 61
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/RemotingLoginModuleUseNewClientCertTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 428,
                  "endLine": 428,
                  "startColumn": 13,
                  "endColumn": 33
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6f1a733a3227bc80fec6fc42401e269c9156bcf6994a07e81f1d80c9503757fd",
            "1": "4e696cbd.61528139.9f117aa1.e22980a8.ade640d7.e61fb9f8.6a222d4e.54d46e25.19689298.f6eebaf2.075f7928.383ea08e.408180c7.ce109560.6a222d4e.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/RemotingLoginModuleUseNewClientCertTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 118,
                            "endLine": 118,
                            "startColumn": 53,
                            "endColumn": 61
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/RemotingLoginModuleUseNewClientCertTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 434,
                  "endLine": 434,
                  "startColumn": 13,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0dc7a5d27b905f531d7609e9fbea414b0fece1669fbb9a9c46f0d7be8ff7e305",
            "1": "c0846cd0.f6eebaf2.9f117aa1.d6ab05b5.ad94e2e6.e61fb9f8.6a222d4e.54d46e25.19689298.f6eebaf2.075f7928.383ea08e.408180c7.ce109560.6a222d4e.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/RemotingLoginModuleUseNewClientCertTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 118,
                            "endLine": 118,
                            "startColumn": 53,
                            "endColumn": 61
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/RemotingLoginModuleUseNewClientCertTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 449,
                  "endLine": 449,
                  "startColumn": 17,
                  "endColumn": 33
                }
              }
            }
          ],
          "fingerprints": {
            "0": "52ee51f867738e53fc8168976d6a4732e7386650b4d880b5249d32a4f2eadd0a",
            "1": "c0846cd0.f6eebaf2.33fa5dbe.d6ab05b5.06193084.987d5477.86be49a8.54d46e25.c0846cd0.4250572c.075f7928.383ea08e.06193084.987d5477.6d877eaa.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/RemotingLoginModuleUseNewClientCertTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 118,
                            "endLine": 118,
                            "startColumn": 53,
                            "endColumn": 61
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/RemotingLoginModuleTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 220,
                  "endLine": 220,
                  "startColumn": 9,
                  "endColumn": 31
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6c7746d6b54787613a2f9c31666137d5240afffe1c7b81b5828e68f1fd09f23c",
            "1": "19689298.f6eebaf2.fc7d5400.d6ab05b5.079767d0.3965381b.1854910d.54d46e25.19689298.f6eebaf2.fc7d5400.de031890.079767d0.ce109560.1854910d.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/RemotingLoginModuleTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 117,
                            "endLine": 117,
                            "startColumn": 53,
                            "endColumn": 61
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/RemotingLoginModuleTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 427,
                  "endLine": 427,
                  "startColumn": 13,
                  "endColumn": 33
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5b6ad3acdc3f792fe75990d0e6a9d54891119206d64a58176c95fbf93e17152b",
            "1": "4e696cbd.61528139.9f117aa1.e22980a8.ade640d7.e61fb9f8.6a222d4e.54d46e25.19689298.f6eebaf2.075f7928.383ea08e.408180c7.ce109560.6a222d4e.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/RemotingLoginModuleTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 117,
                            "endLine": 117,
                            "startColumn": 53,
                            "endColumn": 61
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/RemotingLoginModuleTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 433,
                  "endLine": 433,
                  "startColumn": 13,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9a1cc16d354e89d254e0c6b18cce4feb64fb65ed3fb8fbf1cd3f5ea26019fa80",
            "1": "c0846cd0.f6eebaf2.9f117aa1.d6ab05b5.ad94e2e6.e61fb9f8.6a222d4e.54d46e25.19689298.f6eebaf2.075f7928.383ea08e.408180c7.ce109560.6a222d4e.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/RemotingLoginModuleTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 117,
                            "endLine": 117,
                            "startColumn": 53,
                            "endColumn": 61
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/RemotingLoginModuleTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 448,
                  "endLine": 448,
                  "startColumn": 17,
                  "endColumn": 33
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2130b22bc24a45f75186f1dcb6b287b68d7df93783e1781a80205a516ce0375e",
            "1": "c0846cd0.f6eebaf2.33fa5dbe.d6ab05b5.06193084.987d5477.86be49a8.54d46e25.c0846cd0.4250572c.075f7928.383ea08e.06193084.987d5477.6d877eaa.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/RemotingLoginModuleTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 117,
                            "endLine": 117,
                            "startColumn": 53,
                            "endColumn": 61
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/deployment/jcedeployment/ControllerServlet.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 64,
                  "endLine": 64,
                  "startColumn": 17,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "65bec2852832d5e46a87bfa200a718e9c1d23cb3e4dcf0629c1547213bae067a",
            "1": "19689298.83dbfe52.075f7928.383ea08e.d31a8364.e2f0b62f.bae646e8.54d46e25.19689298.7797192f.075f7928.383ea08e.408180c7.36f21a0e.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/deployment/jcedeployment/ControllerServlet.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 64,
                            "endLine": 64,
                            "startColumn": 35,
                            "endColumn": 45
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/security/tg/TransportGuaranteeTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 167,
                  "endLine": 167,
                  "startColumn": 21,
                  "endColumn": 48
                }
              }
            }
          ],
          "fingerprints": {
            "0": "14ebce14647d233e47f6413ed8f0ca46f19d66f336469250d4e0fe17758fee8c",
            "1": "3ad43fde.26f8faaf.70b7bd66.6f0c77ab.e3cf5d19.b3d278da.1d5bb634.52d20a2f.e6fcc0e0.f907d865.70b7bd66.8415ef30.0681ed2b.7fda7c5e.7f08e1ab.53857506"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/security/tg/TransportGuaranteeTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 245,
                            "endLine": 245,
                            "startColumn": 17,
                            "endColumn": 23
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/vault/VaultDatasourceTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 97,
                  "endLine": 97,
                  "startColumn": 26,
                  "endColumn": 53
                }
              }
            }
          ],
          "fingerprints": {
            "0": "26073cee5fe03fc8eb7ceaab5424435d824115f656beb01a7fe0b70e79cc2d7a",
            "1": "2ef7e926.33311739.33fa5dbe.e22980a8.fa5f6fc4.7fda7c5e.b90bd48d.54d46e25.2ef7e926.33311739.33fa5dbe.de031890.fa5f6fc4.7fda7c5e.fbeaea79.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/vault/VaultDatasourceTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 213,
                            "endLine": 213,
                            "startColumn": 42,
                            "endColumn": 60
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/security/common/Utils.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 149,
                  "endLine": 149,
                  "startColumn": 9,
                  "endColumn": 29
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3341f9b8a2d8729c9fbea134300154be26bc0f13f6b2a9e003db5767ee3dad5f",
            "1": "9c857669.acb39759.a224ef38.383ea08e.4f194f13.0d476878.b8c1bb71.54d46e25.362af7fe.26aff2b6.f5a0b1aa.383ea08e.4f194f13.ce109560.b8c1bb71.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/security/common/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 136,
                            "endLine": 136,
                            "startColumn": 62,
                            "endColumn": 70
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/security/common/Utils.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 167,
                  "endLine": 167,
                  "startColumn": 13,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b1c91a76b18baa63028bca118c7945e9607b1bfe6aafe2a14764df678df5c3d8",
            "1": "9c857669.26aff2b6.f5a0b1aa.383ea08e.4f194f13.0d476878.b8c1bb71.54d46e25.362af7fe.3ddf9eb6.f5a0b1aa.383ea08e.db8052ec.ce109560.b8c1bb71.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/security/common/Utils.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 136,
                            "endLine": 136,
                            "startColumn": 62,
                            "endColumn": 70
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/security/common/VaultHandler.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 130,
                  "endLine": 130,
                  "startColumn": 53,
                  "endColumn": 80
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3cbc651b30673df79371990b3100ebaf9e1faada38eb7ab2928ebd80933227c1",
            "1": "19689298.672552cb.285b25a7.d6ab05b5.859990e9.e2f0b62f.fee13eb6.3d402e85.19689298.f4249e2a.33fa5dbe.d6ab05b5.855504c3.7fda7c5e.09d7e425.c2162d15"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/security/common/VaultHandler.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 67,
                            "endLine": 67,
                            "startColumn": 46,
                            "endColumn": 60
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/security/common/VaultHandler.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 132,
                  "endLine": 132,
                  "startColumn": 17,
                  "endColumn": 25
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a94107e41dddee9b05c08c9dd6c48a1e4fb16ca626fe9673d95783f7b7d71ef3",
            "1": "362af7fe.c8c8034f.fc7d5400.d6ab05b5.ad94e2e6.e2f0b62f.ecc58136.54d46e25.362af7fe.f4249e2a.33fa5dbe.383ea08e.855504c3.7fda7c5e.09d7e425.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/shared/src/main/java/org/jboss/as/test/integration/security/common/VaultHandler.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 67,
                            "endLine": 67,
                            "startColumn": 46,
                            "endColumn": 60
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/ws/src/test/java/org/jboss/as/test/integration/ws/wsse/GenerateSignEncryptFiles.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 120,
                  "endLine": 120,
                  "startColumn": 9,
                  "endColumn": 29
                }
              }
            }
          ],
          "fingerprints": {
            "0": "df3430e48b5a916f58f116ad94d66d9c0551e1a99da07b24a47920cce56ecdd6",
            "1": "126c071d.acb39759.b347356b.383ea08e.6e69c151.9ef59d85.6a222d4e.54d46e25.362af7fe.dd05ec30.075f7928.383ea08e.ade640d7.da53db82.6a222d4e.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/ws/src/test/java/org/jboss/as/test/integration/ws/wsse/GenerateSignEncryptFiles.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 46,
                            "startColumn": 63,
                            "endColumn": 73
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/ws/src/test/java/org/jboss/as/test/integration/ws/wsse/GenerateSignEncryptFiles.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 129,
                  "endLine": 129,
                  "startColumn": 9,
                  "endColumn": 29
                }
              }
            }
          ],
          "fingerprints": {
            "0": "811fd4596740faf257470810074fa2c0918e3a8831a8e94ec1fa0cce6cce672c",
            "1": "3c44fde5.4a53cbad.ec32960f.383ea08e.43505f04.e2366686.37792dcd.54d46e25.362af7fe.dd05ec30.ec32960f.383ea08e.ade640d7.da53db82.37792dcd.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/ws/src/test/java/org/jboss/as/test/integration/ws/wsse/GenerateSignEncryptFiles.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 46,
                            "startColumn": 63,
                            "endColumn": 73
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/ws/src/test/java/org/jboss/as/test/integration/ws/wsse/GenerateSignEncryptFiles.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 136,
                  "endLine": 136,
                  "startColumn": 13,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4075ade261c70f9d0d2416c4a70e967c7a5c268b60a836d1811d91707834b3cd",
            "1": "12f82db9.c06c8d75.a224ef38.383ea08e.d31a8364.da53db82.bae646e8.54d46e25.362af7fe.3ddf9eb6.ec32960f.383ea08e.d31a8364.987d5477.37792dcd.67b6a6c8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/ws/src/test/java/org/jboss/as/test/integration/ws/wsse/GenerateSignEncryptFiles.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 46,
                            "startColumn": 63,
                            "endColumn": 73
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/manualmode/src/test/java/org/jboss/as/test/manualmode/ejb/ssl/GenerateJBossStores.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 73,
                  "endLine": 73,
                  "startColumn": 9,
                  "endColumn": 29
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b8b51889db3b96621f8b9a31effb97fca89b619a1ffa1a71a1e0ecbf7c137dae",
            "1": "3c44fde5.acb39759.b347356b.383ea08e.43505f04.a21ac4af.1b296500.54d46e25.362af7fe.4373802b.71a71d19.383ea08e.4f194f13.f997f7ae.1b296500.7e06a4b4"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/manualmode/src/test/java/org/jboss/as/test/manualmode/ejb/ssl/GenerateJBossStores.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 35,
                            "endLine": 35,
                            "startColumn": 60,
                            "endColumn": 75
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/manualmode/src/test/java/org/jboss/as/test/manualmode/ejb/ssl/GenerateJBossStores.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 85,
                  "endLine": 85,
                  "startColumn": 13,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "83f3af6ab670cf0f7a75842747ac281e7522825fe643c5014f3dcf2936b58772",
            "1": "f6a358ae.2059da75.71a71d19.383ea08e.4f194f13.dd62fee0.bae646e8.54d46e25.362af7fe.3ddf9eb6.71a71d19.383ea08e.d730e185.987d5477.edc28d13.7e06a4b4"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/manualmode/src/test/java/org/jboss/as/test/manualmode/ejb/ssl/GenerateJBossStores.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 35,
                            "endLine": 35,
                            "startColumn": 60,
                            "endColumn": 75
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/picketlink/src/test/java/org/wildfly/test/integration/security/picketlink/federation/util/FederationArchiveUtil.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 70,
                  "endLine": 70,
                  "startColumn": 9,
                  "endColumn": 29
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4f895f0beefedec6a9ca3621ff04b10df42054689a21384db2bb534910ef1e9b",
            "1": "3c44fde5.acb39759.b347356b.383ea08e.99ff7ae3.a21ac4af.1b296500.54d46e25.362af7fe.dd05ec30.075f7928.383ea08e.ade640d7.ce109560.1b296500.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/picketlink/src/test/java/org/wildfly/test/integration/security/picketlink/federation/util/FederationArchiveUtil.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 58,
                            "endColumn": 67
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/picketlink/src/test/java/org/wildfly/test/integration/security/picketlink/federation/util/FederationArchiveUtil.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 77,
                  "endLine": 77,
                  "startColumn": 13,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9f7e3187fb77d96ce27c89e0b831d09930485b2c22ee3186edb1256ee02d57f4",
            "1": "f6a358ae.d5eb6394.a224ef38.383ea08e.d31a8364.da53db82.bae646e8.54d46e25.362af7fe.dd05ec30.852b6501.383ea08e.d31a8364.da53db82.1b296500.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/picketlink/src/test/java/org/wildfly/test/integration/security/picketlink/federation/util/FederationArchiveUtil.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 63,
                            "endColumn": 73
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/ws/src/test/java/org/jboss/as/test/integration/ws/authentication/policy/GenerateSTSKeystore.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 70,
                  "endLine": 70,
                  "startColumn": 9,
                  "endColumn": 29
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d7aad93270ea051c6202749281faf1038d6d48ca4e259da92060638eb23220dd",
            "1": "3c44fde5.acb39759.b347356b.383ea08e.99ff7ae3.a21ac4af.1b296500.54d46e25.362af7fe.dd05ec30.075f7928.383ea08e.ade640d7.ce109560.1b296500.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/ws/src/test/java/org/jboss/as/test/integration/ws/authentication/policy/GenerateSTSKeystore.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 35,
                            "endLine": 35,
                            "startColumn": 58,
                            "endColumn": 67
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/ws/src/test/java/org/jboss/as/test/integration/ws/authentication/policy/GenerateSTSKeystore.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 77,
                  "endLine": 77,
                  "startColumn": 13,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9331f0669157a06fbfb53bc5bbaadb2f3eeb604779a978075e5f776850a84b67",
            "1": "f6a358ae.d5eb6394.a224ef38.383ea08e.d31a8364.da53db82.bae646e8.54d46e25.362af7fe.dd05ec30.d06764f5.383ea08e.d31a8364.987d5477.1b296500.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/ws/src/test/java/org/jboss/as/test/integration/ws/authentication/policy/GenerateSTSKeystore.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 34,
                            "endLine": 34,
                            "startColumn": 63,
                            "endColumn": 73
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/ws/src/test/java/org/jboss/as/test/integration/ws/wsse/GenerateJKSAndPropertiesFiles.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 103,
                  "endLine": 103,
                  "startColumn": 9,
                  "endColumn": 29
                }
              }
            }
          ],
          "fingerprints": {
            "0": "32d93dfeaccb1a1f1077ab8b8afecbe882fbbb788af4b7d2fe0c4c31626de12a",
            "1": "3c44fde5.acb39759.f63d14ff.383ea08e.43505f04.f17e935d.1b296500.54d46e25.362af7fe.dd05ec30.075f7928.383ea08e.ade640d7.ce109560.1b296500.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/ws/src/test/java/org/jboss/as/test/integration/ws/wsse/GenerateJKSAndPropertiesFiles.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 54,
                            "endColumn": 62
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/ws/src/test/java/org/jboss/as/test/integration/ws/wsse/GenerateJKSAndPropertiesFiles.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 110,
                  "endLine": 110,
                  "startColumn": 13,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1dda150e9f3476a37f40a6206f2018da88a0791e2809a30ce0fddbd2aafe63fd",
            "1": "a95ad5dd.2059da75.71a71d19.383ea08e.d31a8364.dd62fee0.bae646e8.54d46e25.362af7fe.3ddf9eb6.71a71d19.383ea08e.d31a8364.987d5477.1b296500.79d2b223"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/ws/src/test/java/org/jboss/as/test/integration/ws/wsse/GenerateJKSAndPropertiesFiles.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 35,
                            "endLine": 35,
                            "startColumn": 50,
                            "endColumn": 58
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/GenerateLDAPSJKSStore.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 63,
                  "endLine": 63,
                  "startColumn": 9,
                  "endColumn": 29
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0eb9f00f639bd6f0b775a11fb5fc54f51124c8de0a8f18f24d79b841298e18aa",
            "1": "3c44fde5.acb39759.b347356b.383ea08e.99ff7ae3.a21ac4af.1b296500.54d46e25.362af7fe.dd05ec30.075f7928.383ea08e.75f548fa.da53db82.1b296500.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/GenerateLDAPSJKSStore.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 34,
                            "endLine": 34,
                            "startColumn": 63,
                            "endColumn": 71
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/GenerateLDAPSJKSStore.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 70,
                  "endLine": 70,
                  "startColumn": 13,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "11ef6d8884d512cb2f8d841885a6542c67726d5fea62cb14a1b11378cc3ac8a9",
            "1": "f6a358ae.d5eb6394.a224ef38.383ea08e.d31a8364.da53db82.bae646e8.54d46e25.362af7fe.dd05ec30.075f7928.383ea08e.d31a8364.da53db82.1b296500.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/GenerateLDAPSJKSStore.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 34,
                            "endLine": 34,
                            "startColumn": 63,
                            "endColumn": 71
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/common/CustomEjbAccessingLoginModule.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 86,
                  "endLine": 86,
                  "startColumn": 17,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "60f19d38bc1c8e8dc6d5be5042f7b11f2cc96b61900ccf58fb4cc3d5ea8a27af",
            "1": "9cf53582.dd05ec30.71a71d19.de031890.e3cf5d19.7fda7c5e.5cd65e98.54d46e25.9cf53582.dd05ec30.71a71d19.de031890.c636881a.7fda7c5e.c66d287d.183dbdf8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/common/CustomEjbAccessingLoginModule.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 86,
                            "endLine": 86,
                            "startColumn": 33,
                            "endColumn": 39
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/common/CustomEjbAccessingLoginModule.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 89,
                  "endLine": 89,
                  "startColumn": 17,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e7e7418199c469ebccc3be4033098e9c52f464deee096050469988580f898a7c",
            "1": "9cf53582.dd05ec30.71a71d19.de031890.f1d9f854.7fda7c5e.5cd65e98.54d46e25.9cf53582.dd05ec30.71a71d19.de031890.c636881a.7fda7c5e.c66d287d.183dbdf8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/common/CustomEjbAccessingLoginModule.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 89,
                            "endLine": 89,
                            "startColumn": 33,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/common/CustomTestLoginModule.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 67,
                  "endLine": 67,
                  "startColumn": 17,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e533ad51c6da05eaacd470a7dd7764a395ec31495347b656dd7fb181022a95d5",
            "1": "19689298.c8c8034f.71a71d19.e22980a8.025462d2.dd62fee0.5cd65e98.8a6c0d71.19689298.c8c8034f.71a71d19.e22980a8.e27b77c0.dd62fee0.5cd65e98.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/common/CustomTestLoginModule.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 67,
                            "endLine": 67,
                            "startColumn": 33,
                            "endColumn": 39
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/common/CustomTestLoginModule.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 70,
                  "endLine": 70,
                  "startColumn": 17,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "99f7df24dbebbe0c3b407bf7fbace5288ab98f8870f2d66c683afb024683d191",
            "1": "19689298.c8c8034f.71a71d19.e22980a8.025462d2.dd62fee0.5cd65e98.8a6c0d71.19689298.c8c8034f.71a71d19.e22980a8.e27b77c0.dd62fee0.5cd65e98.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/common/CustomTestLoginModule.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 33,
                            "endColumn": 41
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/management/api/web/ListenerTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 131,
                  "endLine": 131,
                  "startColumn": 9,
                  "endColumn": 29
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2ce5719091afa88ae53ba46bbe21f506ba67d1c2af2854fc3878602f724a6b45",
            "1": "73bb6e75.acb39759.cb2d0a5c.383ea08e.089b7490.0d476878.6a222d4e.54d46e25.362af7fe.4373802b.cb2d0a5c.383ea08e.a6dcd9ec.cf8b9278.edc28d13.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/management/api/web/ListenerTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 98,
                            "endLine": 98,
                            "startColumn": 63,
                            "endColumn": 73
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/management/api/web/ListenerTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 141,
                  "endLine": 141,
                  "startColumn": 13,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8eea00d216c62a8248b6e60412bc6119676328b29e2c5cca00bb802fc96992bb",
            "1": "f6a358ae.d5eb6394.a224ef38.383ea08e.d31a8364.da53db82.bae646e8.54d46e25.362af7fe.3ddf9eb6.cb2d0a5c.383ea08e.d31a8364.cf8b9278.edc28d13.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/management/api/web/ListenerTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 98,
                            "endLine": 98,
                            "startColumn": 63,
                            "endColumn": 73
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/jca/security/DsWithMixedSecurityTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 113,
                  "endLine": 113,
                  "startColumn": 13,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "57028d12413016e3aa828fc6d660495eb16e7411251e0fc0c2ec611dec16ab46",
            "1": "64a10dd2.861518ae.fc7d5400.9dca0613.db6769f0.afb45897.cb4968e9.54d46e25.64a10dd2.861518ae.fc7d5400.9dca0613.db6769f0.afb45897.cb4968e9.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/jca/security/DsWithMixedSecurityTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 113,
                            "endLine": 113,
                            "startColumn": 43,
                            "endColumn": 55
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/manualmode/src/test/java/org/wildfly/test/manual/elytron/seccontext/AbstractSecurityContextPropagationTestBase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 439,
                  "endLine": 441,
                  "startColumn": 38,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "26b008cb94ae6d3ffd4a6af0e90d68fcb4bcb1bb53f87e7af25bf2da7fba0ed9",
            "1": "f3d72066.786c220c.3675d218.265c24a4.1591379f.e09655a9.7bb967d5.3e3c6e70.f3d72066.786c220c.3675d218.265c24a4.1591379f.e09655a9.7bb967d5.3e3c6e70"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/manualmode/src/test/java/org/wildfly/test/manual/elytron/seccontext/AbstractSecurityContextPropagationTestBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 407,
                            "endLine": 407,
                            "startColumn": 56,
                            "endColumn": 64
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/elytron/src/test/java/org/wildfly/test/integration/elytron/http/PasswordMechTestBase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54,
                  "startColumn": 55,
                  "endColumn": 82
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b81c30c4104064813dcee6b4b07ce6f706c0914ab4c11c666420733b0f0a92b0",
            "1": "19689298.83dbfe52.70b7bd66.6c52ae28.c3b29efd.3c409c75.6db71195.dbbea4f1.19689298.83dbfe52.70b7bd66.6c52ae28.c3b29efd.3c409c75.6db71195.dbbea4f1"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/elytron/src/test/java/org/wildfly/test/integration/elytron/http/PasswordMechTestBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 92,
                            "endColumn": 103
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/elytron/src/test/java/org/wildfly/test/integration/elytron/http/PasswordMechTestBase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 72,
                  "endLine": 72,
                  "startColumn": 55,
                  "endColumn": 82
                }
              }
            }
          ],
          "fingerprints": {
            "0": "698d0a2460b33361639736a543ea0a0d43ced2f453f608d17eedf2e04e009e93",
            "1": "19689298.83dbfe52.70b7bd66.6c52ae28.c3b29efd.3c409c75.6db71195.dbbea4f1.19689298.83dbfe52.70b7bd66.6c52ae28.c3b29efd.3c409c75.6db71195.dbbea4f1"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/elytron/src/test/java/org/wildfly/test/integration/elytron/http/PasswordMechTestBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 72,
                            "endLine": 72,
                            "startColumn": 92,
                            "endColumn": 103
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/elytron/src/test/java/org/wildfly/test/integration/elytron/http/PasswordMechTestBase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 89,
                  "endLine": 89,
                  "startColumn": 55,
                  "endColumn": 82
                }
              }
            }
          ],
          "fingerprints": {
            "0": "acc705bc36dcda22cc71439304a2ae925be8b4d29d423301367ee6f7947355d6",
            "1": "19689298.02cef318.70b7bd66.6c52ae28.c3b29efd.ca1bdb84.be89aaf5.dbbea4f1.19689298.02cef318.70b7bd66.6c52ae28.c3b29efd.ca1bdb84.be89aaf5.dbbea4f1"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/elytron/src/test/java/org/wildfly/test/integration/elytron/http/PasswordMechTestBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 89,
                            "endLine": 89,
                            "startColumn": 97,
                            "endColumn": 108
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/elytron/src/test/java/org/wildfly/test/integration/elytron/http/PasswordMechTestBase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 106,
                  "endLine": 106,
                  "startColumn": 55,
                  "endColumn": 82
                }
              }
            }
          ],
          "fingerprints": {
            "0": "90ed89cb6ea8a38dd75520aa2080ed6a25e4fa25c155e05e5f74127512174d35",
            "1": "19689298.83dbfe52.89dd5772.a76d6fbd.c3b29efd.3c409c75.6db71195.bb5aa77b.19689298.83dbfe52.89dd5772.a76d6fbd.c3b29efd.3c409c75.6db71195.bb5aa77b"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/elytron/src/test/java/org/wildfly/test/integration/elytron/http/PasswordMechTestBase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 106,
                            "endLine": 106,
                            "startColumn": 92,
                            "endColumn": 108
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/security/jaspi/WebSecurityJaspiWithFailingAuthModuleTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 94,
                  "endLine": 94,
                  "startColumn": 21,
                  "endColumn": 48
                }
              }
            }
          ],
          "fingerprints": {
            "0": "138dd5f55cae2929ee21f8058c589a2135132c85837e7529b430ebfa94d1ec57",
            "1": "3ad43fde.26f8faaf.70b7bd66.6f0c77ab.e3cf5d19.b3d278da.1d5bb634.52d20a2f.3ad43fde.26f8faaf.70b7bd66.6f0c77ab.e3cf5d19.b3d278da.1d5bb634.52d20a2f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/security/jaspi/WebSecurityJaspiWithFailingAuthModuleTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 88,
                            "endLine": 88,
                            "startColumn": 26,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/authentication/BasicAuthenticationWebFailoverTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 155,
                  "endLine": 155,
                  "startColumn": 86,
                  "endColumn": 113
                }
              }
            }
          ],
          "fingerprints": {
            "0": "49f85192e9e57b61c6a7f4739c726b219e0a28b51c461db24e1d70c7174eb7a6",
            "1": "3ad43fde.861518ae.70b7bd66.0b9ef9cc.79cfbec1.a4420d6a.055df7b2.52d20a2f.3ad43fde.485e03c4.71a71d19.58a2ef45.9cdf26ab.dd62fee0.19057017.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/clustering/src/test/java/org/jboss/as/test/clustering/cluster/web/authentication/BasicAuthenticationWebFailoverTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 51,
                            "endColumn": 61
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/web/security/authentication/BasicAuthenticationMechanismPicketboxRemovedTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 89,
                  "endLine": 89,
                  "startColumn": 21,
                  "endColumn": 48
                }
              }
            }
          ],
          "fingerprints": {
            "0": "edc2c9744d57668717fde0e4c27d1891d32d72ed9adb47a66e399aa17b13e3e1",
            "1": "3ad43fde.26f8faaf.70b7bd66.5ad7b8b0.bdc892fe.ca1bdb84.5a95ce2d.dbbea4f1.3ad43fde.26f8faaf.70b7bd66.5ad7b8b0.bdc892fe.ca1bdb84.5a95ce2d.dbbea4f1"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/web/security/authentication/BasicAuthenticationMechanismPicketboxRemovedTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 67,
                            "endLine": 67,
                            "startColumn": 44,
                            "endColumn": 55
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/security/WebSecuritySimpleRoleMappingSecurityManagerTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 119,
                  "endLine": 119,
                  "startColumn": 21,
                  "endColumn": 48
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b98fdc663c84ce195b07f93eb628223e4542d3cdcb82765194863c06718ad2c3",
            "1": "3ad43fde.ea9c8426.48890917.22db47d1.79cfbec1.1eefd90d.1d5bb634.d72a2834.3ad43fde.ea9c8426.48890917.22db47d1.79cfbec1.1eefd90d.1d5bb634.d72a2834"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/web/src/test/java/org/jboss/as/test/integration/web/security/WebSecuritySimpleRoleMappingSecurityManagerTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 113,
                            "endLine": 113,
                            "startColumn": 27,
                            "endColumn": 34
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/jaspi/JASPIHttpSchemeServerAuthModelTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 114,
                  "endLine": 114,
                  "startColumn": 55,
                  "endColumn": 82
                }
              }
            }
          ],
          "fingerprints": {
            "0": "bb87303dc7aca5244c9f5a62ecc990e66ce699190ec7bff8feb86dad6c926162",
            "1": "faf7d159.26f8faaf.70b7bd66.2b433635.79cfbec1.641a6627.22adf68d.d1ac8179.faf7d159.84f5448f.70b7bd66.3519ac88.bb61bed7.0d476878.f85e6add.0cfe54c9"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/jaspi/JASPIHttpSchemeServerAuthModelTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 89,
                            "endLine": 89,
                            "startColumn": 76,
                            "endColumn": 82
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/picketlink/src/test/java/org/wildfly/test/integration/security/picketlink/core/PartitionManagerProducerTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 112,
                  "endLine": 112,
                  "startColumn": 33,
                  "endColumn": 41
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4c750ec969889aca7d876675ebd8bbec354f29e2c31e2f6a7b2e963b9fa57c9e",
            "1": "19689298.4290f216.71a71d19.6c52ae28.bc6ac6aa.dd62fee0.2c27049c.8a6c0d71.19689298.4290f216.71a71d19.6c52ae28.bc6ac6aa.dd62fee0.2c27049c.8a6c0d71"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/picketlink/src/test/java/org/wildfly/test/integration/security/picketlink/core/PartitionManagerProducerTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 112,
                            "endLine": 112,
                            "startColumn": 42,
                            "endColumn": 52
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/picketlink/src/test/java/org/wildfly/test/integration/security/picketlink/core/PartitionManagerProducerTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 123,
                  "endLine": 123,
                  "startColumn": 9,
                  "endColumn": 37
                }
              }
            }
          ],
          "fingerprints": {
            "0": "db268689abddb81426a97b0451f5b38697fd65cc7f0b542c2271fca48afb5fda",
            "1": "eca6990a.c888432d.5ef54930.e22980a8.f6d438cc.f2b18ec1.a9f34b0c.fde7589e.eca6990a.c888432d.5ef54930.e22980a8.f6d438cc.f2b18ec1.a9f34b0c.fde7589e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/picketlink/src/test/java/org/wildfly/test/integration/security/picketlink/core/PartitionManagerProducerTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 123,
                            "endLine": 123,
                            "startColumn": 38,
                            "endColumn": 48
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "security/subsystem/src/test/java/org/jboss/as/security/SecurityDomainModelv12UnitTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74,
                  "startColumn": 13,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "949b8f2973b676f11f537fb987b37b1184826022d5a311b8dbbf4ed42ec72b82",
            "1": "c0846cd0.f6eebaf2.fc7d5400.e22980a8.d31a8364.2edcb7d1.bae646e8.54d46e25.4d9dffb9.f6eebaf2.075f7928.383ea08e.d31a8364.ce109560.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/subsystem/src/test/java/org/jboss/as/security/SecurityDomainModelv12UnitTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 53,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "security/subsystem/src/test/java/org/jboss/as/security/SecurityDomainModelv12UnitTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 77,
                  "endLine": 77,
                  "startColumn": 13,
                  "endColumn": 29
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ac504da285b844bb54808fcb3bf48699c70208ceab1af9c5d37cfd5ee7a680c0",
            "1": "1be82056.d5eb6394.fc7d5400.e22980a8.d31a8364.72c7f2aa.bae646e8.54d46e25.4d9dffb9.dd05ec30.075f7928.383ea08e.d31a8364.ce109560.bae646e8.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "security/subsystem/src/test/java/org/jboss/as/security/SecurityDomainModelv12UnitTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 55,
                            "endColumn": 64
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "legacy/web/src/test/java/org/jboss/as/web/test/WebMigrateTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 127,
                  "endLine": 127,
                  "startColumn": 9,
                  "endColumn": 29
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e18c09f7a7f1d54bfd055672d4881cc6d512ea7868a550965b59745878ff34bb",
            "1": "73bb6e75.acb39759.cb2d0a5c.383ea08e.089b7490.0d476878.6a222d4e.54d46e25.362af7fe.4373802b.cb2d0a5c.383ea08e.a6dcd9ec.cf8b9278.edc28d13.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "legacy/web/src/test/java/org/jboss/as/web/test/WebMigrateTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 94,
                            "endLine": 94,
                            "startColumn": 63,
                            "endColumn": 73
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "legacy/web/src/test/java/org/jboss/as/web/test/WebMigrateTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 137,
                  "endLine": 137,
                  "startColumn": 13,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b6f60ee3abd8fb293018d07ded7606e42b98946158aaf2810029dcd3fc48ac82",
            "1": "f6a358ae.d5eb6394.a224ef38.383ea08e.d31a8364.da53db82.bae646e8.54d46e25.362af7fe.3ddf9eb6.cb2d0a5c.383ea08e.d31a8364.cf8b9278.edc28d13.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "legacy/web/src/test/java/org/jboss/as/web/test/WebMigrateTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 94,
                            "endLine": 94,
                            "startColumn": 63,
                            "endColumn": 73
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/ws/src/test/java/org/jboss/as/test/integration/ws/wsse/trust/shared/ClientCallbackHandler.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 36,
                  "endLine": 36,
                  "startColumn": 21,
                  "endColumn": 35
                }
              }
            }
          ],
          "fingerprints": {
            "0": "94e3ea118b0a4b7fe22ea5a91eae603e54a8704236effe2ba54f676b79e0c553",
            "1": "c2144274.15d51628.993dac2b.e22980a8.f1d9f854.1a9ca87f.7e4e8f0c.fde7589e.c2144274.15d51628.993dac2b.e22980a8.f1d9f854.1a9ca87f.7e4e8f0c.fde7589e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/ws/src/test/java/org/jboss/as/test/integration/ws/wsse/trust/shared/ClientCallbackHandler.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 36,
                            "startColumn": 36,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/ws/src/test/java/org/jboss/as/test/integration/ws/wsse/trust/shared/ClientCallbackHandler.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 39,
                  "endLine": 39,
                  "startColumn": 21,
                  "endColumn": 35
                }
              }
            }
          ],
          "fingerprints": {
            "0": "026c180869f7371f9ffbe2eafb1b7725b9a2f336503644ba9db0dba245880131",
            "1": "45745edd.15d51628.0a9220a2.e22980a8.f1d9f854.935029da.7e4e8f0c.fde7589e.45745edd.15d51628.0a9220a2.e22980a8.f1d9f854.935029da.7e4e8f0c.fde7589e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/ws/src/test/java/org/jboss/as/test/integration/ws/wsse/trust/shared/ClientCallbackHandler.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 36,
                            "endColumn": 46
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/ws/src/test/java/org/jboss/as/test/integration/ws/wsse/trust/shared/ClientCallbackHandler.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 42,
                  "endLine": 42,
                  "startColumn": 21,
                  "endColumn": 35
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7633de2e5ce5ecd79ccc32846dd32d8f798345898d8c2dd6b17f1369c6993571",
            "1": "45745edd.15d51628.0a9220a2.e22980a8.f1d9f854.935029da.7e4e8f0c.fde7589e.45745edd.15d51628.0a9220a2.e22980a8.f1d9f854.935029da.7e4e8f0c.fde7589e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/ws/src/test/java/org/jboss/as/test/integration/ws/wsse/trust/shared/ClientCallbackHandler.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 36,
                            "endColumn": 46
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/ws/src/test/java/org/jboss/as/test/integration/ws/wsse/trust/shared/ClientCallbackHandler.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 45,
                  "endLine": 45,
                  "startColumn": 21,
                  "endColumn": 35
                }
              }
            }
          ],
          "fingerprints": {
            "0": "df6452f4e2a2edccfdb55751e64ba86b8c6b82cb0115e02dad148c39b6028c2b",
            "1": "45745edd.15d51628.0a9220a2.e22980a8.9eb614cd.935029da.7e4e8f0c.fde7589e.45745edd.15d51628.0a9220a2.e22980a8.9eb614cd.935029da.7e4e8f0c.fde7589e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/ws/src/test/java/org/jboss/as/test/integration/ws/wsse/trust/shared/ClientCallbackHandler.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 36,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/ws/src/test/java/org/jboss/as/test/integration/ws/wsse/GenerateWSKeyStores.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 67,
                  "endLine": 67,
                  "startColumn": 9,
                  "endColumn": 29
                }
              }
            }
          ],
          "fingerprints": {
            "0": "74310afe5c0149161f2f7c4fbddf468834555f75ef5e8c7fb8b1bc2972b38b51",
            "1": "3c44fde5.acb39759.b347356b.383ea08e.43505f04.a21ac4af.1b296500.54d46e25.362af7fe.dd05ec30.075f7928.383ea08e.4f194f13.da53db82.1b296500.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/ws/src/test/java/org/jboss/as/test/integration/ws/wsse/GenerateWSKeyStores.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 34,
                            "endLine": 34,
                            "startColumn": 63,
                            "endColumn": 73
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/ws/src/test/java/org/jboss/as/test/integration/ws/wsse/GenerateWSKeyStores.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 79,
                  "endLine": 79,
                  "startColumn": 13,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a4ff885302de9b58705744b36c3adf4811198bca46eac9f673fac5b33000f159",
            "1": "f6a358ae.8cd836d9.a224ef38.383ea08e.4f194f13.da53db82.bae646e8.54d46e25.362af7fe.3ddf9eb6.1ea8ec2f.383ea08e.4f194f13.da53db82.82d38ccd.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/ws/src/test/java/org/jboss/as/test/integration/ws/wsse/GenerateWSKeyStores.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 34,
                            "endLine": 34,
                            "startColumn": 63,
                            "endColumn": 73
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/credentialreference/CredentialReferenceDatasourceTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 284,
                  "endLine": 284,
                  "startColumn": 26,
                  "endColumn": 53
                }
              }
            }
          ],
          "fingerprints": {
            "0": "637282d4b4f24495cec84119d68010691b163723a1e81c9f125bfb01e129da89",
            "1": "2ef7e926.d6ed1ea5.97a39976.2ce106be.ddc39441.46c54f66.c38f4faf.ee7e12af.2ef7e926.d6ed1ea5.97a39976.2ce106be.ddc39441.46c54f66.c38f4faf.ee7e12af"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/credentialreference/CredentialReferenceDatasourceTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 53,
                            "endColumn": 66
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 353,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/manualmode/src/test/java/org/wildfly/test/manual/elytron/seccontext/ServerChainSecurityContextPropagationTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 300,
                  "endLine": 302,
                  "startColumn": 38,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "37153ea4d16f7a1cc3b2b04e6ce7665478adcd80b8328cb3e58f52ab5caf2284",
            "1": "accad39b.f3ad02b2.3675d218.9cfa0513.6e33795d.e09655a9.0fe0cd8e.5fd53bff.e8dee390.f2feea9d.46cb7e4d.64c2a99d.bb61bed7.0d476878.598b63ba.e848a230"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/manualmode/src/test/java/org/wildfly/test/manual/elytron/seccontext/ServerChainSecurityContextPropagationTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 236,
                            "endLine": 236,
                            "startColumn": 88,
                            "endColumn": 96
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/manualmode/src/test/java/org/wildfly/test/manual/elytron/seccontext/ServerChainSecurityContextPropagationTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 307,
                  "endLine": 309,
                  "startColumn": 21,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fe2c5d70b05c98160a53ab945cf1aa0090385d39398c21c42ef41663a866995f",
            "1": "45c3aaf4.11d63bf5.780ac62e.9c394b36.028bcfcc.e09655a9.b78a2fed.3e3c6e70.7bd462d8.f2feea9d.46cb7e4d.3519ac88.bb61bed7.0d476878.598b63ba.e848a230"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/manualmode/src/test/java/org/wildfly/test/manual/elytron/seccontext/ServerChainSecurityContextPropagationTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 237,
                            "endLine": 237,
                            "startColumn": 80,
                            "endColumn": 96
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/manualmode/src/test/java/org/jboss/as/test/manualmode/security/GenerateLdapConnectionStores.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 72,
                  "endLine": 72,
                  "startColumn": 9,
                  "endColumn": 29
                }
              }
            }
          ],
          "fingerprints": {
            "0": "acf8773951555685d969e13f04b0adca6dfba840473f9369c2afbbba1930d6c7",
            "1": "3c44fde5.acb39759.b347356b.383ea08e.43505f04.a21ac4af.1b296500.54d46e25.362af7fe.f6eebaf2.075f7928.383ea08e.ade640d7.987d5477.1b296500.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/manualmode/src/test/java/org/jboss/as/test/manualmode/security/GenerateLdapConnectionStores.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 34,
                            "endLine": 34,
                            "startColumn": 53,
                            "endColumn": 61
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/manualmode/src/test/java/org/jboss/as/test/manualmode/security/GenerateLdapConnectionStores.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 88,
                  "endLine": 88,
                  "startColumn": 13,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f7d0d0d0bd82e10342d7e3287b788b3d4503bd5ebd72fb12c19cec0c8c83defa",
            "1": "c0846cd0.f6eebaf2.23a01d7d.383ea08e.d31a8364.0d476878.bae646e8.54d46e25.362af7fe.3ddf9eb6.11afb8ce.383ea08e.d31a8364.987d5477.1b296500.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/manualmode/src/test/java/org/jboss/as/test/manualmode/security/GenerateLdapConnectionStores.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 34,
                            "endLine": 34,
                            "startColumn": 53,
                            "endColumn": 61
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 403,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/HardcodedPassword/test",
          "ruleIndex": 31,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found password string",
            "markdown": "Do not hardcode passwords in code. Found password {0}",
            "arguments": [
              "[string](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/picketlink/src/test/java/org/wildfly/test/integration/security/picketlink/idm/AbstractBasicIdentityManagementTestCase.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 92,
                  "endLine": 92,
                  "startColumn": 33,
                  "endColumn": 41
                }
              }
            }
          ],
          "fingerprints": {
            "0": "58d0090b72f0c48de24b5124a6344327edabc254003e72d19160ae53301eab95",
            "1": "19689298.4290f216.71a71d19.6c52ae28.bc6ac6aa.dd62fee0.2c27049c.8a6c0d71.19689298.4290f216.71a71d19.6c52ae28.bc6ac6aa.dd62fee0.2c27049c.8a6c0d71"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/picketlink/src/test/java/org/wildfly/test/integration/security/picketlink/idm/AbstractBasicIdentityManagementTestCase.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 92,
                            "endLine": 92,
                            "startColumn": 42,
                            "endColumn": 52
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 353,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/WebCookieMissesCallToSetHttpOnly",
          "ruleIndex": 32,
          "level": "warning",
          "message": {
            "text": "Cookie misses a call to setHttpOnly. Set the HttpOnly flag to true to protect the cookie from possible malicious code on client side.",
            "markdown": "Cookie misses a call to setHttpOnly. Set the HttpOnly flag to true to protect the cookie from possible malicious code on client side.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ee-9/source-transform/undertow/target/generated-sources/transformed/org/wildfly/extension/undertow/RemoteHttpInvokerService.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 55,
                  "startColumn": 65,
                  "endColumn": 75
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c14b051a47603462b531c9e6daef778d56514e611e8751c9c42c34468e07bcef",
            "1": "ac4e7c8b.42f20912.fb7b7a0a.6c52ae28.6bacdef5.6c564a64.388a131d.a0332ecc.ac4e7c8b.c9d69798.fb7b7a0a.73c1d9dd.c6f7747a.7fda7c5e.388a131d.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ee-9/source-transform/undertow/target/generated-sources/transformed/org/wildfly/extension/undertow/RemoteHttpInvokerService.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 65,
                            "endColumn": 75
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 551,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/WebCookieMissesCallToSetHttpOnly",
          "ruleIndex": 32,
          "level": "warning",
          "message": {
            "text": "Cookie misses a call to setHttpOnly. Set the HttpOnly flag to true to protect the cookie from possible malicious code on client side.",
            "markdown": "Cookie misses a call to setHttpOnly. Set the HttpOnly flag to true to protect the cookie from possible malicious code on client side.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ee-9/source-transform/undertow/target/generated-sources/transformed/org/wildfly/extension/undertow/HttpInvokerHostService.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 100,
                  "endLine": 100,
                  "startColumn": 34,
                  "endColumn": 44
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6c73a879b34107277b594984aeffa5f43595ca15ec33bacd10328fc638edb2c1",
            "1": "63c12074.93eb5886.fb7b7a0a.6c52ae28.4a9c8cbc.7fda7c5e.388a131d.54d46e25.63c12074.93eb5886.fb7b7a0a.e22980a8.d8a9f4f7.7fda7c5e.388a131d.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "ee-9/source-transform/undertow/target/generated-sources/transformed/org/wildfly/extension/undertow/HttpInvokerHostService.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 34,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 551,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/WebCookieMissesCallToSetHttpOnly",
          "ruleIndex": 32,
          "level": "warning",
          "message": {
            "text": "Cookie misses a call to setHttpOnly. Set the HttpOnly flag to true to protect the cookie from possible malicious code on client side.",
            "markdown": "Cookie misses a call to setHttpOnly. Set the HttpOnly flag to true to protect the cookie from possible malicious code on client side.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "undertow/src/main/java/org/wildfly/extension/undertow/RemoteHttpInvokerService.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 55,
                  "startColumn": 65,
                  "endColumn": 75
                }
              }
            }
          ],
          "fingerprints": {
            "0": "df2f1e02cecba1e805bad6c7fc49d579ecdec176e25a1af436769ecf2f57f0bd",
            "1": "ac4e7c8b.42f20912.fb7b7a0a.6c52ae28.6bacdef5.6c564a64.388a131d.a0332ecc.ac4e7c8b.c9d69798.fb7b7a0a.73c1d9dd.c6f7747a.7fda7c5e.388a131d.54d46e25"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "undertow/src/main/java/org/wildfly/extension/undertow/RemoteHttpInvokerService.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 55,
                            "startColumn": 65,
                            "endColumn": 75
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 551,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "java/ReturnsPassword/test",
          "ruleIndex": 33,
          "level": "note",
          "message": {
            "text": "An attacker might be able to detect the value of the password due to the exposure of comparison timing. When the functions Arrays.equals() or String.equals() are called, they will exit earlier if fewer bytes are matched. Use password encoder such as BCrypt for comparing passwords.",
            "markdown": "An attacker might be able to detect the value of the password due to the exposure of comparison timing. When the functions Arrays.equals() or String.equals() are called, they will exit earlier if fewer bytes are matched. Use password encoder such as BCrypt for comparing passwords.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/common/CustomEjbAccessingLoginModule.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 63,
                  "endLine": 63,
                  "startColumn": 20,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "36fcd549416e2ec0a456add943363e646736c0c1591c4960dd655e2e41517f64",
            "1": "9cf53582.dd05ec30.71a71d19.de031890.c636881a.7fda7c5e.c66d287d.183dbdf8.9cf53582.dd05ec30.71a71d19.de031890.c636881a.7fda7c5e.c66d287d.183dbdf8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/security/loginmodules/common/CustomEjbAccessingLoginModule.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 63,
                            "endLine": 63,
                            "startColumn": 20,
                            "endColumn": 28
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 401,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        }
      ],
      "properties": {
        "coverage": [
          {
            "files": 2346,
            "isSupported": true,
            "lang": "XML"
          },
          {
            "files": 8922,
            "isSupported": true,
            "lang": "Java"
          },
          {
            "files": 62,
            "isSupported": true,
            "lang": "HTML"
          },
          {
            "files": 27,
            "isSupported": false,
            "lang": "Unknown"
          },
          {
            "files": 5,
            "isSupported": false,
            "lang": "Roff Manpage"
          }
        ]
      }
    }
  ]
}
